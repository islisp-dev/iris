(defgeneric f (x y) (:method-combination nil))
(defclass C0000 () ())
(defmethod f ((x C0000) (y C0000)) nil)
(defclass C0001 () ())
(defmethod f ((x C0001) (y C0001)) nil)
(defclass C000 (C0000 C0001) ())
(defmethod f ((x C0001) (y C0000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001 'C0000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000) (y C0001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000 'C0001)
                 (f (create (class C0001)) (create (class C000))))
(defclass C0010 () ())
(defmethod f ((x C0010) (y C0010)) nil)
(defclass C0011 () ())
(defmethod f ((x C0011) (y C0011)) nil)
(defclass C001 (C0010 C0011) ())
(defmethod f ((x C0011) (y C0010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011 'C0010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010) (y C0011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010 'C0011)
                 (f (create (class C0011)) (create (class C001))))
(defclass C00 (C000 C001) ())
(defmethod f ((x C001) (y C000))
                 (format (standard-output) "call with ~A ~A~%" 'C001 'C000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000) (y C001))
                 (format (standard-output) "call with ~A ~A~%" 'C000 'C001)
                 (f (create (class C001)) (create (class C00))))
(defclass C0100 () ())
(defmethod f ((x C0100) (y C0100)) nil)
(defclass C0101 () ())
(defmethod f ((x C0101) (y C0101)) nil)
(defclass C010 (C0100 C0101) ())
(defmethod f ((x C0101) (y C0100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101 'C0100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100) (y C0101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100 'C0101)
                 (f (create (class C0101)) (create (class C010))))
(defclass C0110 () ())
(defmethod f ((x C0110) (y C0110)) nil)
(defclass C0111 () ())
(defmethod f ((x C0111) (y C0111)) nil)
(defclass C011 (C0110 C0111) ())
(defmethod f ((x C0111) (y C0110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111 'C0110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110) (y C0111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110 'C0111)
                 (f (create (class C0111)) (create (class C011))))
(defclass C01 (C010 C011) ())
(defmethod f ((x C011) (y C010))
                 (format (standard-output) "call with ~A ~A~%" 'C011 'C010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010) (y C011))
                 (format (standard-output) "call with ~A ~A~%" 'C010 'C011)
                 (f (create (class C011)) (create (class C01))))
(defclass C0 (C00 C01) ())
(defmethod f ((x C01) (y C00))
                 (format (standard-output) "call with ~A ~A~%" 'C01 'C00)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00) (y C01))
                 (format (standard-output) "call with ~A ~A~%" 'C00 'C01)
                 (f (create (class C01)) (create (class C0))))
(defclass C1000 () ())
(defmethod f ((x C1000) (y C1000)) nil)
(defclass C1001 () ())
(defmethod f ((x C1001) (y C1001)) nil)
(defclass C100 (C1000 C1001) ())
(defmethod f ((x C1001) (y C1000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001 'C1000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000) (y C1001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000 'C1001)
                 (f (create (class C1001)) (create (class C100))))
(defclass C1010 () ())
(defmethod f ((x C1010) (y C1010)) nil)
(defclass C1011 () ())
(defmethod f ((x C1011) (y C1011)) nil)
(defclass C101 (C1010 C1011) ())
(defmethod f ((x C1011) (y C1010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011 'C1010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010) (y C1011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010 'C1011)
                 (f (create (class C1011)) (create (class C101))))
(defclass C10 (C100 C101) ())
(defmethod f ((x C101) (y C100))
                 (format (standard-output) "call with ~A ~A~%" 'C101 'C100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100) (y C101))
                 (format (standard-output) "call with ~A ~A~%" 'C100 'C101)
                 (f (create (class C101)) (create (class C10))))
(defclass C1100 () ())
(defmethod f ((x C1100) (y C1100)) nil)
(defclass C1101 () ())
(defmethod f ((x C1101) (y C1101)) nil)
(defclass C110 (C1100 C1101) ())
(defmethod f ((x C1101) (y C1100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101 'C1100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100) (y C1101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100 'C1101)
                 (f (create (class C1101)) (create (class C110))))
(defclass C1110 () ())
(defmethod f ((x C1110) (y C1110)) nil)
(defclass C1111 () ())
(defmethod f ((x C1111) (y C1111)) nil)
(defclass C111 (C1110 C1111) ())
(defmethod f ((x C1111) (y C1110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111 'C1110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110) (y C1111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110 'C1111)
                 (f (create (class C1111)) (create (class C111))))
(defclass C11 (C110 C111) ())
(defmethod f ((x C111) (y C110))
                 (format (standard-output) "call with ~A ~A~%" 'C111 'C110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110) (y C111))
                 (format (standard-output) "call with ~A ~A~%" 'C110 'C111)
                 (f (create (class C111)) (create (class C11))))
(defclass C1 (C10 C11) ())
(defmethod f ((x C11) (y C10))
                 (format (standard-output) "call with ~A ~A~%" 'C11 'C10)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10) (y C11))
                 (format (standard-output) "call with ~A ~A~%" 'C10 'C11)
                 (f (create (class C11)) (create (class C1))))
(defclass C (C0 C1) ())
(defmethod f ((x C1) (y C0))
                 (format (standard-output) "call with ~A ~A~%" 'C1 'C0)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0) (y C1))
                 (format (standard-output) "call with ~A ~A~%" 'C0 'C1)
                 (f (create (class C1)) (create (class C))))
(f (create (class c)) (create (class c)))
