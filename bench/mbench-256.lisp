(defgeneric f (x y) (:method-combination nil))
(defclass C00000000 () ())
(defmethod f ((x C00000000) (y C00000000)) nil)
(defclass C00000001 () ())
(defmethod f ((x C00000001) (y C00000001)) nil)
(defclass C0000000 (C00000000 C00000001) ())
(defmethod f ((x C00000001) (y C00000000))
                 (format (standard-output) "call with ~A ~A~%" 'C00000001 'C00000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000000) (y C00000001))
                 (format (standard-output) "call with ~A ~A~%" 'C00000000 'C00000001)
                 (f (create (class C00000001)) (create (class C0000000))))
(defclass C00000010 () ())
(defmethod f ((x C00000010) (y C00000010)) nil)
(defclass C00000011 () ())
(defmethod f ((x C00000011) (y C00000011)) nil)
(defclass C0000001 (C00000010 C00000011) ())
(defmethod f ((x C00000011) (y C00000010))
                 (format (standard-output) "call with ~A ~A~%" 'C00000011 'C00000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000010) (y C00000011))
                 (format (standard-output) "call with ~A ~A~%" 'C00000010 'C00000011)
                 (f (create (class C00000011)) (create (class C0000001))))
(defclass C000000 (C0000000 C0000001) ())
(defmethod f ((x C0000001) (y C0000000))
                 (format (standard-output) "call with ~A ~A~%" 'C0000001 'C0000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000000) (y C0000001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000000 'C0000001)
                 (f (create (class C0000001)) (create (class C000000))))
(defclass C00000100 () ())
(defmethod f ((x C00000100) (y C00000100)) nil)
(defclass C00000101 () ())
(defmethod f ((x C00000101) (y C00000101)) nil)
(defclass C0000010 (C00000100 C00000101) ())
(defmethod f ((x C00000101) (y C00000100))
                 (format (standard-output) "call with ~A ~A~%" 'C00000101 'C00000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000100) (y C00000101))
                 (format (standard-output) "call with ~A ~A~%" 'C00000100 'C00000101)
                 (f (create (class C00000101)) (create (class C0000010))))
(defclass C00000110 () ())
(defmethod f ((x C00000110) (y C00000110)) nil)
(defclass C00000111 () ())
(defmethod f ((x C00000111) (y C00000111)) nil)
(defclass C0000011 (C00000110 C00000111) ())
(defmethod f ((x C00000111) (y C00000110))
                 (format (standard-output) "call with ~A ~A~%" 'C00000111 'C00000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000110) (y C00000111))
                 (format (standard-output) "call with ~A ~A~%" 'C00000110 'C00000111)
                 (f (create (class C00000111)) (create (class C0000011))))
(defclass C000001 (C0000010 C0000011) ())
(defmethod f ((x C0000011) (y C0000010))
                 (format (standard-output) "call with ~A ~A~%" 'C0000011 'C0000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000010) (y C0000011))
                 (format (standard-output) "call with ~A ~A~%" 'C0000010 'C0000011)
                 (f (create (class C0000011)) (create (class C000001))))
(defclass C00000 (C000000 C000001) ())
(defmethod f ((x C000001) (y C000000))
                 (format (standard-output) "call with ~A ~A~%" 'C000001 'C000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000) (y C000001))
                 (format (standard-output) "call with ~A ~A~%" 'C000000 'C000001)
                 (f (create (class C000001)) (create (class C00000))))
(defclass C00001000 () ())
(defmethod f ((x C00001000) (y C00001000)) nil)
(defclass C00001001 () ())
(defmethod f ((x C00001001) (y C00001001)) nil)
(defclass C0000100 (C00001000 C00001001) ())
(defmethod f ((x C00001001) (y C00001000))
                 (format (standard-output) "call with ~A ~A~%" 'C00001001 'C00001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001000) (y C00001001))
                 (format (standard-output) "call with ~A ~A~%" 'C00001000 'C00001001)
                 (f (create (class C00001001)) (create (class C0000100))))
(defclass C00001010 () ())
(defmethod f ((x C00001010) (y C00001010)) nil)
(defclass C00001011 () ())
(defmethod f ((x C00001011) (y C00001011)) nil)
(defclass C0000101 (C00001010 C00001011) ())
(defmethod f ((x C00001011) (y C00001010))
                 (format (standard-output) "call with ~A ~A~%" 'C00001011 'C00001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001010) (y C00001011))
                 (format (standard-output) "call with ~A ~A~%" 'C00001010 'C00001011)
                 (f (create (class C00001011)) (create (class C0000101))))
(defclass C000010 (C0000100 C0000101) ())
(defmethod f ((x C0000101) (y C0000100))
                 (format (standard-output) "call with ~A ~A~%" 'C0000101 'C0000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000100) (y C0000101))
                 (format (standard-output) "call with ~A ~A~%" 'C0000100 'C0000101)
                 (f (create (class C0000101)) (create (class C000010))))
(defclass C00001100 () ())
(defmethod f ((x C00001100) (y C00001100)) nil)
(defclass C00001101 () ())
(defmethod f ((x C00001101) (y C00001101)) nil)
(defclass C0000110 (C00001100 C00001101) ())
(defmethod f ((x C00001101) (y C00001100))
                 (format (standard-output) "call with ~A ~A~%" 'C00001101 'C00001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001100) (y C00001101))
                 (format (standard-output) "call with ~A ~A~%" 'C00001100 'C00001101)
                 (f (create (class C00001101)) (create (class C0000110))))
(defclass C00001110 () ())
(defmethod f ((x C00001110) (y C00001110)) nil)
(defclass C00001111 () ())
(defmethod f ((x C00001111) (y C00001111)) nil)
(defclass C0000111 (C00001110 C00001111) ())
(defmethod f ((x C00001111) (y C00001110))
                 (format (standard-output) "call with ~A ~A~%" 'C00001111 'C00001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001110) (y C00001111))
                 (format (standard-output) "call with ~A ~A~%" 'C00001110 'C00001111)
                 (f (create (class C00001111)) (create (class C0000111))))
(defclass C000011 (C0000110 C0000111) ())
(defmethod f ((x C0000111) (y C0000110))
                 (format (standard-output) "call with ~A ~A~%" 'C0000111 'C0000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000110) (y C0000111))
                 (format (standard-output) "call with ~A ~A~%" 'C0000110 'C0000111)
                 (f (create (class C0000111)) (create (class C000011))))
(defclass C00001 (C000010 C000011) ())
(defmethod f ((x C000011) (y C000010))
                 (format (standard-output) "call with ~A ~A~%" 'C000011 'C000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010) (y C000011))
                 (format (standard-output) "call with ~A ~A~%" 'C000010 'C000011)
                 (f (create (class C000011)) (create (class C00001))))
(defclass C0000 (C00000 C00001) ())
(defmethod f ((x C00001) (y C00000))
                 (format (standard-output) "call with ~A ~A~%" 'C00001 'C00000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000) (y C00001))
                 (format (standard-output) "call with ~A ~A~%" 'C00000 'C00001)
                 (f (create (class C00001)) (create (class C0000))))
(defclass C00010000 () ())
(defmethod f ((x C00010000) (y C00010000)) nil)
(defclass C00010001 () ())
(defmethod f ((x C00010001) (y C00010001)) nil)
(defclass C0001000 (C00010000 C00010001) ())
(defmethod f ((x C00010001) (y C00010000))
                 (format (standard-output) "call with ~A ~A~%" 'C00010001 'C00010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010000) (y C00010001))
                 (format (standard-output) "call with ~A ~A~%" 'C00010000 'C00010001)
                 (f (create (class C00010001)) (create (class C0001000))))
(defclass C00010010 () ())
(defmethod f ((x C00010010) (y C00010010)) nil)
(defclass C00010011 () ())
(defmethod f ((x C00010011) (y C00010011)) nil)
(defclass C0001001 (C00010010 C00010011) ())
(defmethod f ((x C00010011) (y C00010010))
                 (format (standard-output) "call with ~A ~A~%" 'C00010011 'C00010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010010) (y C00010011))
                 (format (standard-output) "call with ~A ~A~%" 'C00010010 'C00010011)
                 (f (create (class C00010011)) (create (class C0001001))))
(defclass C000100 (C0001000 C0001001) ())
(defmethod f ((x C0001001) (y C0001000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001001 'C0001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001000) (y C0001001))
                 (format (standard-output) "call with ~A ~A~%" 'C0001000 'C0001001)
                 (f (create (class C0001001)) (create (class C000100))))
(defclass C00010100 () ())
(defmethod f ((x C00010100) (y C00010100)) nil)
(defclass C00010101 () ())
(defmethod f ((x C00010101) (y C00010101)) nil)
(defclass C0001010 (C00010100 C00010101) ())
(defmethod f ((x C00010101) (y C00010100))
                 (format (standard-output) "call with ~A ~A~%" 'C00010101 'C00010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010100) (y C00010101))
                 (format (standard-output) "call with ~A ~A~%" 'C00010100 'C00010101)
                 (f (create (class C00010101)) (create (class C0001010))))
(defclass C00010110 () ())
(defmethod f ((x C00010110) (y C00010110)) nil)
(defclass C00010111 () ())
(defmethod f ((x C00010111) (y C00010111)) nil)
(defclass C0001011 (C00010110 C00010111) ())
(defmethod f ((x C00010111) (y C00010110))
                 (format (standard-output) "call with ~A ~A~%" 'C00010111 'C00010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010110) (y C00010111))
                 (format (standard-output) "call with ~A ~A~%" 'C00010110 'C00010111)
                 (f (create (class C00010111)) (create (class C0001011))))
(defclass C000101 (C0001010 C0001011) ())
(defmethod f ((x C0001011) (y C0001010))
                 (format (standard-output) "call with ~A ~A~%" 'C0001011 'C0001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001010) (y C0001011))
                 (format (standard-output) "call with ~A ~A~%" 'C0001010 'C0001011)
                 (f (create (class C0001011)) (create (class C000101))))
(defclass C00010 (C000100 C000101) ())
(defmethod f ((x C000101) (y C000100))
                 (format (standard-output) "call with ~A ~A~%" 'C000101 'C000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100) (y C000101))
                 (format (standard-output) "call with ~A ~A~%" 'C000100 'C000101)
                 (f (create (class C000101)) (create (class C00010))))
(defclass C00011000 () ())
(defmethod f ((x C00011000) (y C00011000)) nil)
(defclass C00011001 () ())
(defmethod f ((x C00011001) (y C00011001)) nil)
(defclass C0001100 (C00011000 C00011001) ())
(defmethod f ((x C00011001) (y C00011000))
                 (format (standard-output) "call with ~A ~A~%" 'C00011001 'C00011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011000) (y C00011001))
                 (format (standard-output) "call with ~A ~A~%" 'C00011000 'C00011001)
                 (f (create (class C00011001)) (create (class C0001100))))
(defclass C00011010 () ())
(defmethod f ((x C00011010) (y C00011010)) nil)
(defclass C00011011 () ())
(defmethod f ((x C00011011) (y C00011011)) nil)
(defclass C0001101 (C00011010 C00011011) ())
(defmethod f ((x C00011011) (y C00011010))
                 (format (standard-output) "call with ~A ~A~%" 'C00011011 'C00011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011010) (y C00011011))
                 (format (standard-output) "call with ~A ~A~%" 'C00011010 'C00011011)
                 (f (create (class C00011011)) (create (class C0001101))))
(defclass C000110 (C0001100 C0001101) ())
(defmethod f ((x C0001101) (y C0001100))
                 (format (standard-output) "call with ~A ~A~%" 'C0001101 'C0001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001100) (y C0001101))
                 (format (standard-output) "call with ~A ~A~%" 'C0001100 'C0001101)
                 (f (create (class C0001101)) (create (class C000110))))
(defclass C00011100 () ())
(defmethod f ((x C00011100) (y C00011100)) nil)
(defclass C00011101 () ())
(defmethod f ((x C00011101) (y C00011101)) nil)
(defclass C0001110 (C00011100 C00011101) ())
(defmethod f ((x C00011101) (y C00011100))
                 (format (standard-output) "call with ~A ~A~%" 'C00011101 'C00011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011100) (y C00011101))
                 (format (standard-output) "call with ~A ~A~%" 'C00011100 'C00011101)
                 (f (create (class C00011101)) (create (class C0001110))))
(defclass C00011110 () ())
(defmethod f ((x C00011110) (y C00011110)) nil)
(defclass C00011111 () ())
(defmethod f ((x C00011111) (y C00011111)) nil)
(defclass C0001111 (C00011110 C00011111) ())
(defmethod f ((x C00011111) (y C00011110))
                 (format (standard-output) "call with ~A ~A~%" 'C00011111 'C00011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011110) (y C00011111))
                 (format (standard-output) "call with ~A ~A~%" 'C00011110 'C00011111)
                 (f (create (class C00011111)) (create (class C0001111))))
(defclass C000111 (C0001110 C0001111) ())
(defmethod f ((x C0001111) (y C0001110))
                 (format (standard-output) "call with ~A ~A~%" 'C0001111 'C0001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001110) (y C0001111))
                 (format (standard-output) "call with ~A ~A~%" 'C0001110 'C0001111)
                 (f (create (class C0001111)) (create (class C000111))))
(defclass C00011 (C000110 C000111) ())
(defmethod f ((x C000111) (y C000110))
                 (format (standard-output) "call with ~A ~A~%" 'C000111 'C000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110) (y C000111))
                 (format (standard-output) "call with ~A ~A~%" 'C000110 'C000111)
                 (f (create (class C000111)) (create (class C00011))))
(defclass C0001 (C00010 C00011) ())
(defmethod f ((x C00011) (y C00010))
                 (format (standard-output) "call with ~A ~A~%" 'C00011 'C00010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010) (y C00011))
                 (format (standard-output) "call with ~A ~A~%" 'C00010 'C00011)
                 (f (create (class C00011)) (create (class C0001))))
(defclass C000 (C0000 C0001) ())
(defmethod f ((x C0001) (y C0000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001 'C0000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000) (y C0001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000 'C0001)
                 (f (create (class C0001)) (create (class C000))))
(defclass C00100000 () ())
(defmethod f ((x C00100000) (y C00100000)) nil)
(defclass C00100001 () ())
(defmethod f ((x C00100001) (y C00100001)) nil)
(defclass C0010000 (C00100000 C00100001) ())
(defmethod f ((x C00100001) (y C00100000))
                 (format (standard-output) "call with ~A ~A~%" 'C00100001 'C00100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100000) (y C00100001))
                 (format (standard-output) "call with ~A ~A~%" 'C00100000 'C00100001)
                 (f (create (class C00100001)) (create (class C0010000))))
(defclass C00100010 () ())
(defmethod f ((x C00100010) (y C00100010)) nil)
(defclass C00100011 () ())
(defmethod f ((x C00100011) (y C00100011)) nil)
(defclass C0010001 (C00100010 C00100011) ())
(defmethod f ((x C00100011) (y C00100010))
                 (format (standard-output) "call with ~A ~A~%" 'C00100011 'C00100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100010) (y C00100011))
                 (format (standard-output) "call with ~A ~A~%" 'C00100010 'C00100011)
                 (f (create (class C00100011)) (create (class C0010001))))
(defclass C001000 (C0010000 C0010001) ())
(defmethod f ((x C0010001) (y C0010000))
                 (format (standard-output) "call with ~A ~A~%" 'C0010001 'C0010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010000) (y C0010001))
                 (format (standard-output) "call with ~A ~A~%" 'C0010000 'C0010001)
                 (f (create (class C0010001)) (create (class C001000))))
(defclass C00100100 () ())
(defmethod f ((x C00100100) (y C00100100)) nil)
(defclass C00100101 () ())
(defmethod f ((x C00100101) (y C00100101)) nil)
(defclass C0010010 (C00100100 C00100101) ())
(defmethod f ((x C00100101) (y C00100100))
                 (format (standard-output) "call with ~A ~A~%" 'C00100101 'C00100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100100) (y C00100101))
                 (format (standard-output) "call with ~A ~A~%" 'C00100100 'C00100101)
                 (f (create (class C00100101)) (create (class C0010010))))
(defclass C00100110 () ())
(defmethod f ((x C00100110) (y C00100110)) nil)
(defclass C00100111 () ())
(defmethod f ((x C00100111) (y C00100111)) nil)
(defclass C0010011 (C00100110 C00100111) ())
(defmethod f ((x C00100111) (y C00100110))
                 (format (standard-output) "call with ~A ~A~%" 'C00100111 'C00100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100110) (y C00100111))
                 (format (standard-output) "call with ~A ~A~%" 'C00100110 'C00100111)
                 (f (create (class C00100111)) (create (class C0010011))))
(defclass C001001 (C0010010 C0010011) ())
(defmethod f ((x C0010011) (y C0010010))
                 (format (standard-output) "call with ~A ~A~%" 'C0010011 'C0010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010010) (y C0010011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010010 'C0010011)
                 (f (create (class C0010011)) (create (class C001001))))
(defclass C00100 (C001000 C001001) ())
(defmethod f ((x C001001) (y C001000))
                 (format (standard-output) "call with ~A ~A~%" 'C001001 'C001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000) (y C001001))
                 (format (standard-output) "call with ~A ~A~%" 'C001000 'C001001)
                 (f (create (class C001001)) (create (class C00100))))
(defclass C00101000 () ())
(defmethod f ((x C00101000) (y C00101000)) nil)
(defclass C00101001 () ())
(defmethod f ((x C00101001) (y C00101001)) nil)
(defclass C0010100 (C00101000 C00101001) ())
(defmethod f ((x C00101001) (y C00101000))
                 (format (standard-output) "call with ~A ~A~%" 'C00101001 'C00101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101000) (y C00101001))
                 (format (standard-output) "call with ~A ~A~%" 'C00101000 'C00101001)
                 (f (create (class C00101001)) (create (class C0010100))))
(defclass C00101010 () ())
(defmethod f ((x C00101010) (y C00101010)) nil)
(defclass C00101011 () ())
(defmethod f ((x C00101011) (y C00101011)) nil)
(defclass C0010101 (C00101010 C00101011) ())
(defmethod f ((x C00101011) (y C00101010))
                 (format (standard-output) "call with ~A ~A~%" 'C00101011 'C00101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101010) (y C00101011))
                 (format (standard-output) "call with ~A ~A~%" 'C00101010 'C00101011)
                 (f (create (class C00101011)) (create (class C0010101))))
(defclass C001010 (C0010100 C0010101) ())
(defmethod f ((x C0010101) (y C0010100))
                 (format (standard-output) "call with ~A ~A~%" 'C0010101 'C0010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010100) (y C0010101))
                 (format (standard-output) "call with ~A ~A~%" 'C0010100 'C0010101)
                 (f (create (class C0010101)) (create (class C001010))))
(defclass C00101100 () ())
(defmethod f ((x C00101100) (y C00101100)) nil)
(defclass C00101101 () ())
(defmethod f ((x C00101101) (y C00101101)) nil)
(defclass C0010110 (C00101100 C00101101) ())
(defmethod f ((x C00101101) (y C00101100))
                 (format (standard-output) "call with ~A ~A~%" 'C00101101 'C00101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101100) (y C00101101))
                 (format (standard-output) "call with ~A ~A~%" 'C00101100 'C00101101)
                 (f (create (class C00101101)) (create (class C0010110))))
(defclass C00101110 () ())
(defmethod f ((x C00101110) (y C00101110)) nil)
(defclass C00101111 () ())
(defmethod f ((x C00101111) (y C00101111)) nil)
(defclass C0010111 (C00101110 C00101111) ())
(defmethod f ((x C00101111) (y C00101110))
                 (format (standard-output) "call with ~A ~A~%" 'C00101111 'C00101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101110) (y C00101111))
                 (format (standard-output) "call with ~A ~A~%" 'C00101110 'C00101111)
                 (f (create (class C00101111)) (create (class C0010111))))
(defclass C001011 (C0010110 C0010111) ())
(defmethod f ((x C0010111) (y C0010110))
                 (format (standard-output) "call with ~A ~A~%" 'C0010111 'C0010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010110) (y C0010111))
                 (format (standard-output) "call with ~A ~A~%" 'C0010110 'C0010111)
                 (f (create (class C0010111)) (create (class C001011))))
(defclass C00101 (C001010 C001011) ())
(defmethod f ((x C001011) (y C001010))
                 (format (standard-output) "call with ~A ~A~%" 'C001011 'C001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010) (y C001011))
                 (format (standard-output) "call with ~A ~A~%" 'C001010 'C001011)
                 (f (create (class C001011)) (create (class C00101))))
(defclass C0010 (C00100 C00101) ())
(defmethod f ((x C00101) (y C00100))
                 (format (standard-output) "call with ~A ~A~%" 'C00101 'C00100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100) (y C00101))
                 (format (standard-output) "call with ~A ~A~%" 'C00100 'C00101)
                 (f (create (class C00101)) (create (class C0010))))
(defclass C00110000 () ())
(defmethod f ((x C00110000) (y C00110000)) nil)
(defclass C00110001 () ())
(defmethod f ((x C00110001) (y C00110001)) nil)
(defclass C0011000 (C00110000 C00110001) ())
(defmethod f ((x C00110001) (y C00110000))
                 (format (standard-output) "call with ~A ~A~%" 'C00110001 'C00110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110000) (y C00110001))
                 (format (standard-output) "call with ~A ~A~%" 'C00110000 'C00110001)
                 (f (create (class C00110001)) (create (class C0011000))))
(defclass C00110010 () ())
(defmethod f ((x C00110010) (y C00110010)) nil)
(defclass C00110011 () ())
(defmethod f ((x C00110011) (y C00110011)) nil)
(defclass C0011001 (C00110010 C00110011) ())
(defmethod f ((x C00110011) (y C00110010))
                 (format (standard-output) "call with ~A ~A~%" 'C00110011 'C00110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110010) (y C00110011))
                 (format (standard-output) "call with ~A ~A~%" 'C00110010 'C00110011)
                 (f (create (class C00110011)) (create (class C0011001))))
(defclass C001100 (C0011000 C0011001) ())
(defmethod f ((x C0011001) (y C0011000))
                 (format (standard-output) "call with ~A ~A~%" 'C0011001 'C0011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011000) (y C0011001))
                 (format (standard-output) "call with ~A ~A~%" 'C0011000 'C0011001)
                 (f (create (class C0011001)) (create (class C001100))))
(defclass C00110100 () ())
(defmethod f ((x C00110100) (y C00110100)) nil)
(defclass C00110101 () ())
(defmethod f ((x C00110101) (y C00110101)) nil)
(defclass C0011010 (C00110100 C00110101) ())
(defmethod f ((x C00110101) (y C00110100))
                 (format (standard-output) "call with ~A ~A~%" 'C00110101 'C00110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110100) (y C00110101))
                 (format (standard-output) "call with ~A ~A~%" 'C00110100 'C00110101)
                 (f (create (class C00110101)) (create (class C0011010))))
(defclass C00110110 () ())
(defmethod f ((x C00110110) (y C00110110)) nil)
(defclass C00110111 () ())
(defmethod f ((x C00110111) (y C00110111)) nil)
(defclass C0011011 (C00110110 C00110111) ())
(defmethod f ((x C00110111) (y C00110110))
                 (format (standard-output) "call with ~A ~A~%" 'C00110111 'C00110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110110) (y C00110111))
                 (format (standard-output) "call with ~A ~A~%" 'C00110110 'C00110111)
                 (f (create (class C00110111)) (create (class C0011011))))
(defclass C001101 (C0011010 C0011011) ())
(defmethod f ((x C0011011) (y C0011010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011011 'C0011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011010) (y C0011011))
                 (format (standard-output) "call with ~A ~A~%" 'C0011010 'C0011011)
                 (f (create (class C0011011)) (create (class C001101))))
(defclass C00110 (C001100 C001101) ())
(defmethod f ((x C001101) (y C001100))
                 (format (standard-output) "call with ~A ~A~%" 'C001101 'C001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100) (y C001101))
                 (format (standard-output) "call with ~A ~A~%" 'C001100 'C001101)
                 (f (create (class C001101)) (create (class C00110))))
(defclass C00111000 () ())
(defmethod f ((x C00111000) (y C00111000)) nil)
(defclass C00111001 () ())
(defmethod f ((x C00111001) (y C00111001)) nil)
(defclass C0011100 (C00111000 C00111001) ())
(defmethod f ((x C00111001) (y C00111000))
                 (format (standard-output) "call with ~A ~A~%" 'C00111001 'C00111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111000) (y C00111001))
                 (format (standard-output) "call with ~A ~A~%" 'C00111000 'C00111001)
                 (f (create (class C00111001)) (create (class C0011100))))
(defclass C00111010 () ())
(defmethod f ((x C00111010) (y C00111010)) nil)
(defclass C00111011 () ())
(defmethod f ((x C00111011) (y C00111011)) nil)
(defclass C0011101 (C00111010 C00111011) ())
(defmethod f ((x C00111011) (y C00111010))
                 (format (standard-output) "call with ~A ~A~%" 'C00111011 'C00111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111010) (y C00111011))
                 (format (standard-output) "call with ~A ~A~%" 'C00111010 'C00111011)
                 (f (create (class C00111011)) (create (class C0011101))))
(defclass C001110 (C0011100 C0011101) ())
(defmethod f ((x C0011101) (y C0011100))
                 (format (standard-output) "call with ~A ~A~%" 'C0011101 'C0011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011100) (y C0011101))
                 (format (standard-output) "call with ~A ~A~%" 'C0011100 'C0011101)
                 (f (create (class C0011101)) (create (class C001110))))
(defclass C00111100 () ())
(defmethod f ((x C00111100) (y C00111100)) nil)
(defclass C00111101 () ())
(defmethod f ((x C00111101) (y C00111101)) nil)
(defclass C0011110 (C00111100 C00111101) ())
(defmethod f ((x C00111101) (y C00111100))
                 (format (standard-output) "call with ~A ~A~%" 'C00111101 'C00111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111100) (y C00111101))
                 (format (standard-output) "call with ~A ~A~%" 'C00111100 'C00111101)
                 (f (create (class C00111101)) (create (class C0011110))))
(defclass C00111110 () ())
(defmethod f ((x C00111110) (y C00111110)) nil)
(defclass C00111111 () ())
(defmethod f ((x C00111111) (y C00111111)) nil)
(defclass C0011111 (C00111110 C00111111) ())
(defmethod f ((x C00111111) (y C00111110))
                 (format (standard-output) "call with ~A ~A~%" 'C00111111 'C00111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111110) (y C00111111))
                 (format (standard-output) "call with ~A ~A~%" 'C00111110 'C00111111)
                 (f (create (class C00111111)) (create (class C0011111))))
(defclass C001111 (C0011110 C0011111) ())
(defmethod f ((x C0011111) (y C0011110))
                 (format (standard-output) "call with ~A ~A~%" 'C0011111 'C0011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011110) (y C0011111))
                 (format (standard-output) "call with ~A ~A~%" 'C0011110 'C0011111)
                 (f (create (class C0011111)) (create (class C001111))))
(defclass C00111 (C001110 C001111) ())
(defmethod f ((x C001111) (y C001110))
                 (format (standard-output) "call with ~A ~A~%" 'C001111 'C001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110) (y C001111))
                 (format (standard-output) "call with ~A ~A~%" 'C001110 'C001111)
                 (f (create (class C001111)) (create (class C00111))))
(defclass C0011 (C00110 C00111) ())
(defmethod f ((x C00111) (y C00110))
                 (format (standard-output) "call with ~A ~A~%" 'C00111 'C00110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110) (y C00111))
                 (format (standard-output) "call with ~A ~A~%" 'C00110 'C00111)
                 (f (create (class C00111)) (create (class C0011))))
(defclass C001 (C0010 C0011) ())
(defmethod f ((x C0011) (y C0010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011 'C0010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010) (y C0011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010 'C0011)
                 (f (create (class C0011)) (create (class C001))))
(defclass C00 (C000 C001) ())
(defmethod f ((x C001) (y C000))
                 (format (standard-output) "call with ~A ~A~%" 'C001 'C000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000) (y C001))
                 (format (standard-output) "call with ~A ~A~%" 'C000 'C001)
                 (f (create (class C001)) (create (class C00))))
(defclass C01000000 () ())
(defmethod f ((x C01000000) (y C01000000)) nil)
(defclass C01000001 () ())
(defmethod f ((x C01000001) (y C01000001)) nil)
(defclass C0100000 (C01000000 C01000001) ())
(defmethod f ((x C01000001) (y C01000000))
                 (format (standard-output) "call with ~A ~A~%" 'C01000001 'C01000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000000) (y C01000001))
                 (format (standard-output) "call with ~A ~A~%" 'C01000000 'C01000001)
                 (f (create (class C01000001)) (create (class C0100000))))
(defclass C01000010 () ())
(defmethod f ((x C01000010) (y C01000010)) nil)
(defclass C01000011 () ())
(defmethod f ((x C01000011) (y C01000011)) nil)
(defclass C0100001 (C01000010 C01000011) ())
(defmethod f ((x C01000011) (y C01000010))
                 (format (standard-output) "call with ~A ~A~%" 'C01000011 'C01000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000010) (y C01000011))
                 (format (standard-output) "call with ~A ~A~%" 'C01000010 'C01000011)
                 (f (create (class C01000011)) (create (class C0100001))))
(defclass C010000 (C0100000 C0100001) ())
(defmethod f ((x C0100001) (y C0100000))
                 (format (standard-output) "call with ~A ~A~%" 'C0100001 'C0100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100000) (y C0100001))
                 (format (standard-output) "call with ~A ~A~%" 'C0100000 'C0100001)
                 (f (create (class C0100001)) (create (class C010000))))
(defclass C01000100 () ())
(defmethod f ((x C01000100) (y C01000100)) nil)
(defclass C01000101 () ())
(defmethod f ((x C01000101) (y C01000101)) nil)
(defclass C0100010 (C01000100 C01000101) ())
(defmethod f ((x C01000101) (y C01000100))
                 (format (standard-output) "call with ~A ~A~%" 'C01000101 'C01000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000100) (y C01000101))
                 (format (standard-output) "call with ~A ~A~%" 'C01000100 'C01000101)
                 (f (create (class C01000101)) (create (class C0100010))))
(defclass C01000110 () ())
(defmethod f ((x C01000110) (y C01000110)) nil)
(defclass C01000111 () ())
(defmethod f ((x C01000111) (y C01000111)) nil)
(defclass C0100011 (C01000110 C01000111) ())
(defmethod f ((x C01000111) (y C01000110))
                 (format (standard-output) "call with ~A ~A~%" 'C01000111 'C01000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000110) (y C01000111))
                 (format (standard-output) "call with ~A ~A~%" 'C01000110 'C01000111)
                 (f (create (class C01000111)) (create (class C0100011))))
(defclass C010001 (C0100010 C0100011) ())
(defmethod f ((x C0100011) (y C0100010))
                 (format (standard-output) "call with ~A ~A~%" 'C0100011 'C0100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100010) (y C0100011))
                 (format (standard-output) "call with ~A ~A~%" 'C0100010 'C0100011)
                 (f (create (class C0100011)) (create (class C010001))))
(defclass C01000 (C010000 C010001) ())
(defmethod f ((x C010001) (y C010000))
                 (format (standard-output) "call with ~A ~A~%" 'C010001 'C010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000) (y C010001))
                 (format (standard-output) "call with ~A ~A~%" 'C010000 'C010001)
                 (f (create (class C010001)) (create (class C01000))))
(defclass C01001000 () ())
(defmethod f ((x C01001000) (y C01001000)) nil)
(defclass C01001001 () ())
(defmethod f ((x C01001001) (y C01001001)) nil)
(defclass C0100100 (C01001000 C01001001) ())
(defmethod f ((x C01001001) (y C01001000))
                 (format (standard-output) "call with ~A ~A~%" 'C01001001 'C01001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001000) (y C01001001))
                 (format (standard-output) "call with ~A ~A~%" 'C01001000 'C01001001)
                 (f (create (class C01001001)) (create (class C0100100))))
(defclass C01001010 () ())
(defmethod f ((x C01001010) (y C01001010)) nil)
(defclass C01001011 () ())
(defmethod f ((x C01001011) (y C01001011)) nil)
(defclass C0100101 (C01001010 C01001011) ())
(defmethod f ((x C01001011) (y C01001010))
                 (format (standard-output) "call with ~A ~A~%" 'C01001011 'C01001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001010) (y C01001011))
                 (format (standard-output) "call with ~A ~A~%" 'C01001010 'C01001011)
                 (f (create (class C01001011)) (create (class C0100101))))
(defclass C010010 (C0100100 C0100101) ())
(defmethod f ((x C0100101) (y C0100100))
                 (format (standard-output) "call with ~A ~A~%" 'C0100101 'C0100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100100) (y C0100101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100100 'C0100101)
                 (f (create (class C0100101)) (create (class C010010))))
(defclass C01001100 () ())
(defmethod f ((x C01001100) (y C01001100)) nil)
(defclass C01001101 () ())
(defmethod f ((x C01001101) (y C01001101)) nil)
(defclass C0100110 (C01001100 C01001101) ())
(defmethod f ((x C01001101) (y C01001100))
                 (format (standard-output) "call with ~A ~A~%" 'C01001101 'C01001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001100) (y C01001101))
                 (format (standard-output) "call with ~A ~A~%" 'C01001100 'C01001101)
                 (f (create (class C01001101)) (create (class C0100110))))
(defclass C01001110 () ())
(defmethod f ((x C01001110) (y C01001110)) nil)
(defclass C01001111 () ())
(defmethod f ((x C01001111) (y C01001111)) nil)
(defclass C0100111 (C01001110 C01001111) ())
(defmethod f ((x C01001111) (y C01001110))
                 (format (standard-output) "call with ~A ~A~%" 'C01001111 'C01001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001110) (y C01001111))
                 (format (standard-output) "call with ~A ~A~%" 'C01001110 'C01001111)
                 (f (create (class C01001111)) (create (class C0100111))))
(defclass C010011 (C0100110 C0100111) ())
(defmethod f ((x C0100111) (y C0100110))
                 (format (standard-output) "call with ~A ~A~%" 'C0100111 'C0100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100110) (y C0100111))
                 (format (standard-output) "call with ~A ~A~%" 'C0100110 'C0100111)
                 (f (create (class C0100111)) (create (class C010011))))
(defclass C01001 (C010010 C010011) ())
(defmethod f ((x C010011) (y C010010))
                 (format (standard-output) "call with ~A ~A~%" 'C010011 'C010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010) (y C010011))
                 (format (standard-output) "call with ~A ~A~%" 'C010010 'C010011)
                 (f (create (class C010011)) (create (class C01001))))
(defclass C0100 (C01000 C01001) ())
(defmethod f ((x C01001) (y C01000))
                 (format (standard-output) "call with ~A ~A~%" 'C01001 'C01000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000) (y C01001))
                 (format (standard-output) "call with ~A ~A~%" 'C01000 'C01001)
                 (f (create (class C01001)) (create (class C0100))))
(defclass C01010000 () ())
(defmethod f ((x C01010000) (y C01010000)) nil)
(defclass C01010001 () ())
(defmethod f ((x C01010001) (y C01010001)) nil)
(defclass C0101000 (C01010000 C01010001) ())
(defmethod f ((x C01010001) (y C01010000))
                 (format (standard-output) "call with ~A ~A~%" 'C01010001 'C01010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010000) (y C01010001))
                 (format (standard-output) "call with ~A ~A~%" 'C01010000 'C01010001)
                 (f (create (class C01010001)) (create (class C0101000))))
(defclass C01010010 () ())
(defmethod f ((x C01010010) (y C01010010)) nil)
(defclass C01010011 () ())
(defmethod f ((x C01010011) (y C01010011)) nil)
(defclass C0101001 (C01010010 C01010011) ())
(defmethod f ((x C01010011) (y C01010010))
                 (format (standard-output) "call with ~A ~A~%" 'C01010011 'C01010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010010) (y C01010011))
                 (format (standard-output) "call with ~A ~A~%" 'C01010010 'C01010011)
                 (f (create (class C01010011)) (create (class C0101001))))
(defclass C010100 (C0101000 C0101001) ())
(defmethod f ((x C0101001) (y C0101000))
                 (format (standard-output) "call with ~A ~A~%" 'C0101001 'C0101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101000) (y C0101001))
                 (format (standard-output) "call with ~A ~A~%" 'C0101000 'C0101001)
                 (f (create (class C0101001)) (create (class C010100))))
(defclass C01010100 () ())
(defmethod f ((x C01010100) (y C01010100)) nil)
(defclass C01010101 () ())
(defmethod f ((x C01010101) (y C01010101)) nil)
(defclass C0101010 (C01010100 C01010101) ())
(defmethod f ((x C01010101) (y C01010100))
                 (format (standard-output) "call with ~A ~A~%" 'C01010101 'C01010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010100) (y C01010101))
                 (format (standard-output) "call with ~A ~A~%" 'C01010100 'C01010101)
                 (f (create (class C01010101)) (create (class C0101010))))
(defclass C01010110 () ())
(defmethod f ((x C01010110) (y C01010110)) nil)
(defclass C01010111 () ())
(defmethod f ((x C01010111) (y C01010111)) nil)
(defclass C0101011 (C01010110 C01010111) ())
(defmethod f ((x C01010111) (y C01010110))
                 (format (standard-output) "call with ~A ~A~%" 'C01010111 'C01010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010110) (y C01010111))
                 (format (standard-output) "call with ~A ~A~%" 'C01010110 'C01010111)
                 (f (create (class C01010111)) (create (class C0101011))))
(defclass C010101 (C0101010 C0101011) ())
(defmethod f ((x C0101011) (y C0101010))
                 (format (standard-output) "call with ~A ~A~%" 'C0101011 'C0101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101010) (y C0101011))
                 (format (standard-output) "call with ~A ~A~%" 'C0101010 'C0101011)
                 (f (create (class C0101011)) (create (class C010101))))
(defclass C01010 (C010100 C010101) ())
(defmethod f ((x C010101) (y C010100))
                 (format (standard-output) "call with ~A ~A~%" 'C010101 'C010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100) (y C010101))
                 (format (standard-output) "call with ~A ~A~%" 'C010100 'C010101)
                 (f (create (class C010101)) (create (class C01010))))
(defclass C01011000 () ())
(defmethod f ((x C01011000) (y C01011000)) nil)
(defclass C01011001 () ())
(defmethod f ((x C01011001) (y C01011001)) nil)
(defclass C0101100 (C01011000 C01011001) ())
(defmethod f ((x C01011001) (y C01011000))
                 (format (standard-output) "call with ~A ~A~%" 'C01011001 'C01011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011000) (y C01011001))
                 (format (standard-output) "call with ~A ~A~%" 'C01011000 'C01011001)
                 (f (create (class C01011001)) (create (class C0101100))))
(defclass C01011010 () ())
(defmethod f ((x C01011010) (y C01011010)) nil)
(defclass C01011011 () ())
(defmethod f ((x C01011011) (y C01011011)) nil)
(defclass C0101101 (C01011010 C01011011) ())
(defmethod f ((x C01011011) (y C01011010))
                 (format (standard-output) "call with ~A ~A~%" 'C01011011 'C01011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011010) (y C01011011))
                 (format (standard-output) "call with ~A ~A~%" 'C01011010 'C01011011)
                 (f (create (class C01011011)) (create (class C0101101))))
(defclass C010110 (C0101100 C0101101) ())
(defmethod f ((x C0101101) (y C0101100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101101 'C0101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101100) (y C0101101))
                 (format (standard-output) "call with ~A ~A~%" 'C0101100 'C0101101)
                 (f (create (class C0101101)) (create (class C010110))))
(defclass C01011100 () ())
(defmethod f ((x C01011100) (y C01011100)) nil)
(defclass C01011101 () ())
(defmethod f ((x C01011101) (y C01011101)) nil)
(defclass C0101110 (C01011100 C01011101) ())
(defmethod f ((x C01011101) (y C01011100))
                 (format (standard-output) "call with ~A ~A~%" 'C01011101 'C01011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011100) (y C01011101))
                 (format (standard-output) "call with ~A ~A~%" 'C01011100 'C01011101)
                 (f (create (class C01011101)) (create (class C0101110))))
(defclass C01011110 () ())
(defmethod f ((x C01011110) (y C01011110)) nil)
(defclass C01011111 () ())
(defmethod f ((x C01011111) (y C01011111)) nil)
(defclass C0101111 (C01011110 C01011111) ())
(defmethod f ((x C01011111) (y C01011110))
                 (format (standard-output) "call with ~A ~A~%" 'C01011111 'C01011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011110) (y C01011111))
                 (format (standard-output) "call with ~A ~A~%" 'C01011110 'C01011111)
                 (f (create (class C01011111)) (create (class C0101111))))
(defclass C010111 (C0101110 C0101111) ())
(defmethod f ((x C0101111) (y C0101110))
                 (format (standard-output) "call with ~A ~A~%" 'C0101111 'C0101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101110) (y C0101111))
                 (format (standard-output) "call with ~A ~A~%" 'C0101110 'C0101111)
                 (f (create (class C0101111)) (create (class C010111))))
(defclass C01011 (C010110 C010111) ())
(defmethod f ((x C010111) (y C010110))
                 (format (standard-output) "call with ~A ~A~%" 'C010111 'C010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110) (y C010111))
                 (format (standard-output) "call with ~A ~A~%" 'C010110 'C010111)
                 (f (create (class C010111)) (create (class C01011))))
(defclass C0101 (C01010 C01011) ())
(defmethod f ((x C01011) (y C01010))
                 (format (standard-output) "call with ~A ~A~%" 'C01011 'C01010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010) (y C01011))
                 (format (standard-output) "call with ~A ~A~%" 'C01010 'C01011)
                 (f (create (class C01011)) (create (class C0101))))
(defclass C010 (C0100 C0101) ())
(defmethod f ((x C0101) (y C0100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101 'C0100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100) (y C0101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100 'C0101)
                 (f (create (class C0101)) (create (class C010))))
(defclass C01100000 () ())
(defmethod f ((x C01100000) (y C01100000)) nil)
(defclass C01100001 () ())
(defmethod f ((x C01100001) (y C01100001)) nil)
(defclass C0110000 (C01100000 C01100001) ())
(defmethod f ((x C01100001) (y C01100000))
                 (format (standard-output) "call with ~A ~A~%" 'C01100001 'C01100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100000) (y C01100001))
                 (format (standard-output) "call with ~A ~A~%" 'C01100000 'C01100001)
                 (f (create (class C01100001)) (create (class C0110000))))
(defclass C01100010 () ())
(defmethod f ((x C01100010) (y C01100010)) nil)
(defclass C01100011 () ())
(defmethod f ((x C01100011) (y C01100011)) nil)
(defclass C0110001 (C01100010 C01100011) ())
(defmethod f ((x C01100011) (y C01100010))
                 (format (standard-output) "call with ~A ~A~%" 'C01100011 'C01100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100010) (y C01100011))
                 (format (standard-output) "call with ~A ~A~%" 'C01100010 'C01100011)
                 (f (create (class C01100011)) (create (class C0110001))))
(defclass C011000 (C0110000 C0110001) ())
(defmethod f ((x C0110001) (y C0110000))
                 (format (standard-output) "call with ~A ~A~%" 'C0110001 'C0110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110000) (y C0110001))
                 (format (standard-output) "call with ~A ~A~%" 'C0110000 'C0110001)
                 (f (create (class C0110001)) (create (class C011000))))
(defclass C01100100 () ())
(defmethod f ((x C01100100) (y C01100100)) nil)
(defclass C01100101 () ())
(defmethod f ((x C01100101) (y C01100101)) nil)
(defclass C0110010 (C01100100 C01100101) ())
(defmethod f ((x C01100101) (y C01100100))
                 (format (standard-output) "call with ~A ~A~%" 'C01100101 'C01100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100100) (y C01100101))
                 (format (standard-output) "call with ~A ~A~%" 'C01100100 'C01100101)
                 (f (create (class C01100101)) (create (class C0110010))))
(defclass C01100110 () ())
(defmethod f ((x C01100110) (y C01100110)) nil)
(defclass C01100111 () ())
(defmethod f ((x C01100111) (y C01100111)) nil)
(defclass C0110011 (C01100110 C01100111) ())
(defmethod f ((x C01100111) (y C01100110))
                 (format (standard-output) "call with ~A ~A~%" 'C01100111 'C01100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100110) (y C01100111))
                 (format (standard-output) "call with ~A ~A~%" 'C01100110 'C01100111)
                 (f (create (class C01100111)) (create (class C0110011))))
(defclass C011001 (C0110010 C0110011) ())
(defmethod f ((x C0110011) (y C0110010))
                 (format (standard-output) "call with ~A ~A~%" 'C0110011 'C0110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110010) (y C0110011))
                 (format (standard-output) "call with ~A ~A~%" 'C0110010 'C0110011)
                 (f (create (class C0110011)) (create (class C011001))))
(defclass C01100 (C011000 C011001) ())
(defmethod f ((x C011001) (y C011000))
                 (format (standard-output) "call with ~A ~A~%" 'C011001 'C011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000) (y C011001))
                 (format (standard-output) "call with ~A ~A~%" 'C011000 'C011001)
                 (f (create (class C011001)) (create (class C01100))))
(defclass C01101000 () ())
(defmethod f ((x C01101000) (y C01101000)) nil)
(defclass C01101001 () ())
(defmethod f ((x C01101001) (y C01101001)) nil)
(defclass C0110100 (C01101000 C01101001) ())
(defmethod f ((x C01101001) (y C01101000))
                 (format (standard-output) "call with ~A ~A~%" 'C01101001 'C01101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101000) (y C01101001))
                 (format (standard-output) "call with ~A ~A~%" 'C01101000 'C01101001)
                 (f (create (class C01101001)) (create (class C0110100))))
(defclass C01101010 () ())
(defmethod f ((x C01101010) (y C01101010)) nil)
(defclass C01101011 () ())
(defmethod f ((x C01101011) (y C01101011)) nil)
(defclass C0110101 (C01101010 C01101011) ())
(defmethod f ((x C01101011) (y C01101010))
                 (format (standard-output) "call with ~A ~A~%" 'C01101011 'C01101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101010) (y C01101011))
                 (format (standard-output) "call with ~A ~A~%" 'C01101010 'C01101011)
                 (f (create (class C01101011)) (create (class C0110101))))
(defclass C011010 (C0110100 C0110101) ())
(defmethod f ((x C0110101) (y C0110100))
                 (format (standard-output) "call with ~A ~A~%" 'C0110101 'C0110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110100) (y C0110101))
                 (format (standard-output) "call with ~A ~A~%" 'C0110100 'C0110101)
                 (f (create (class C0110101)) (create (class C011010))))
(defclass C01101100 () ())
(defmethod f ((x C01101100) (y C01101100)) nil)
(defclass C01101101 () ())
(defmethod f ((x C01101101) (y C01101101)) nil)
(defclass C0110110 (C01101100 C01101101) ())
(defmethod f ((x C01101101) (y C01101100))
                 (format (standard-output) "call with ~A ~A~%" 'C01101101 'C01101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101100) (y C01101101))
                 (format (standard-output) "call with ~A ~A~%" 'C01101100 'C01101101)
                 (f (create (class C01101101)) (create (class C0110110))))
(defclass C01101110 () ())
(defmethod f ((x C01101110) (y C01101110)) nil)
(defclass C01101111 () ())
(defmethod f ((x C01101111) (y C01101111)) nil)
(defclass C0110111 (C01101110 C01101111) ())
(defmethod f ((x C01101111) (y C01101110))
                 (format (standard-output) "call with ~A ~A~%" 'C01101111 'C01101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101110) (y C01101111))
                 (format (standard-output) "call with ~A ~A~%" 'C01101110 'C01101111)
                 (f (create (class C01101111)) (create (class C0110111))))
(defclass C011011 (C0110110 C0110111) ())
(defmethod f ((x C0110111) (y C0110110))
                 (format (standard-output) "call with ~A ~A~%" 'C0110111 'C0110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110110) (y C0110111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110110 'C0110111)
                 (f (create (class C0110111)) (create (class C011011))))
(defclass C01101 (C011010 C011011) ())
(defmethod f ((x C011011) (y C011010))
                 (format (standard-output) "call with ~A ~A~%" 'C011011 'C011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010) (y C011011))
                 (format (standard-output) "call with ~A ~A~%" 'C011010 'C011011)
                 (f (create (class C011011)) (create (class C01101))))
(defclass C0110 (C01100 C01101) ())
(defmethod f ((x C01101) (y C01100))
                 (format (standard-output) "call with ~A ~A~%" 'C01101 'C01100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100) (y C01101))
                 (format (standard-output) "call with ~A ~A~%" 'C01100 'C01101)
                 (f (create (class C01101)) (create (class C0110))))
(defclass C01110000 () ())
(defmethod f ((x C01110000) (y C01110000)) nil)
(defclass C01110001 () ())
(defmethod f ((x C01110001) (y C01110001)) nil)
(defclass C0111000 (C01110000 C01110001) ())
(defmethod f ((x C01110001) (y C01110000))
                 (format (standard-output) "call with ~A ~A~%" 'C01110001 'C01110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110000) (y C01110001))
                 (format (standard-output) "call with ~A ~A~%" 'C01110000 'C01110001)
                 (f (create (class C01110001)) (create (class C0111000))))
(defclass C01110010 () ())
(defmethod f ((x C01110010) (y C01110010)) nil)
(defclass C01110011 () ())
(defmethod f ((x C01110011) (y C01110011)) nil)
(defclass C0111001 (C01110010 C01110011) ())
(defmethod f ((x C01110011) (y C01110010))
                 (format (standard-output) "call with ~A ~A~%" 'C01110011 'C01110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110010) (y C01110011))
                 (format (standard-output) "call with ~A ~A~%" 'C01110010 'C01110011)
                 (f (create (class C01110011)) (create (class C0111001))))
(defclass C011100 (C0111000 C0111001) ())
(defmethod f ((x C0111001) (y C0111000))
                 (format (standard-output) "call with ~A ~A~%" 'C0111001 'C0111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111000) (y C0111001))
                 (format (standard-output) "call with ~A ~A~%" 'C0111000 'C0111001)
                 (f (create (class C0111001)) (create (class C011100))))
(defclass C01110100 () ())
(defmethod f ((x C01110100) (y C01110100)) nil)
(defclass C01110101 () ())
(defmethod f ((x C01110101) (y C01110101)) nil)
(defclass C0111010 (C01110100 C01110101) ())
(defmethod f ((x C01110101) (y C01110100))
                 (format (standard-output) "call with ~A ~A~%" 'C01110101 'C01110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110100) (y C01110101))
                 (format (standard-output) "call with ~A ~A~%" 'C01110100 'C01110101)
                 (f (create (class C01110101)) (create (class C0111010))))
(defclass C01110110 () ())
(defmethod f ((x C01110110) (y C01110110)) nil)
(defclass C01110111 () ())
(defmethod f ((x C01110111) (y C01110111)) nil)
(defclass C0111011 (C01110110 C01110111) ())
(defmethod f ((x C01110111) (y C01110110))
                 (format (standard-output) "call with ~A ~A~%" 'C01110111 'C01110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110110) (y C01110111))
                 (format (standard-output) "call with ~A ~A~%" 'C01110110 'C01110111)
                 (f (create (class C01110111)) (create (class C0111011))))
(defclass C011101 (C0111010 C0111011) ())
(defmethod f ((x C0111011) (y C0111010))
                 (format (standard-output) "call with ~A ~A~%" 'C0111011 'C0111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111010) (y C0111011))
                 (format (standard-output) "call with ~A ~A~%" 'C0111010 'C0111011)
                 (f (create (class C0111011)) (create (class C011101))))
(defclass C01110 (C011100 C011101) ())
(defmethod f ((x C011101) (y C011100))
                 (format (standard-output) "call with ~A ~A~%" 'C011101 'C011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100) (y C011101))
                 (format (standard-output) "call with ~A ~A~%" 'C011100 'C011101)
                 (f (create (class C011101)) (create (class C01110))))
(defclass C01111000 () ())
(defmethod f ((x C01111000) (y C01111000)) nil)
(defclass C01111001 () ())
(defmethod f ((x C01111001) (y C01111001)) nil)
(defclass C0111100 (C01111000 C01111001) ())
(defmethod f ((x C01111001) (y C01111000))
                 (format (standard-output) "call with ~A ~A~%" 'C01111001 'C01111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111000) (y C01111001))
                 (format (standard-output) "call with ~A ~A~%" 'C01111000 'C01111001)
                 (f (create (class C01111001)) (create (class C0111100))))
(defclass C01111010 () ())
(defmethod f ((x C01111010) (y C01111010)) nil)
(defclass C01111011 () ())
(defmethod f ((x C01111011) (y C01111011)) nil)
(defclass C0111101 (C01111010 C01111011) ())
(defmethod f ((x C01111011) (y C01111010))
                 (format (standard-output) "call with ~A ~A~%" 'C01111011 'C01111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111010) (y C01111011))
                 (format (standard-output) "call with ~A ~A~%" 'C01111010 'C01111011)
                 (f (create (class C01111011)) (create (class C0111101))))
(defclass C011110 (C0111100 C0111101) ())
(defmethod f ((x C0111101) (y C0111100))
                 (format (standard-output) "call with ~A ~A~%" 'C0111101 'C0111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111100) (y C0111101))
                 (format (standard-output) "call with ~A ~A~%" 'C0111100 'C0111101)
                 (f (create (class C0111101)) (create (class C011110))))
(defclass C01111100 () ())
(defmethod f ((x C01111100) (y C01111100)) nil)
(defclass C01111101 () ())
(defmethod f ((x C01111101) (y C01111101)) nil)
(defclass C0111110 (C01111100 C01111101) ())
(defmethod f ((x C01111101) (y C01111100))
                 (format (standard-output) "call with ~A ~A~%" 'C01111101 'C01111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111100) (y C01111101))
                 (format (standard-output) "call with ~A ~A~%" 'C01111100 'C01111101)
                 (f (create (class C01111101)) (create (class C0111110))))
(defclass C01111110 () ())
(defmethod f ((x C01111110) (y C01111110)) nil)
(defclass C01111111 () ())
(defmethod f ((x C01111111) (y C01111111)) nil)
(defclass C0111111 (C01111110 C01111111) ())
(defmethod f ((x C01111111) (y C01111110))
                 (format (standard-output) "call with ~A ~A~%" 'C01111111 'C01111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111110) (y C01111111))
                 (format (standard-output) "call with ~A ~A~%" 'C01111110 'C01111111)
                 (f (create (class C01111111)) (create (class C0111111))))
(defclass C011111 (C0111110 C0111111) ())
(defmethod f ((x C0111111) (y C0111110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111111 'C0111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111110) (y C0111111))
                 (format (standard-output) "call with ~A ~A~%" 'C0111110 'C0111111)
                 (f (create (class C0111111)) (create (class C011111))))
(defclass C01111 (C011110 C011111) ())
(defmethod f ((x C011111) (y C011110))
                 (format (standard-output) "call with ~A ~A~%" 'C011111 'C011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110) (y C011111))
                 (format (standard-output) "call with ~A ~A~%" 'C011110 'C011111)
                 (f (create (class C011111)) (create (class C01111))))
(defclass C0111 (C01110 C01111) ())
(defmethod f ((x C01111) (y C01110))
                 (format (standard-output) "call with ~A ~A~%" 'C01111 'C01110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110) (y C01111))
                 (format (standard-output) "call with ~A ~A~%" 'C01110 'C01111)
                 (f (create (class C01111)) (create (class C0111))))
(defclass C011 (C0110 C0111) ())
(defmethod f ((x C0111) (y C0110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111 'C0110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110) (y C0111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110 'C0111)
                 (f (create (class C0111)) (create (class C011))))
(defclass C01 (C010 C011) ())
(defmethod f ((x C011) (y C010))
                 (format (standard-output) "call with ~A ~A~%" 'C011 'C010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010) (y C011))
                 (format (standard-output) "call with ~A ~A~%" 'C010 'C011)
                 (f (create (class C011)) (create (class C01))))
(defclass C0 (C00 C01) ())
(defmethod f ((x C01) (y C00))
                 (format (standard-output) "call with ~A ~A~%" 'C01 'C00)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00) (y C01))
                 (format (standard-output) "call with ~A ~A~%" 'C00 'C01)
                 (f (create (class C01)) (create (class C0))))
(defclass C10000000 () ())
(defmethod f ((x C10000000) (y C10000000)) nil)
(defclass C10000001 () ())
(defmethod f ((x C10000001) (y C10000001)) nil)
(defclass C1000000 (C10000000 C10000001) ())
(defmethod f ((x C10000001) (y C10000000))
                 (format (standard-output) "call with ~A ~A~%" 'C10000001 'C10000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000000) (y C10000001))
                 (format (standard-output) "call with ~A ~A~%" 'C10000000 'C10000001)
                 (f (create (class C10000001)) (create (class C1000000))))
(defclass C10000010 () ())
(defmethod f ((x C10000010) (y C10000010)) nil)
(defclass C10000011 () ())
(defmethod f ((x C10000011) (y C10000011)) nil)
(defclass C1000001 (C10000010 C10000011) ())
(defmethod f ((x C10000011) (y C10000010))
                 (format (standard-output) "call with ~A ~A~%" 'C10000011 'C10000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000010) (y C10000011))
                 (format (standard-output) "call with ~A ~A~%" 'C10000010 'C10000011)
                 (f (create (class C10000011)) (create (class C1000001))))
(defclass C100000 (C1000000 C1000001) ())
(defmethod f ((x C1000001) (y C1000000))
                 (format (standard-output) "call with ~A ~A~%" 'C1000001 'C1000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000000) (y C1000001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000000 'C1000001)
                 (f (create (class C1000001)) (create (class C100000))))
(defclass C10000100 () ())
(defmethod f ((x C10000100) (y C10000100)) nil)
(defclass C10000101 () ())
(defmethod f ((x C10000101) (y C10000101)) nil)
(defclass C1000010 (C10000100 C10000101) ())
(defmethod f ((x C10000101) (y C10000100))
                 (format (standard-output) "call with ~A ~A~%" 'C10000101 'C10000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000100) (y C10000101))
                 (format (standard-output) "call with ~A ~A~%" 'C10000100 'C10000101)
                 (f (create (class C10000101)) (create (class C1000010))))
(defclass C10000110 () ())
(defmethod f ((x C10000110) (y C10000110)) nil)
(defclass C10000111 () ())
(defmethod f ((x C10000111) (y C10000111)) nil)
(defclass C1000011 (C10000110 C10000111) ())
(defmethod f ((x C10000111) (y C10000110))
                 (format (standard-output) "call with ~A ~A~%" 'C10000111 'C10000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000110) (y C10000111))
                 (format (standard-output) "call with ~A ~A~%" 'C10000110 'C10000111)
                 (f (create (class C10000111)) (create (class C1000011))))
(defclass C100001 (C1000010 C1000011) ())
(defmethod f ((x C1000011) (y C1000010))
                 (format (standard-output) "call with ~A ~A~%" 'C1000011 'C1000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000010) (y C1000011))
                 (format (standard-output) "call with ~A ~A~%" 'C1000010 'C1000011)
                 (f (create (class C1000011)) (create (class C100001))))
(defclass C10000 (C100000 C100001) ())
(defmethod f ((x C100001) (y C100000))
                 (format (standard-output) "call with ~A ~A~%" 'C100001 'C100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000) (y C100001))
                 (format (standard-output) "call with ~A ~A~%" 'C100000 'C100001)
                 (f (create (class C100001)) (create (class C10000))))
(defclass C10001000 () ())
(defmethod f ((x C10001000) (y C10001000)) nil)
(defclass C10001001 () ())
(defmethod f ((x C10001001) (y C10001001)) nil)
(defclass C1000100 (C10001000 C10001001) ())
(defmethod f ((x C10001001) (y C10001000))
                 (format (standard-output) "call with ~A ~A~%" 'C10001001 'C10001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001000) (y C10001001))
                 (format (standard-output) "call with ~A ~A~%" 'C10001000 'C10001001)
                 (f (create (class C10001001)) (create (class C1000100))))
(defclass C10001010 () ())
(defmethod f ((x C10001010) (y C10001010)) nil)
(defclass C10001011 () ())
(defmethod f ((x C10001011) (y C10001011)) nil)
(defclass C1000101 (C10001010 C10001011) ())
(defmethod f ((x C10001011) (y C10001010))
                 (format (standard-output) "call with ~A ~A~%" 'C10001011 'C10001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001010) (y C10001011))
                 (format (standard-output) "call with ~A ~A~%" 'C10001010 'C10001011)
                 (f (create (class C10001011)) (create (class C1000101))))
(defclass C100010 (C1000100 C1000101) ())
(defmethod f ((x C1000101) (y C1000100))
                 (format (standard-output) "call with ~A ~A~%" 'C1000101 'C1000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000100) (y C1000101))
                 (format (standard-output) "call with ~A ~A~%" 'C1000100 'C1000101)
                 (f (create (class C1000101)) (create (class C100010))))
(defclass C10001100 () ())
(defmethod f ((x C10001100) (y C10001100)) nil)
(defclass C10001101 () ())
(defmethod f ((x C10001101) (y C10001101)) nil)
(defclass C1000110 (C10001100 C10001101) ())
(defmethod f ((x C10001101) (y C10001100))
                 (format (standard-output) "call with ~A ~A~%" 'C10001101 'C10001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001100) (y C10001101))
                 (format (standard-output) "call with ~A ~A~%" 'C10001100 'C10001101)
                 (f (create (class C10001101)) (create (class C1000110))))
(defclass C10001110 () ())
(defmethod f ((x C10001110) (y C10001110)) nil)
(defclass C10001111 () ())
(defmethod f ((x C10001111) (y C10001111)) nil)
(defclass C1000111 (C10001110 C10001111) ())
(defmethod f ((x C10001111) (y C10001110))
                 (format (standard-output) "call with ~A ~A~%" 'C10001111 'C10001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001110) (y C10001111))
                 (format (standard-output) "call with ~A ~A~%" 'C10001110 'C10001111)
                 (f (create (class C10001111)) (create (class C1000111))))
(defclass C100011 (C1000110 C1000111) ())
(defmethod f ((x C1000111) (y C1000110))
                 (format (standard-output) "call with ~A ~A~%" 'C1000111 'C1000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000110) (y C1000111))
                 (format (standard-output) "call with ~A ~A~%" 'C1000110 'C1000111)
                 (f (create (class C1000111)) (create (class C100011))))
(defclass C10001 (C100010 C100011) ())
(defmethod f ((x C100011) (y C100010))
                 (format (standard-output) "call with ~A ~A~%" 'C100011 'C100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010) (y C100011))
                 (format (standard-output) "call with ~A ~A~%" 'C100010 'C100011)
                 (f (create (class C100011)) (create (class C10001))))
(defclass C1000 (C10000 C10001) ())
(defmethod f ((x C10001) (y C10000))
                 (format (standard-output) "call with ~A ~A~%" 'C10001 'C10000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000) (y C10001))
                 (format (standard-output) "call with ~A ~A~%" 'C10000 'C10001)
                 (f (create (class C10001)) (create (class C1000))))
(defclass C10010000 () ())
(defmethod f ((x C10010000) (y C10010000)) nil)
(defclass C10010001 () ())
(defmethod f ((x C10010001) (y C10010001)) nil)
(defclass C1001000 (C10010000 C10010001) ())
(defmethod f ((x C10010001) (y C10010000))
                 (format (standard-output) "call with ~A ~A~%" 'C10010001 'C10010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010000) (y C10010001))
                 (format (standard-output) "call with ~A ~A~%" 'C10010000 'C10010001)
                 (f (create (class C10010001)) (create (class C1001000))))
(defclass C10010010 () ())
(defmethod f ((x C10010010) (y C10010010)) nil)
(defclass C10010011 () ())
(defmethod f ((x C10010011) (y C10010011)) nil)
(defclass C1001001 (C10010010 C10010011) ())
(defmethod f ((x C10010011) (y C10010010))
                 (format (standard-output) "call with ~A ~A~%" 'C10010011 'C10010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010010) (y C10010011))
                 (format (standard-output) "call with ~A ~A~%" 'C10010010 'C10010011)
                 (f (create (class C10010011)) (create (class C1001001))))
(defclass C100100 (C1001000 C1001001) ())
(defmethod f ((x C1001001) (y C1001000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001001 'C1001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001000) (y C1001001))
                 (format (standard-output) "call with ~A ~A~%" 'C1001000 'C1001001)
                 (f (create (class C1001001)) (create (class C100100))))
(defclass C10010100 () ())
(defmethod f ((x C10010100) (y C10010100)) nil)
(defclass C10010101 () ())
(defmethod f ((x C10010101) (y C10010101)) nil)
(defclass C1001010 (C10010100 C10010101) ())
(defmethod f ((x C10010101) (y C10010100))
                 (format (standard-output) "call with ~A ~A~%" 'C10010101 'C10010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010100) (y C10010101))
                 (format (standard-output) "call with ~A ~A~%" 'C10010100 'C10010101)
                 (f (create (class C10010101)) (create (class C1001010))))
(defclass C10010110 () ())
(defmethod f ((x C10010110) (y C10010110)) nil)
(defclass C10010111 () ())
(defmethod f ((x C10010111) (y C10010111)) nil)
(defclass C1001011 (C10010110 C10010111) ())
(defmethod f ((x C10010111) (y C10010110))
                 (format (standard-output) "call with ~A ~A~%" 'C10010111 'C10010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010110) (y C10010111))
                 (format (standard-output) "call with ~A ~A~%" 'C10010110 'C10010111)
                 (f (create (class C10010111)) (create (class C1001011))))
(defclass C100101 (C1001010 C1001011) ())
(defmethod f ((x C1001011) (y C1001010))
                 (format (standard-output) "call with ~A ~A~%" 'C1001011 'C1001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001010) (y C1001011))
                 (format (standard-output) "call with ~A ~A~%" 'C1001010 'C1001011)
                 (f (create (class C1001011)) (create (class C100101))))
(defclass C10010 (C100100 C100101) ())
(defmethod f ((x C100101) (y C100100))
                 (format (standard-output) "call with ~A ~A~%" 'C100101 'C100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100) (y C100101))
                 (format (standard-output) "call with ~A ~A~%" 'C100100 'C100101)
                 (f (create (class C100101)) (create (class C10010))))
(defclass C10011000 () ())
(defmethod f ((x C10011000) (y C10011000)) nil)
(defclass C10011001 () ())
(defmethod f ((x C10011001) (y C10011001)) nil)
(defclass C1001100 (C10011000 C10011001) ())
(defmethod f ((x C10011001) (y C10011000))
                 (format (standard-output) "call with ~A ~A~%" 'C10011001 'C10011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011000) (y C10011001))
                 (format (standard-output) "call with ~A ~A~%" 'C10011000 'C10011001)
                 (f (create (class C10011001)) (create (class C1001100))))
(defclass C10011010 () ())
(defmethod f ((x C10011010) (y C10011010)) nil)
(defclass C10011011 () ())
(defmethod f ((x C10011011) (y C10011011)) nil)
(defclass C1001101 (C10011010 C10011011) ())
(defmethod f ((x C10011011) (y C10011010))
                 (format (standard-output) "call with ~A ~A~%" 'C10011011 'C10011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011010) (y C10011011))
                 (format (standard-output) "call with ~A ~A~%" 'C10011010 'C10011011)
                 (f (create (class C10011011)) (create (class C1001101))))
(defclass C100110 (C1001100 C1001101) ())
(defmethod f ((x C1001101) (y C1001100))
                 (format (standard-output) "call with ~A ~A~%" 'C1001101 'C1001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001100) (y C1001101))
                 (format (standard-output) "call with ~A ~A~%" 'C1001100 'C1001101)
                 (f (create (class C1001101)) (create (class C100110))))
(defclass C10011100 () ())
(defmethod f ((x C10011100) (y C10011100)) nil)
(defclass C10011101 () ())
(defmethod f ((x C10011101) (y C10011101)) nil)
(defclass C1001110 (C10011100 C10011101) ())
(defmethod f ((x C10011101) (y C10011100))
                 (format (standard-output) "call with ~A ~A~%" 'C10011101 'C10011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011100) (y C10011101))
                 (format (standard-output) "call with ~A ~A~%" 'C10011100 'C10011101)
                 (f (create (class C10011101)) (create (class C1001110))))
(defclass C10011110 () ())
(defmethod f ((x C10011110) (y C10011110)) nil)
(defclass C10011111 () ())
(defmethod f ((x C10011111) (y C10011111)) nil)
(defclass C1001111 (C10011110 C10011111) ())
(defmethod f ((x C10011111) (y C10011110))
                 (format (standard-output) "call with ~A ~A~%" 'C10011111 'C10011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011110) (y C10011111))
                 (format (standard-output) "call with ~A ~A~%" 'C10011110 'C10011111)
                 (f (create (class C10011111)) (create (class C1001111))))
(defclass C100111 (C1001110 C1001111) ())
(defmethod f ((x C1001111) (y C1001110))
                 (format (standard-output) "call with ~A ~A~%" 'C1001111 'C1001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001110) (y C1001111))
                 (format (standard-output) "call with ~A ~A~%" 'C1001110 'C1001111)
                 (f (create (class C1001111)) (create (class C100111))))
(defclass C10011 (C100110 C100111) ())
(defmethod f ((x C100111) (y C100110))
                 (format (standard-output) "call with ~A ~A~%" 'C100111 'C100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110) (y C100111))
                 (format (standard-output) "call with ~A ~A~%" 'C100110 'C100111)
                 (f (create (class C100111)) (create (class C10011))))
(defclass C1001 (C10010 C10011) ())
(defmethod f ((x C10011) (y C10010))
                 (format (standard-output) "call with ~A ~A~%" 'C10011 'C10010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010) (y C10011))
                 (format (standard-output) "call with ~A ~A~%" 'C10010 'C10011)
                 (f (create (class C10011)) (create (class C1001))))
(defclass C100 (C1000 C1001) ())
(defmethod f ((x C1001) (y C1000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001 'C1000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000) (y C1001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000 'C1001)
                 (f (create (class C1001)) (create (class C100))))
(defclass C10100000 () ())
(defmethod f ((x C10100000) (y C10100000)) nil)
(defclass C10100001 () ())
(defmethod f ((x C10100001) (y C10100001)) nil)
(defclass C1010000 (C10100000 C10100001) ())
(defmethod f ((x C10100001) (y C10100000))
                 (format (standard-output) "call with ~A ~A~%" 'C10100001 'C10100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100000) (y C10100001))
                 (format (standard-output) "call with ~A ~A~%" 'C10100000 'C10100001)
                 (f (create (class C10100001)) (create (class C1010000))))
(defclass C10100010 () ())
(defmethod f ((x C10100010) (y C10100010)) nil)
(defclass C10100011 () ())
(defmethod f ((x C10100011) (y C10100011)) nil)
(defclass C1010001 (C10100010 C10100011) ())
(defmethod f ((x C10100011) (y C10100010))
                 (format (standard-output) "call with ~A ~A~%" 'C10100011 'C10100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100010) (y C10100011))
                 (format (standard-output) "call with ~A ~A~%" 'C10100010 'C10100011)
                 (f (create (class C10100011)) (create (class C1010001))))
(defclass C101000 (C1010000 C1010001) ())
(defmethod f ((x C1010001) (y C1010000))
                 (format (standard-output) "call with ~A ~A~%" 'C1010001 'C1010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010000) (y C1010001))
                 (format (standard-output) "call with ~A ~A~%" 'C1010000 'C1010001)
                 (f (create (class C1010001)) (create (class C101000))))
(defclass C10100100 () ())
(defmethod f ((x C10100100) (y C10100100)) nil)
(defclass C10100101 () ())
(defmethod f ((x C10100101) (y C10100101)) nil)
(defclass C1010010 (C10100100 C10100101) ())
(defmethod f ((x C10100101) (y C10100100))
                 (format (standard-output) "call with ~A ~A~%" 'C10100101 'C10100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100100) (y C10100101))
                 (format (standard-output) "call with ~A ~A~%" 'C10100100 'C10100101)
                 (f (create (class C10100101)) (create (class C1010010))))
(defclass C10100110 () ())
(defmethod f ((x C10100110) (y C10100110)) nil)
(defclass C10100111 () ())
(defmethod f ((x C10100111) (y C10100111)) nil)
(defclass C1010011 (C10100110 C10100111) ())
(defmethod f ((x C10100111) (y C10100110))
                 (format (standard-output) "call with ~A ~A~%" 'C10100111 'C10100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100110) (y C10100111))
                 (format (standard-output) "call with ~A ~A~%" 'C10100110 'C10100111)
                 (f (create (class C10100111)) (create (class C1010011))))
(defclass C101001 (C1010010 C1010011) ())
(defmethod f ((x C1010011) (y C1010010))
                 (format (standard-output) "call with ~A ~A~%" 'C1010011 'C1010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010010) (y C1010011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010010 'C1010011)
                 (f (create (class C1010011)) (create (class C101001))))
(defclass C10100 (C101000 C101001) ())
(defmethod f ((x C101001) (y C101000))
                 (format (standard-output) "call with ~A ~A~%" 'C101001 'C101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000) (y C101001))
                 (format (standard-output) "call with ~A ~A~%" 'C101000 'C101001)
                 (f (create (class C101001)) (create (class C10100))))
(defclass C10101000 () ())
(defmethod f ((x C10101000) (y C10101000)) nil)
(defclass C10101001 () ())
(defmethod f ((x C10101001) (y C10101001)) nil)
(defclass C1010100 (C10101000 C10101001) ())
(defmethod f ((x C10101001) (y C10101000))
                 (format (standard-output) "call with ~A ~A~%" 'C10101001 'C10101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101000) (y C10101001))
                 (format (standard-output) "call with ~A ~A~%" 'C10101000 'C10101001)
                 (f (create (class C10101001)) (create (class C1010100))))
(defclass C10101010 () ())
(defmethod f ((x C10101010) (y C10101010)) nil)
(defclass C10101011 () ())
(defmethod f ((x C10101011) (y C10101011)) nil)
(defclass C1010101 (C10101010 C10101011) ())
(defmethod f ((x C10101011) (y C10101010))
                 (format (standard-output) "call with ~A ~A~%" 'C10101011 'C10101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101010) (y C10101011))
                 (format (standard-output) "call with ~A ~A~%" 'C10101010 'C10101011)
                 (f (create (class C10101011)) (create (class C1010101))))
(defclass C101010 (C1010100 C1010101) ())
(defmethod f ((x C1010101) (y C1010100))
                 (format (standard-output) "call with ~A ~A~%" 'C1010101 'C1010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010100) (y C1010101))
                 (format (standard-output) "call with ~A ~A~%" 'C1010100 'C1010101)
                 (f (create (class C1010101)) (create (class C101010))))
(defclass C10101100 () ())
(defmethod f ((x C10101100) (y C10101100)) nil)
(defclass C10101101 () ())
(defmethod f ((x C10101101) (y C10101101)) nil)
(defclass C1010110 (C10101100 C10101101) ())
(defmethod f ((x C10101101) (y C10101100))
                 (format (standard-output) "call with ~A ~A~%" 'C10101101 'C10101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101100) (y C10101101))
                 (format (standard-output) "call with ~A ~A~%" 'C10101100 'C10101101)
                 (f (create (class C10101101)) (create (class C1010110))))
(defclass C10101110 () ())
(defmethod f ((x C10101110) (y C10101110)) nil)
(defclass C10101111 () ())
(defmethod f ((x C10101111) (y C10101111)) nil)
(defclass C1010111 (C10101110 C10101111) ())
(defmethod f ((x C10101111) (y C10101110))
                 (format (standard-output) "call with ~A ~A~%" 'C10101111 'C10101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101110) (y C10101111))
                 (format (standard-output) "call with ~A ~A~%" 'C10101110 'C10101111)
                 (f (create (class C10101111)) (create (class C1010111))))
(defclass C101011 (C1010110 C1010111) ())
(defmethod f ((x C1010111) (y C1010110))
                 (format (standard-output) "call with ~A ~A~%" 'C1010111 'C1010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010110) (y C1010111))
                 (format (standard-output) "call with ~A ~A~%" 'C1010110 'C1010111)
                 (f (create (class C1010111)) (create (class C101011))))
(defclass C10101 (C101010 C101011) ())
(defmethod f ((x C101011) (y C101010))
                 (format (standard-output) "call with ~A ~A~%" 'C101011 'C101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010) (y C101011))
                 (format (standard-output) "call with ~A ~A~%" 'C101010 'C101011)
                 (f (create (class C101011)) (create (class C10101))))
(defclass C1010 (C10100 C10101) ())
(defmethod f ((x C10101) (y C10100))
                 (format (standard-output) "call with ~A ~A~%" 'C10101 'C10100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100) (y C10101))
                 (format (standard-output) "call with ~A ~A~%" 'C10100 'C10101)
                 (f (create (class C10101)) (create (class C1010))))
(defclass C10110000 () ())
(defmethod f ((x C10110000) (y C10110000)) nil)
(defclass C10110001 () ())
(defmethod f ((x C10110001) (y C10110001)) nil)
(defclass C1011000 (C10110000 C10110001) ())
(defmethod f ((x C10110001) (y C10110000))
                 (format (standard-output) "call with ~A ~A~%" 'C10110001 'C10110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110000) (y C10110001))
                 (format (standard-output) "call with ~A ~A~%" 'C10110000 'C10110001)
                 (f (create (class C10110001)) (create (class C1011000))))
(defclass C10110010 () ())
(defmethod f ((x C10110010) (y C10110010)) nil)
(defclass C10110011 () ())
(defmethod f ((x C10110011) (y C10110011)) nil)
(defclass C1011001 (C10110010 C10110011) ())
(defmethod f ((x C10110011) (y C10110010))
                 (format (standard-output) "call with ~A ~A~%" 'C10110011 'C10110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110010) (y C10110011))
                 (format (standard-output) "call with ~A ~A~%" 'C10110010 'C10110011)
                 (f (create (class C10110011)) (create (class C1011001))))
(defclass C101100 (C1011000 C1011001) ())
(defmethod f ((x C1011001) (y C1011000))
                 (format (standard-output) "call with ~A ~A~%" 'C1011001 'C1011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011000) (y C1011001))
                 (format (standard-output) "call with ~A ~A~%" 'C1011000 'C1011001)
                 (f (create (class C1011001)) (create (class C101100))))
(defclass C10110100 () ())
(defmethod f ((x C10110100) (y C10110100)) nil)
(defclass C10110101 () ())
(defmethod f ((x C10110101) (y C10110101)) nil)
(defclass C1011010 (C10110100 C10110101) ())
(defmethod f ((x C10110101) (y C10110100))
                 (format (standard-output) "call with ~A ~A~%" 'C10110101 'C10110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110100) (y C10110101))
                 (format (standard-output) "call with ~A ~A~%" 'C10110100 'C10110101)
                 (f (create (class C10110101)) (create (class C1011010))))
(defclass C10110110 () ())
(defmethod f ((x C10110110) (y C10110110)) nil)
(defclass C10110111 () ())
(defmethod f ((x C10110111) (y C10110111)) nil)
(defclass C1011011 (C10110110 C10110111) ())
(defmethod f ((x C10110111) (y C10110110))
                 (format (standard-output) "call with ~A ~A~%" 'C10110111 'C10110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110110) (y C10110111))
                 (format (standard-output) "call with ~A ~A~%" 'C10110110 'C10110111)
                 (f (create (class C10110111)) (create (class C1011011))))
(defclass C101101 (C1011010 C1011011) ())
(defmethod f ((x C1011011) (y C1011010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011011 'C1011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011010) (y C1011011))
                 (format (standard-output) "call with ~A ~A~%" 'C1011010 'C1011011)
                 (f (create (class C1011011)) (create (class C101101))))
(defclass C10110 (C101100 C101101) ())
(defmethod f ((x C101101) (y C101100))
                 (format (standard-output) "call with ~A ~A~%" 'C101101 'C101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100) (y C101101))
                 (format (standard-output) "call with ~A ~A~%" 'C101100 'C101101)
                 (f (create (class C101101)) (create (class C10110))))
(defclass C10111000 () ())
(defmethod f ((x C10111000) (y C10111000)) nil)
(defclass C10111001 () ())
(defmethod f ((x C10111001) (y C10111001)) nil)
(defclass C1011100 (C10111000 C10111001) ())
(defmethod f ((x C10111001) (y C10111000))
                 (format (standard-output) "call with ~A ~A~%" 'C10111001 'C10111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111000) (y C10111001))
                 (format (standard-output) "call with ~A ~A~%" 'C10111000 'C10111001)
                 (f (create (class C10111001)) (create (class C1011100))))
(defclass C10111010 () ())
(defmethod f ((x C10111010) (y C10111010)) nil)
(defclass C10111011 () ())
(defmethod f ((x C10111011) (y C10111011)) nil)
(defclass C1011101 (C10111010 C10111011) ())
(defmethod f ((x C10111011) (y C10111010))
                 (format (standard-output) "call with ~A ~A~%" 'C10111011 'C10111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111010) (y C10111011))
                 (format (standard-output) "call with ~A ~A~%" 'C10111010 'C10111011)
                 (f (create (class C10111011)) (create (class C1011101))))
(defclass C101110 (C1011100 C1011101) ())
(defmethod f ((x C1011101) (y C1011100))
                 (format (standard-output) "call with ~A ~A~%" 'C1011101 'C1011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011100) (y C1011101))
                 (format (standard-output) "call with ~A ~A~%" 'C1011100 'C1011101)
                 (f (create (class C1011101)) (create (class C101110))))
(defclass C10111100 () ())
(defmethod f ((x C10111100) (y C10111100)) nil)
(defclass C10111101 () ())
(defmethod f ((x C10111101) (y C10111101)) nil)
(defclass C1011110 (C10111100 C10111101) ())
(defmethod f ((x C10111101) (y C10111100))
                 (format (standard-output) "call with ~A ~A~%" 'C10111101 'C10111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111100) (y C10111101))
                 (format (standard-output) "call with ~A ~A~%" 'C10111100 'C10111101)
                 (f (create (class C10111101)) (create (class C1011110))))
(defclass C10111110 () ())
(defmethod f ((x C10111110) (y C10111110)) nil)
(defclass C10111111 () ())
(defmethod f ((x C10111111) (y C10111111)) nil)
(defclass C1011111 (C10111110 C10111111) ())
(defmethod f ((x C10111111) (y C10111110))
                 (format (standard-output) "call with ~A ~A~%" 'C10111111 'C10111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111110) (y C10111111))
                 (format (standard-output) "call with ~A ~A~%" 'C10111110 'C10111111)
                 (f (create (class C10111111)) (create (class C1011111))))
(defclass C101111 (C1011110 C1011111) ())
(defmethod f ((x C1011111) (y C1011110))
                 (format (standard-output) "call with ~A ~A~%" 'C1011111 'C1011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011110) (y C1011111))
                 (format (standard-output) "call with ~A ~A~%" 'C1011110 'C1011111)
                 (f (create (class C1011111)) (create (class C101111))))
(defclass C10111 (C101110 C101111) ())
(defmethod f ((x C101111) (y C101110))
                 (format (standard-output) "call with ~A ~A~%" 'C101111 'C101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110) (y C101111))
                 (format (standard-output) "call with ~A ~A~%" 'C101110 'C101111)
                 (f (create (class C101111)) (create (class C10111))))
(defclass C1011 (C10110 C10111) ())
(defmethod f ((x C10111) (y C10110))
                 (format (standard-output) "call with ~A ~A~%" 'C10111 'C10110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110) (y C10111))
                 (format (standard-output) "call with ~A ~A~%" 'C10110 'C10111)
                 (f (create (class C10111)) (create (class C1011))))
(defclass C101 (C1010 C1011) ())
(defmethod f ((x C1011) (y C1010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011 'C1010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010) (y C1011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010 'C1011)
                 (f (create (class C1011)) (create (class C101))))
(defclass C10 (C100 C101) ())
(defmethod f ((x C101) (y C100))
                 (format (standard-output) "call with ~A ~A~%" 'C101 'C100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100) (y C101))
                 (format (standard-output) "call with ~A ~A~%" 'C100 'C101)
                 (f (create (class C101)) (create (class C10))))
(defclass C11000000 () ())
(defmethod f ((x C11000000) (y C11000000)) nil)
(defclass C11000001 () ())
(defmethod f ((x C11000001) (y C11000001)) nil)
(defclass C1100000 (C11000000 C11000001) ())
(defmethod f ((x C11000001) (y C11000000))
                 (format (standard-output) "call with ~A ~A~%" 'C11000001 'C11000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000000) (y C11000001))
                 (format (standard-output) "call with ~A ~A~%" 'C11000000 'C11000001)
                 (f (create (class C11000001)) (create (class C1100000))))
(defclass C11000010 () ())
(defmethod f ((x C11000010) (y C11000010)) nil)
(defclass C11000011 () ())
(defmethod f ((x C11000011) (y C11000011)) nil)
(defclass C1100001 (C11000010 C11000011) ())
(defmethod f ((x C11000011) (y C11000010))
                 (format (standard-output) "call with ~A ~A~%" 'C11000011 'C11000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000010) (y C11000011))
                 (format (standard-output) "call with ~A ~A~%" 'C11000010 'C11000011)
                 (f (create (class C11000011)) (create (class C1100001))))
(defclass C110000 (C1100000 C1100001) ())
(defmethod f ((x C1100001) (y C1100000))
                 (format (standard-output) "call with ~A ~A~%" 'C1100001 'C1100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100000) (y C1100001))
                 (format (standard-output) "call with ~A ~A~%" 'C1100000 'C1100001)
                 (f (create (class C1100001)) (create (class C110000))))
(defclass C11000100 () ())
(defmethod f ((x C11000100) (y C11000100)) nil)
(defclass C11000101 () ())
(defmethod f ((x C11000101) (y C11000101)) nil)
(defclass C1100010 (C11000100 C11000101) ())
(defmethod f ((x C11000101) (y C11000100))
                 (format (standard-output) "call with ~A ~A~%" 'C11000101 'C11000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000100) (y C11000101))
                 (format (standard-output) "call with ~A ~A~%" 'C11000100 'C11000101)
                 (f (create (class C11000101)) (create (class C1100010))))
(defclass C11000110 () ())
(defmethod f ((x C11000110) (y C11000110)) nil)
(defclass C11000111 () ())
(defmethod f ((x C11000111) (y C11000111)) nil)
(defclass C1100011 (C11000110 C11000111) ())
(defmethod f ((x C11000111) (y C11000110))
                 (format (standard-output) "call with ~A ~A~%" 'C11000111 'C11000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000110) (y C11000111))
                 (format (standard-output) "call with ~A ~A~%" 'C11000110 'C11000111)
                 (f (create (class C11000111)) (create (class C1100011))))
(defclass C110001 (C1100010 C1100011) ())
(defmethod f ((x C1100011) (y C1100010))
                 (format (standard-output) "call with ~A ~A~%" 'C1100011 'C1100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100010) (y C1100011))
                 (format (standard-output) "call with ~A ~A~%" 'C1100010 'C1100011)
                 (f (create (class C1100011)) (create (class C110001))))
(defclass C11000 (C110000 C110001) ())
(defmethod f ((x C110001) (y C110000))
                 (format (standard-output) "call with ~A ~A~%" 'C110001 'C110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000) (y C110001))
                 (format (standard-output) "call with ~A ~A~%" 'C110000 'C110001)
                 (f (create (class C110001)) (create (class C11000))))
(defclass C11001000 () ())
(defmethod f ((x C11001000) (y C11001000)) nil)
(defclass C11001001 () ())
(defmethod f ((x C11001001) (y C11001001)) nil)
(defclass C1100100 (C11001000 C11001001) ())
(defmethod f ((x C11001001) (y C11001000))
                 (format (standard-output) "call with ~A ~A~%" 'C11001001 'C11001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001000) (y C11001001))
                 (format (standard-output) "call with ~A ~A~%" 'C11001000 'C11001001)
                 (f (create (class C11001001)) (create (class C1100100))))
(defclass C11001010 () ())
(defmethod f ((x C11001010) (y C11001010)) nil)
(defclass C11001011 () ())
(defmethod f ((x C11001011) (y C11001011)) nil)
(defclass C1100101 (C11001010 C11001011) ())
(defmethod f ((x C11001011) (y C11001010))
                 (format (standard-output) "call with ~A ~A~%" 'C11001011 'C11001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001010) (y C11001011))
                 (format (standard-output) "call with ~A ~A~%" 'C11001010 'C11001011)
                 (f (create (class C11001011)) (create (class C1100101))))
(defclass C110010 (C1100100 C1100101) ())
(defmethod f ((x C1100101) (y C1100100))
                 (format (standard-output) "call with ~A ~A~%" 'C1100101 'C1100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100100) (y C1100101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100100 'C1100101)
                 (f (create (class C1100101)) (create (class C110010))))
(defclass C11001100 () ())
(defmethod f ((x C11001100) (y C11001100)) nil)
(defclass C11001101 () ())
(defmethod f ((x C11001101) (y C11001101)) nil)
(defclass C1100110 (C11001100 C11001101) ())
(defmethod f ((x C11001101) (y C11001100))
                 (format (standard-output) "call with ~A ~A~%" 'C11001101 'C11001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001100) (y C11001101))
                 (format (standard-output) "call with ~A ~A~%" 'C11001100 'C11001101)
                 (f (create (class C11001101)) (create (class C1100110))))
(defclass C11001110 () ())
(defmethod f ((x C11001110) (y C11001110)) nil)
(defclass C11001111 () ())
(defmethod f ((x C11001111) (y C11001111)) nil)
(defclass C1100111 (C11001110 C11001111) ())
(defmethod f ((x C11001111) (y C11001110))
                 (format (standard-output) "call with ~A ~A~%" 'C11001111 'C11001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001110) (y C11001111))
                 (format (standard-output) "call with ~A ~A~%" 'C11001110 'C11001111)
                 (f (create (class C11001111)) (create (class C1100111))))
(defclass C110011 (C1100110 C1100111) ())
(defmethod f ((x C1100111) (y C1100110))
                 (format (standard-output) "call with ~A ~A~%" 'C1100111 'C1100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100110) (y C1100111))
                 (format (standard-output) "call with ~A ~A~%" 'C1100110 'C1100111)
                 (f (create (class C1100111)) (create (class C110011))))
(defclass C11001 (C110010 C110011) ())
(defmethod f ((x C110011) (y C110010))
                 (format (standard-output) "call with ~A ~A~%" 'C110011 'C110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010) (y C110011))
                 (format (standard-output) "call with ~A ~A~%" 'C110010 'C110011)
                 (f (create (class C110011)) (create (class C11001))))
(defclass C1100 (C11000 C11001) ())
(defmethod f ((x C11001) (y C11000))
                 (format (standard-output) "call with ~A ~A~%" 'C11001 'C11000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000) (y C11001))
                 (format (standard-output) "call with ~A ~A~%" 'C11000 'C11001)
                 (f (create (class C11001)) (create (class C1100))))
(defclass C11010000 () ())
(defmethod f ((x C11010000) (y C11010000)) nil)
(defclass C11010001 () ())
(defmethod f ((x C11010001) (y C11010001)) nil)
(defclass C1101000 (C11010000 C11010001) ())
(defmethod f ((x C11010001) (y C11010000))
                 (format (standard-output) "call with ~A ~A~%" 'C11010001 'C11010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010000) (y C11010001))
                 (format (standard-output) "call with ~A ~A~%" 'C11010000 'C11010001)
                 (f (create (class C11010001)) (create (class C1101000))))
(defclass C11010010 () ())
(defmethod f ((x C11010010) (y C11010010)) nil)
(defclass C11010011 () ())
(defmethod f ((x C11010011) (y C11010011)) nil)
(defclass C1101001 (C11010010 C11010011) ())
(defmethod f ((x C11010011) (y C11010010))
                 (format (standard-output) "call with ~A ~A~%" 'C11010011 'C11010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010010) (y C11010011))
                 (format (standard-output) "call with ~A ~A~%" 'C11010010 'C11010011)
                 (f (create (class C11010011)) (create (class C1101001))))
(defclass C110100 (C1101000 C1101001) ())
(defmethod f ((x C1101001) (y C1101000))
                 (format (standard-output) "call with ~A ~A~%" 'C1101001 'C1101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101000) (y C1101001))
                 (format (standard-output) "call with ~A ~A~%" 'C1101000 'C1101001)
                 (f (create (class C1101001)) (create (class C110100))))
(defclass C11010100 () ())
(defmethod f ((x C11010100) (y C11010100)) nil)
(defclass C11010101 () ())
(defmethod f ((x C11010101) (y C11010101)) nil)
(defclass C1101010 (C11010100 C11010101) ())
(defmethod f ((x C11010101) (y C11010100))
                 (format (standard-output) "call with ~A ~A~%" 'C11010101 'C11010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010100) (y C11010101))
                 (format (standard-output) "call with ~A ~A~%" 'C11010100 'C11010101)
                 (f (create (class C11010101)) (create (class C1101010))))
(defclass C11010110 () ())
(defmethod f ((x C11010110) (y C11010110)) nil)
(defclass C11010111 () ())
(defmethod f ((x C11010111) (y C11010111)) nil)
(defclass C1101011 (C11010110 C11010111) ())
(defmethod f ((x C11010111) (y C11010110))
                 (format (standard-output) "call with ~A ~A~%" 'C11010111 'C11010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010110) (y C11010111))
                 (format (standard-output) "call with ~A ~A~%" 'C11010110 'C11010111)
                 (f (create (class C11010111)) (create (class C1101011))))
(defclass C110101 (C1101010 C1101011) ())
(defmethod f ((x C1101011) (y C1101010))
                 (format (standard-output) "call with ~A ~A~%" 'C1101011 'C1101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101010) (y C1101011))
                 (format (standard-output) "call with ~A ~A~%" 'C1101010 'C1101011)
                 (f (create (class C1101011)) (create (class C110101))))
(defclass C11010 (C110100 C110101) ())
(defmethod f ((x C110101) (y C110100))
                 (format (standard-output) "call with ~A ~A~%" 'C110101 'C110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100) (y C110101))
                 (format (standard-output) "call with ~A ~A~%" 'C110100 'C110101)
                 (f (create (class C110101)) (create (class C11010))))
(defclass C11011000 () ())
(defmethod f ((x C11011000) (y C11011000)) nil)
(defclass C11011001 () ())
(defmethod f ((x C11011001) (y C11011001)) nil)
(defclass C1101100 (C11011000 C11011001) ())
(defmethod f ((x C11011001) (y C11011000))
                 (format (standard-output) "call with ~A ~A~%" 'C11011001 'C11011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011000) (y C11011001))
                 (format (standard-output) "call with ~A ~A~%" 'C11011000 'C11011001)
                 (f (create (class C11011001)) (create (class C1101100))))
(defclass C11011010 () ())
(defmethod f ((x C11011010) (y C11011010)) nil)
(defclass C11011011 () ())
(defmethod f ((x C11011011) (y C11011011)) nil)
(defclass C1101101 (C11011010 C11011011) ())
(defmethod f ((x C11011011) (y C11011010))
                 (format (standard-output) "call with ~A ~A~%" 'C11011011 'C11011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011010) (y C11011011))
                 (format (standard-output) "call with ~A ~A~%" 'C11011010 'C11011011)
                 (f (create (class C11011011)) (create (class C1101101))))
(defclass C110110 (C1101100 C1101101) ())
(defmethod f ((x C1101101) (y C1101100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101101 'C1101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101100) (y C1101101))
                 (format (standard-output) "call with ~A ~A~%" 'C1101100 'C1101101)
                 (f (create (class C1101101)) (create (class C110110))))
(defclass C11011100 () ())
(defmethod f ((x C11011100) (y C11011100)) nil)
(defclass C11011101 () ())
(defmethod f ((x C11011101) (y C11011101)) nil)
(defclass C1101110 (C11011100 C11011101) ())
(defmethod f ((x C11011101) (y C11011100))
                 (format (standard-output) "call with ~A ~A~%" 'C11011101 'C11011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011100) (y C11011101))
                 (format (standard-output) "call with ~A ~A~%" 'C11011100 'C11011101)
                 (f (create (class C11011101)) (create (class C1101110))))
(defclass C11011110 () ())
(defmethod f ((x C11011110) (y C11011110)) nil)
(defclass C11011111 () ())
(defmethod f ((x C11011111) (y C11011111)) nil)
(defclass C1101111 (C11011110 C11011111) ())
(defmethod f ((x C11011111) (y C11011110))
                 (format (standard-output) "call with ~A ~A~%" 'C11011111 'C11011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011110) (y C11011111))
                 (format (standard-output) "call with ~A ~A~%" 'C11011110 'C11011111)
                 (f (create (class C11011111)) (create (class C1101111))))
(defclass C110111 (C1101110 C1101111) ())
(defmethod f ((x C1101111) (y C1101110))
                 (format (standard-output) "call with ~A ~A~%" 'C1101111 'C1101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101110) (y C1101111))
                 (format (standard-output) "call with ~A ~A~%" 'C1101110 'C1101111)
                 (f (create (class C1101111)) (create (class C110111))))
(defclass C11011 (C110110 C110111) ())
(defmethod f ((x C110111) (y C110110))
                 (format (standard-output) "call with ~A ~A~%" 'C110111 'C110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110) (y C110111))
                 (format (standard-output) "call with ~A ~A~%" 'C110110 'C110111)
                 (f (create (class C110111)) (create (class C11011))))
(defclass C1101 (C11010 C11011) ())
(defmethod f ((x C11011) (y C11010))
                 (format (standard-output) "call with ~A ~A~%" 'C11011 'C11010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010) (y C11011))
                 (format (standard-output) "call with ~A ~A~%" 'C11010 'C11011)
                 (f (create (class C11011)) (create (class C1101))))
(defclass C110 (C1100 C1101) ())
(defmethod f ((x C1101) (y C1100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101 'C1100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100) (y C1101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100 'C1101)
                 (f (create (class C1101)) (create (class C110))))
(defclass C11100000 () ())
(defmethod f ((x C11100000) (y C11100000)) nil)
(defclass C11100001 () ())
(defmethod f ((x C11100001) (y C11100001)) nil)
(defclass C1110000 (C11100000 C11100001) ())
(defmethod f ((x C11100001) (y C11100000))
                 (format (standard-output) "call with ~A ~A~%" 'C11100001 'C11100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100000) (y C11100001))
                 (format (standard-output) "call with ~A ~A~%" 'C11100000 'C11100001)
                 (f (create (class C11100001)) (create (class C1110000))))
(defclass C11100010 () ())
(defmethod f ((x C11100010) (y C11100010)) nil)
(defclass C11100011 () ())
(defmethod f ((x C11100011) (y C11100011)) nil)
(defclass C1110001 (C11100010 C11100011) ())
(defmethod f ((x C11100011) (y C11100010))
                 (format (standard-output) "call with ~A ~A~%" 'C11100011 'C11100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100010) (y C11100011))
                 (format (standard-output) "call with ~A ~A~%" 'C11100010 'C11100011)
                 (f (create (class C11100011)) (create (class C1110001))))
(defclass C111000 (C1110000 C1110001) ())
(defmethod f ((x C1110001) (y C1110000))
                 (format (standard-output) "call with ~A ~A~%" 'C1110001 'C1110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110000) (y C1110001))
                 (format (standard-output) "call with ~A ~A~%" 'C1110000 'C1110001)
                 (f (create (class C1110001)) (create (class C111000))))
(defclass C11100100 () ())
(defmethod f ((x C11100100) (y C11100100)) nil)
(defclass C11100101 () ())
(defmethod f ((x C11100101) (y C11100101)) nil)
(defclass C1110010 (C11100100 C11100101) ())
(defmethod f ((x C11100101) (y C11100100))
                 (format (standard-output) "call with ~A ~A~%" 'C11100101 'C11100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100100) (y C11100101))
                 (format (standard-output) "call with ~A ~A~%" 'C11100100 'C11100101)
                 (f (create (class C11100101)) (create (class C1110010))))
(defclass C11100110 () ())
(defmethod f ((x C11100110) (y C11100110)) nil)
(defclass C11100111 () ())
(defmethod f ((x C11100111) (y C11100111)) nil)
(defclass C1110011 (C11100110 C11100111) ())
(defmethod f ((x C11100111) (y C11100110))
                 (format (standard-output) "call with ~A ~A~%" 'C11100111 'C11100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100110) (y C11100111))
                 (format (standard-output) "call with ~A ~A~%" 'C11100110 'C11100111)
                 (f (create (class C11100111)) (create (class C1110011))))
(defclass C111001 (C1110010 C1110011) ())
(defmethod f ((x C1110011) (y C1110010))
                 (format (standard-output) "call with ~A ~A~%" 'C1110011 'C1110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110010) (y C1110011))
                 (format (standard-output) "call with ~A ~A~%" 'C1110010 'C1110011)
                 (f (create (class C1110011)) (create (class C111001))))
(defclass C11100 (C111000 C111001) ())
(defmethod f ((x C111001) (y C111000))
                 (format (standard-output) "call with ~A ~A~%" 'C111001 'C111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000) (y C111001))
                 (format (standard-output) "call with ~A ~A~%" 'C111000 'C111001)
                 (f (create (class C111001)) (create (class C11100))))
(defclass C11101000 () ())
(defmethod f ((x C11101000) (y C11101000)) nil)
(defclass C11101001 () ())
(defmethod f ((x C11101001) (y C11101001)) nil)
(defclass C1110100 (C11101000 C11101001) ())
(defmethod f ((x C11101001) (y C11101000))
                 (format (standard-output) "call with ~A ~A~%" 'C11101001 'C11101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101000) (y C11101001))
                 (format (standard-output) "call with ~A ~A~%" 'C11101000 'C11101001)
                 (f (create (class C11101001)) (create (class C1110100))))
(defclass C11101010 () ())
(defmethod f ((x C11101010) (y C11101010)) nil)
(defclass C11101011 () ())
(defmethod f ((x C11101011) (y C11101011)) nil)
(defclass C1110101 (C11101010 C11101011) ())
(defmethod f ((x C11101011) (y C11101010))
                 (format (standard-output) "call with ~A ~A~%" 'C11101011 'C11101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101010) (y C11101011))
                 (format (standard-output) "call with ~A ~A~%" 'C11101010 'C11101011)
                 (f (create (class C11101011)) (create (class C1110101))))
(defclass C111010 (C1110100 C1110101) ())
(defmethod f ((x C1110101) (y C1110100))
                 (format (standard-output) "call with ~A ~A~%" 'C1110101 'C1110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110100) (y C1110101))
                 (format (standard-output) "call with ~A ~A~%" 'C1110100 'C1110101)
                 (f (create (class C1110101)) (create (class C111010))))
(defclass C11101100 () ())
(defmethod f ((x C11101100) (y C11101100)) nil)
(defclass C11101101 () ())
(defmethod f ((x C11101101) (y C11101101)) nil)
(defclass C1110110 (C11101100 C11101101) ())
(defmethod f ((x C11101101) (y C11101100))
                 (format (standard-output) "call with ~A ~A~%" 'C11101101 'C11101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101100) (y C11101101))
                 (format (standard-output) "call with ~A ~A~%" 'C11101100 'C11101101)
                 (f (create (class C11101101)) (create (class C1110110))))
(defclass C11101110 () ())
(defmethod f ((x C11101110) (y C11101110)) nil)
(defclass C11101111 () ())
(defmethod f ((x C11101111) (y C11101111)) nil)
(defclass C1110111 (C11101110 C11101111) ())
(defmethod f ((x C11101111) (y C11101110))
                 (format (standard-output) "call with ~A ~A~%" 'C11101111 'C11101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101110) (y C11101111))
                 (format (standard-output) "call with ~A ~A~%" 'C11101110 'C11101111)
                 (f (create (class C11101111)) (create (class C1110111))))
(defclass C111011 (C1110110 C1110111) ())
(defmethod f ((x C1110111) (y C1110110))
                 (format (standard-output) "call with ~A ~A~%" 'C1110111 'C1110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110110) (y C1110111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110110 'C1110111)
                 (f (create (class C1110111)) (create (class C111011))))
(defclass C11101 (C111010 C111011) ())
(defmethod f ((x C111011) (y C111010))
                 (format (standard-output) "call with ~A ~A~%" 'C111011 'C111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010) (y C111011))
                 (format (standard-output) "call with ~A ~A~%" 'C111010 'C111011)
                 (f (create (class C111011)) (create (class C11101))))
(defclass C1110 (C11100 C11101) ())
(defmethod f ((x C11101) (y C11100))
                 (format (standard-output) "call with ~A ~A~%" 'C11101 'C11100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100) (y C11101))
                 (format (standard-output) "call with ~A ~A~%" 'C11100 'C11101)
                 (f (create (class C11101)) (create (class C1110))))
(defclass C11110000 () ())
(defmethod f ((x C11110000) (y C11110000)) nil)
(defclass C11110001 () ())
(defmethod f ((x C11110001) (y C11110001)) nil)
(defclass C1111000 (C11110000 C11110001) ())
(defmethod f ((x C11110001) (y C11110000))
                 (format (standard-output) "call with ~A ~A~%" 'C11110001 'C11110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110000) (y C11110001))
                 (format (standard-output) "call with ~A ~A~%" 'C11110000 'C11110001)
                 (f (create (class C11110001)) (create (class C1111000))))
(defclass C11110010 () ())
(defmethod f ((x C11110010) (y C11110010)) nil)
(defclass C11110011 () ())
(defmethod f ((x C11110011) (y C11110011)) nil)
(defclass C1111001 (C11110010 C11110011) ())
(defmethod f ((x C11110011) (y C11110010))
                 (format (standard-output) "call with ~A ~A~%" 'C11110011 'C11110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110010) (y C11110011))
                 (format (standard-output) "call with ~A ~A~%" 'C11110010 'C11110011)
                 (f (create (class C11110011)) (create (class C1111001))))
(defclass C111100 (C1111000 C1111001) ())
(defmethod f ((x C1111001) (y C1111000))
                 (format (standard-output) "call with ~A ~A~%" 'C1111001 'C1111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111000) (y C1111001))
                 (format (standard-output) "call with ~A ~A~%" 'C1111000 'C1111001)
                 (f (create (class C1111001)) (create (class C111100))))
(defclass C11110100 () ())
(defmethod f ((x C11110100) (y C11110100)) nil)
(defclass C11110101 () ())
(defmethod f ((x C11110101) (y C11110101)) nil)
(defclass C1111010 (C11110100 C11110101) ())
(defmethod f ((x C11110101) (y C11110100))
                 (format (standard-output) "call with ~A ~A~%" 'C11110101 'C11110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110100) (y C11110101))
                 (format (standard-output) "call with ~A ~A~%" 'C11110100 'C11110101)
                 (f (create (class C11110101)) (create (class C1111010))))
(defclass C11110110 () ())
(defmethod f ((x C11110110) (y C11110110)) nil)
(defclass C11110111 () ())
(defmethod f ((x C11110111) (y C11110111)) nil)
(defclass C1111011 (C11110110 C11110111) ())
(defmethod f ((x C11110111) (y C11110110))
                 (format (standard-output) "call with ~A ~A~%" 'C11110111 'C11110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110110) (y C11110111))
                 (format (standard-output) "call with ~A ~A~%" 'C11110110 'C11110111)
                 (f (create (class C11110111)) (create (class C1111011))))
(defclass C111101 (C1111010 C1111011) ())
(defmethod f ((x C1111011) (y C1111010))
                 (format (standard-output) "call with ~A ~A~%" 'C1111011 'C1111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111010) (y C1111011))
                 (format (standard-output) "call with ~A ~A~%" 'C1111010 'C1111011)
                 (f (create (class C1111011)) (create (class C111101))))
(defclass C11110 (C111100 C111101) ())
(defmethod f ((x C111101) (y C111100))
                 (format (standard-output) "call with ~A ~A~%" 'C111101 'C111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100) (y C111101))
                 (format (standard-output) "call with ~A ~A~%" 'C111100 'C111101)
                 (f (create (class C111101)) (create (class C11110))))
(defclass C11111000 () ())
(defmethod f ((x C11111000) (y C11111000)) nil)
(defclass C11111001 () ())
(defmethod f ((x C11111001) (y C11111001)) nil)
(defclass C1111100 (C11111000 C11111001) ())
(defmethod f ((x C11111001) (y C11111000))
                 (format (standard-output) "call with ~A ~A~%" 'C11111001 'C11111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111000) (y C11111001))
                 (format (standard-output) "call with ~A ~A~%" 'C11111000 'C11111001)
                 (f (create (class C11111001)) (create (class C1111100))))
(defclass C11111010 () ())
(defmethod f ((x C11111010) (y C11111010)) nil)
(defclass C11111011 () ())
(defmethod f ((x C11111011) (y C11111011)) nil)
(defclass C1111101 (C11111010 C11111011) ())
(defmethod f ((x C11111011) (y C11111010))
                 (format (standard-output) "call with ~A ~A~%" 'C11111011 'C11111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111010) (y C11111011))
                 (format (standard-output) "call with ~A ~A~%" 'C11111010 'C11111011)
                 (f (create (class C11111011)) (create (class C1111101))))
(defclass C111110 (C1111100 C1111101) ())
(defmethod f ((x C1111101) (y C1111100))
                 (format (standard-output) "call with ~A ~A~%" 'C1111101 'C1111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111100) (y C1111101))
                 (format (standard-output) "call with ~A ~A~%" 'C1111100 'C1111101)
                 (f (create (class C1111101)) (create (class C111110))))
(defclass C11111100 () ())
(defmethod f ((x C11111100) (y C11111100)) nil)
(defclass C11111101 () ())
(defmethod f ((x C11111101) (y C11111101)) nil)
(defclass C1111110 (C11111100 C11111101) ())
(defmethod f ((x C11111101) (y C11111100))
                 (format (standard-output) "call with ~A ~A~%" 'C11111101 'C11111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111100) (y C11111101))
                 (format (standard-output) "call with ~A ~A~%" 'C11111100 'C11111101)
                 (f (create (class C11111101)) (create (class C1111110))))
(defclass C11111110 () ())
(defmethod f ((x C11111110) (y C11111110)) nil)
(defclass C11111111 () ())
(defmethod f ((x C11111111) (y C11111111)) nil)
(defclass C1111111 (C11111110 C11111111) ())
(defmethod f ((x C11111111) (y C11111110))
                 (format (standard-output) "call with ~A ~A~%" 'C11111111 'C11111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111110) (y C11111111))
                 (format (standard-output) "call with ~A ~A~%" 'C11111110 'C11111111)
                 (f (create (class C11111111)) (create (class C1111111))))
(defclass C111111 (C1111110 C1111111) ())
(defmethod f ((x C1111111) (y C1111110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111111 'C1111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111110) (y C1111111))
                 (format (standard-output) "call with ~A ~A~%" 'C1111110 'C1111111)
                 (f (create (class C1111111)) (create (class C111111))))
(defclass C11111 (C111110 C111111) ())
(defmethod f ((x C111111) (y C111110))
                 (format (standard-output) "call with ~A ~A~%" 'C111111 'C111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110) (y C111111))
                 (format (standard-output) "call with ~A ~A~%" 'C111110 'C111111)
                 (f (create (class C111111)) (create (class C11111))))
(defclass C1111 (C11110 C11111) ())
(defmethod f ((x C11111) (y C11110))
                 (format (standard-output) "call with ~A ~A~%" 'C11111 'C11110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110) (y C11111))
                 (format (standard-output) "call with ~A ~A~%" 'C11110 'C11111)
                 (f (create (class C11111)) (create (class C1111))))
(defclass C111 (C1110 C1111) ())
(defmethod f ((x C1111) (y C1110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111 'C1110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110) (y C1111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110 'C1111)
                 (f (create (class C1111)) (create (class C111))))
(defclass C11 (C110 C111) ())
(defmethod f ((x C111) (y C110))
                 (format (standard-output) "call with ~A ~A~%" 'C111 'C110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110) (y C111))
                 (format (standard-output) "call with ~A ~A~%" 'C110 'C111)
                 (f (create (class C111)) (create (class C11))))
(defclass C1 (C10 C11) ())
(defmethod f ((x C11) (y C10))
                 (format (standard-output) "call with ~A ~A~%" 'C11 'C10)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10) (y C11))
                 (format (standard-output) "call with ~A ~A~%" 'C10 'C11)
                 (f (create (class C11)) (create (class C1))))
(defclass C (C0 C1) ())
(defmethod f ((x C1) (y C0))
                 (format (standard-output) "call with ~A ~A~%" 'C1 'C0)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0) (y C1))
                 (format (standard-output) "call with ~A ~A~%" 'C0 'C1)
                 (f (create (class C1)) (create (class C))))
(f (create (class c)) (create (class c)))
