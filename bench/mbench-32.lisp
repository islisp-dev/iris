(defgeneric f (x y) (:method-combination nil))
(defclass C00000 () ())
(defmethod f ((x C00000) (y C00000)) nil)
(defclass C00001 () ())
(defmethod f ((x C00001) (y C00001)) nil)
(defclass C0000 (C00000 C00001) ())
(defmethod f ((x C00001) (y C00000))
                 (format (standard-output) "call with ~A ~A~%" 'C00001 'C00000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000) (y C00001))
                 (format (standard-output) "call with ~A ~A~%" 'C00000 'C00001)
                 (f (create (class C00001)) (create (class C0000))))
(defclass C00010 () ())
(defmethod f ((x C00010) (y C00010)) nil)
(defclass C00011 () ())
(defmethod f ((x C00011) (y C00011)) nil)
(defclass C0001 (C00010 C00011) ())
(defmethod f ((x C00011) (y C00010))
                 (format (standard-output) "call with ~A ~A~%" 'C00011 'C00010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010) (y C00011))
                 (format (standard-output) "call with ~A ~A~%" 'C00010 'C00011)
                 (f (create (class C00011)) (create (class C0001))))
(defclass C000 (C0000 C0001) ())
(defmethod f ((x C0001) (y C0000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001 'C0000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000) (y C0001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000 'C0001)
                 (f (create (class C0001)) (create (class C000))))
(defclass C00100 () ())
(defmethod f ((x C00100) (y C00100)) nil)
(defclass C00101 () ())
(defmethod f ((x C00101) (y C00101)) nil)
(defclass C0010 (C00100 C00101) ())
(defmethod f ((x C00101) (y C00100))
                 (format (standard-output) "call with ~A ~A~%" 'C00101 'C00100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100) (y C00101))
                 (format (standard-output) "call with ~A ~A~%" 'C00100 'C00101)
                 (f (create (class C00101)) (create (class C0010))))
(defclass C00110 () ())
(defmethod f ((x C00110) (y C00110)) nil)
(defclass C00111 () ())
(defmethod f ((x C00111) (y C00111)) nil)
(defclass C0011 (C00110 C00111) ())
(defmethod f ((x C00111) (y C00110))
                 (format (standard-output) "call with ~A ~A~%" 'C00111 'C00110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110) (y C00111))
                 (format (standard-output) "call with ~A ~A~%" 'C00110 'C00111)
                 (f (create (class C00111)) (create (class C0011))))
(defclass C001 (C0010 C0011) ())
(defmethod f ((x C0011) (y C0010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011 'C0010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010) (y C0011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010 'C0011)
                 (f (create (class C0011)) (create (class C001))))
(defclass C00 (C000 C001) ())
(defmethod f ((x C001) (y C000))
                 (format (standard-output) "call with ~A ~A~%" 'C001 'C000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000) (y C001))
                 (format (standard-output) "call with ~A ~A~%" 'C000 'C001)
                 (f (create (class C001)) (create (class C00))))
(defclass C01000 () ())
(defmethod f ((x C01000) (y C01000)) nil)
(defclass C01001 () ())
(defmethod f ((x C01001) (y C01001)) nil)
(defclass C0100 (C01000 C01001) ())
(defmethod f ((x C01001) (y C01000))
                 (format (standard-output) "call with ~A ~A~%" 'C01001 'C01000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000) (y C01001))
                 (format (standard-output) "call with ~A ~A~%" 'C01000 'C01001)
                 (f (create (class C01001)) (create (class C0100))))
(defclass C01010 () ())
(defmethod f ((x C01010) (y C01010)) nil)
(defclass C01011 () ())
(defmethod f ((x C01011) (y C01011)) nil)
(defclass C0101 (C01010 C01011) ())
(defmethod f ((x C01011) (y C01010))
                 (format (standard-output) "call with ~A ~A~%" 'C01011 'C01010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010) (y C01011))
                 (format (standard-output) "call with ~A ~A~%" 'C01010 'C01011)
                 (f (create (class C01011)) (create (class C0101))))
(defclass C010 (C0100 C0101) ())
(defmethod f ((x C0101) (y C0100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101 'C0100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100) (y C0101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100 'C0101)
                 (f (create (class C0101)) (create (class C010))))
(defclass C01100 () ())
(defmethod f ((x C01100) (y C01100)) nil)
(defclass C01101 () ())
(defmethod f ((x C01101) (y C01101)) nil)
(defclass C0110 (C01100 C01101) ())
(defmethod f ((x C01101) (y C01100))
                 (format (standard-output) "call with ~A ~A~%" 'C01101 'C01100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100) (y C01101))
                 (format (standard-output) "call with ~A ~A~%" 'C01100 'C01101)
                 (f (create (class C01101)) (create (class C0110))))
(defclass C01110 () ())
(defmethod f ((x C01110) (y C01110)) nil)
(defclass C01111 () ())
(defmethod f ((x C01111) (y C01111)) nil)
(defclass C0111 (C01110 C01111) ())
(defmethod f ((x C01111) (y C01110))
                 (format (standard-output) "call with ~A ~A~%" 'C01111 'C01110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110) (y C01111))
                 (format (standard-output) "call with ~A ~A~%" 'C01110 'C01111)
                 (f (create (class C01111)) (create (class C0111))))
(defclass C011 (C0110 C0111) ())
(defmethod f ((x C0111) (y C0110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111 'C0110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110) (y C0111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110 'C0111)
                 (f (create (class C0111)) (create (class C011))))
(defclass C01 (C010 C011) ())
(defmethod f ((x C011) (y C010))
                 (format (standard-output) "call with ~A ~A~%" 'C011 'C010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010) (y C011))
                 (format (standard-output) "call with ~A ~A~%" 'C010 'C011)
                 (f (create (class C011)) (create (class C01))))
(defclass C0 (C00 C01) ())
(defmethod f ((x C01) (y C00))
                 (format (standard-output) "call with ~A ~A~%" 'C01 'C00)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00) (y C01))
                 (format (standard-output) "call with ~A ~A~%" 'C00 'C01)
                 (f (create (class C01)) (create (class C0))))
(defclass C10000 () ())
(defmethod f ((x C10000) (y C10000)) nil)
(defclass C10001 () ())
(defmethod f ((x C10001) (y C10001)) nil)
(defclass C1000 (C10000 C10001) ())
(defmethod f ((x C10001) (y C10000))
                 (format (standard-output) "call with ~A ~A~%" 'C10001 'C10000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000) (y C10001))
                 (format (standard-output) "call with ~A ~A~%" 'C10000 'C10001)
                 (f (create (class C10001)) (create (class C1000))))
(defclass C10010 () ())
(defmethod f ((x C10010) (y C10010)) nil)
(defclass C10011 () ())
(defmethod f ((x C10011) (y C10011)) nil)
(defclass C1001 (C10010 C10011) ())
(defmethod f ((x C10011) (y C10010))
                 (format (standard-output) "call with ~A ~A~%" 'C10011 'C10010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010) (y C10011))
                 (format (standard-output) "call with ~A ~A~%" 'C10010 'C10011)
                 (f (create (class C10011)) (create (class C1001))))
(defclass C100 (C1000 C1001) ())
(defmethod f ((x C1001) (y C1000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001 'C1000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000) (y C1001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000 'C1001)
                 (f (create (class C1001)) (create (class C100))))
(defclass C10100 () ())
(defmethod f ((x C10100) (y C10100)) nil)
(defclass C10101 () ())
(defmethod f ((x C10101) (y C10101)) nil)
(defclass C1010 (C10100 C10101) ())
(defmethod f ((x C10101) (y C10100))
                 (format (standard-output) "call with ~A ~A~%" 'C10101 'C10100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100) (y C10101))
                 (format (standard-output) "call with ~A ~A~%" 'C10100 'C10101)
                 (f (create (class C10101)) (create (class C1010))))
(defclass C10110 () ())
(defmethod f ((x C10110) (y C10110)) nil)
(defclass C10111 () ())
(defmethod f ((x C10111) (y C10111)) nil)
(defclass C1011 (C10110 C10111) ())
(defmethod f ((x C10111) (y C10110))
                 (format (standard-output) "call with ~A ~A~%" 'C10111 'C10110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110) (y C10111))
                 (format (standard-output) "call with ~A ~A~%" 'C10110 'C10111)
                 (f (create (class C10111)) (create (class C1011))))
(defclass C101 (C1010 C1011) ())
(defmethod f ((x C1011) (y C1010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011 'C1010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010) (y C1011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010 'C1011)
                 (f (create (class C1011)) (create (class C101))))
(defclass C10 (C100 C101) ())
(defmethod f ((x C101) (y C100))
                 (format (standard-output) "call with ~A ~A~%" 'C101 'C100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100) (y C101))
                 (format (standard-output) "call with ~A ~A~%" 'C100 'C101)
                 (f (create (class C101)) (create (class C10))))
(defclass C11000 () ())
(defmethod f ((x C11000) (y C11000)) nil)
(defclass C11001 () ())
(defmethod f ((x C11001) (y C11001)) nil)
(defclass C1100 (C11000 C11001) ())
(defmethod f ((x C11001) (y C11000))
                 (format (standard-output) "call with ~A ~A~%" 'C11001 'C11000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000) (y C11001))
                 (format (standard-output) "call with ~A ~A~%" 'C11000 'C11001)
                 (f (create (class C11001)) (create (class C1100))))
(defclass C11010 () ())
(defmethod f ((x C11010) (y C11010)) nil)
(defclass C11011 () ())
(defmethod f ((x C11011) (y C11011)) nil)
(defclass C1101 (C11010 C11011) ())
(defmethod f ((x C11011) (y C11010))
                 (format (standard-output) "call with ~A ~A~%" 'C11011 'C11010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010) (y C11011))
                 (format (standard-output) "call with ~A ~A~%" 'C11010 'C11011)
                 (f (create (class C11011)) (create (class C1101))))
(defclass C110 (C1100 C1101) ())
(defmethod f ((x C1101) (y C1100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101 'C1100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100) (y C1101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100 'C1101)
                 (f (create (class C1101)) (create (class C110))))
(defclass C11100 () ())
(defmethod f ((x C11100) (y C11100)) nil)
(defclass C11101 () ())
(defmethod f ((x C11101) (y C11101)) nil)
(defclass C1110 (C11100 C11101) ())
(defmethod f ((x C11101) (y C11100))
                 (format (standard-output) "call with ~A ~A~%" 'C11101 'C11100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100) (y C11101))
                 (format (standard-output) "call with ~A ~A~%" 'C11100 'C11101)
                 (f (create (class C11101)) (create (class C1110))))
(defclass C11110 () ())
(defmethod f ((x C11110) (y C11110)) nil)
(defclass C11111 () ())
(defmethod f ((x C11111) (y C11111)) nil)
(defclass C1111 (C11110 C11111) ())
(defmethod f ((x C11111) (y C11110))
                 (format (standard-output) "call with ~A ~A~%" 'C11111 'C11110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110) (y C11111))
                 (format (standard-output) "call with ~A ~A~%" 'C11110 'C11111)
                 (f (create (class C11111)) (create (class C1111))))
(defclass C111 (C1110 C1111) ())
(defmethod f ((x C1111) (y C1110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111 'C1110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110) (y C1111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110 'C1111)
                 (f (create (class C1111)) (create (class C111))))
(defclass C11 (C110 C111) ())
(defmethod f ((x C111) (y C110))
                 (format (standard-output) "call with ~A ~A~%" 'C111 'C110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110) (y C111))
                 (format (standard-output) "call with ~A ~A~%" 'C110 'C111)
                 (f (create (class C111)) (create (class C11))))
(defclass C1 (C10 C11) ())
(defmethod f ((x C11) (y C10))
                 (format (standard-output) "call with ~A ~A~%" 'C11 'C10)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10) (y C11))
                 (format (standard-output) "call with ~A ~A~%" 'C10 'C11)
                 (f (create (class C11)) (create (class C1))))
(defclass C (C0 C1) ())
(defmethod f ((x C1) (y C0))
                 (format (standard-output) "call with ~A ~A~%" 'C1 'C0)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0) (y C1))
                 (format (standard-output) "call with ~A ~A~%" 'C0 'C1)
                 (f (create (class C1)) (create (class C))))
(f (create (class c)) (create (class c)))
