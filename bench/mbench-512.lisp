(defgeneric f (x y) (:method-combination nil))
(defclass C000000000 () ())
(defmethod f ((x C000000000) (y C000000000)) nil)
(defclass C000000001 () ())
(defmethod f ((x C000000001) (y C000000001)) nil)
(defclass C00000000 (C000000000 C000000001) ())
(defmethod f ((x C000000001) (y C000000000))
                 (format (standard-output) "call with ~A ~A~%" 'C000000001 'C000000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000000) (y C000000001))
                 (format (standard-output) "call with ~A ~A~%" 'C000000000 'C000000001)
                 (f (create (class C000000001)) (create (class C00000000))))
(defclass C000000010 () ())
(defmethod f ((x C000000010) (y C000000010)) nil)
(defclass C000000011 () ())
(defmethod f ((x C000000011) (y C000000011)) nil)
(defclass C00000001 (C000000010 C000000011) ())
(defmethod f ((x C000000011) (y C000000010))
                 (format (standard-output) "call with ~A ~A~%" 'C000000011 'C000000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000010) (y C000000011))
                 (format (standard-output) "call with ~A ~A~%" 'C000000010 'C000000011)
                 (f (create (class C000000011)) (create (class C00000001))))
(defclass C0000000 (C00000000 C00000001) ())
(defmethod f ((x C00000001) (y C00000000))
                 (format (standard-output) "call with ~A ~A~%" 'C00000001 'C00000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000000) (y C00000001))
                 (format (standard-output) "call with ~A ~A~%" 'C00000000 'C00000001)
                 (f (create (class C00000001)) (create (class C0000000))))
(defclass C000000100 () ())
(defmethod f ((x C000000100) (y C000000100)) nil)
(defclass C000000101 () ())
(defmethod f ((x C000000101) (y C000000101)) nil)
(defclass C00000010 (C000000100 C000000101) ())
(defmethod f ((x C000000101) (y C000000100))
                 (format (standard-output) "call with ~A ~A~%" 'C000000101 'C000000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000100) (y C000000101))
                 (format (standard-output) "call with ~A ~A~%" 'C000000100 'C000000101)
                 (f (create (class C000000101)) (create (class C00000010))))
(defclass C000000110 () ())
(defmethod f ((x C000000110) (y C000000110)) nil)
(defclass C000000111 () ())
(defmethod f ((x C000000111) (y C000000111)) nil)
(defclass C00000011 (C000000110 C000000111) ())
(defmethod f ((x C000000111) (y C000000110))
                 (format (standard-output) "call with ~A ~A~%" 'C000000111 'C000000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000110) (y C000000111))
                 (format (standard-output) "call with ~A ~A~%" 'C000000110 'C000000111)
                 (f (create (class C000000111)) (create (class C00000011))))
(defclass C0000001 (C00000010 C00000011) ())
(defmethod f ((x C00000011) (y C00000010))
                 (format (standard-output) "call with ~A ~A~%" 'C00000011 'C00000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000010) (y C00000011))
                 (format (standard-output) "call with ~A ~A~%" 'C00000010 'C00000011)
                 (f (create (class C00000011)) (create (class C0000001))))
(defclass C000000 (C0000000 C0000001) ())
(defmethod f ((x C0000001) (y C0000000))
                 (format (standard-output) "call with ~A ~A~%" 'C0000001 'C0000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000000) (y C0000001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000000 'C0000001)
                 (f (create (class C0000001)) (create (class C000000))))
(defclass C000001000 () ())
(defmethod f ((x C000001000) (y C000001000)) nil)
(defclass C000001001 () ())
(defmethod f ((x C000001001) (y C000001001)) nil)
(defclass C00000100 (C000001000 C000001001) ())
(defmethod f ((x C000001001) (y C000001000))
                 (format (standard-output) "call with ~A ~A~%" 'C000001001 'C000001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000001000) (y C000001001))
                 (format (standard-output) "call with ~A ~A~%" 'C000001000 'C000001001)
                 (f (create (class C000001001)) (create (class C00000100))))
(defclass C000001010 () ())
(defmethod f ((x C000001010) (y C000001010)) nil)
(defclass C000001011 () ())
(defmethod f ((x C000001011) (y C000001011)) nil)
(defclass C00000101 (C000001010 C000001011) ())
(defmethod f ((x C000001011) (y C000001010))
                 (format (standard-output) "call with ~A ~A~%" 'C000001011 'C000001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000001010) (y C000001011))
                 (format (standard-output) "call with ~A ~A~%" 'C000001010 'C000001011)
                 (f (create (class C000001011)) (create (class C00000101))))
(defclass C0000010 (C00000100 C00000101) ())
(defmethod f ((x C00000101) (y C00000100))
                 (format (standard-output) "call with ~A ~A~%" 'C00000101 'C00000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000100) (y C00000101))
                 (format (standard-output) "call with ~A ~A~%" 'C00000100 'C00000101)
                 (f (create (class C00000101)) (create (class C0000010))))
(defclass C000001100 () ())
(defmethod f ((x C000001100) (y C000001100)) nil)
(defclass C000001101 () ())
(defmethod f ((x C000001101) (y C000001101)) nil)
(defclass C00000110 (C000001100 C000001101) ())
(defmethod f ((x C000001101) (y C000001100))
                 (format (standard-output) "call with ~A ~A~%" 'C000001101 'C000001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000001100) (y C000001101))
                 (format (standard-output) "call with ~A ~A~%" 'C000001100 'C000001101)
                 (f (create (class C000001101)) (create (class C00000110))))
(defclass C000001110 () ())
(defmethod f ((x C000001110) (y C000001110)) nil)
(defclass C000001111 () ())
(defmethod f ((x C000001111) (y C000001111)) nil)
(defclass C00000111 (C000001110 C000001111) ())
(defmethod f ((x C000001111) (y C000001110))
                 (format (standard-output) "call with ~A ~A~%" 'C000001111 'C000001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000001110) (y C000001111))
                 (format (standard-output) "call with ~A ~A~%" 'C000001110 'C000001111)
                 (f (create (class C000001111)) (create (class C00000111))))
(defclass C0000011 (C00000110 C00000111) ())
(defmethod f ((x C00000111) (y C00000110))
                 (format (standard-output) "call with ~A ~A~%" 'C00000111 'C00000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000110) (y C00000111))
                 (format (standard-output) "call with ~A ~A~%" 'C00000110 'C00000111)
                 (f (create (class C00000111)) (create (class C0000011))))
(defclass C000001 (C0000010 C0000011) ())
(defmethod f ((x C0000011) (y C0000010))
                 (format (standard-output) "call with ~A ~A~%" 'C0000011 'C0000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000010) (y C0000011))
                 (format (standard-output) "call with ~A ~A~%" 'C0000010 'C0000011)
                 (f (create (class C0000011)) (create (class C000001))))
(defclass C00000 (C000000 C000001) ())
(defmethod f ((x C000001) (y C000000))
                 (format (standard-output) "call with ~A ~A~%" 'C000001 'C000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000) (y C000001))
                 (format (standard-output) "call with ~A ~A~%" 'C000000 'C000001)
                 (f (create (class C000001)) (create (class C00000))))
(defclass C000010000 () ())
(defmethod f ((x C000010000) (y C000010000)) nil)
(defclass C000010001 () ())
(defmethod f ((x C000010001) (y C000010001)) nil)
(defclass C00001000 (C000010000 C000010001) ())
(defmethod f ((x C000010001) (y C000010000))
                 (format (standard-output) "call with ~A ~A~%" 'C000010001 'C000010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010000) (y C000010001))
                 (format (standard-output) "call with ~A ~A~%" 'C000010000 'C000010001)
                 (f (create (class C000010001)) (create (class C00001000))))
(defclass C000010010 () ())
(defmethod f ((x C000010010) (y C000010010)) nil)
(defclass C000010011 () ())
(defmethod f ((x C000010011) (y C000010011)) nil)
(defclass C00001001 (C000010010 C000010011) ())
(defmethod f ((x C000010011) (y C000010010))
                 (format (standard-output) "call with ~A ~A~%" 'C000010011 'C000010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010010) (y C000010011))
                 (format (standard-output) "call with ~A ~A~%" 'C000010010 'C000010011)
                 (f (create (class C000010011)) (create (class C00001001))))
(defclass C0000100 (C00001000 C00001001) ())
(defmethod f ((x C00001001) (y C00001000))
                 (format (standard-output) "call with ~A ~A~%" 'C00001001 'C00001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001000) (y C00001001))
                 (format (standard-output) "call with ~A ~A~%" 'C00001000 'C00001001)
                 (f (create (class C00001001)) (create (class C0000100))))
(defclass C000010100 () ())
(defmethod f ((x C000010100) (y C000010100)) nil)
(defclass C000010101 () ())
(defmethod f ((x C000010101) (y C000010101)) nil)
(defclass C00001010 (C000010100 C000010101) ())
(defmethod f ((x C000010101) (y C000010100))
                 (format (standard-output) "call with ~A ~A~%" 'C000010101 'C000010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010100) (y C000010101))
                 (format (standard-output) "call with ~A ~A~%" 'C000010100 'C000010101)
                 (f (create (class C000010101)) (create (class C00001010))))
(defclass C000010110 () ())
(defmethod f ((x C000010110) (y C000010110)) nil)
(defclass C000010111 () ())
(defmethod f ((x C000010111) (y C000010111)) nil)
(defclass C00001011 (C000010110 C000010111) ())
(defmethod f ((x C000010111) (y C000010110))
                 (format (standard-output) "call with ~A ~A~%" 'C000010111 'C000010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010110) (y C000010111))
                 (format (standard-output) "call with ~A ~A~%" 'C000010110 'C000010111)
                 (f (create (class C000010111)) (create (class C00001011))))
(defclass C0000101 (C00001010 C00001011) ())
(defmethod f ((x C00001011) (y C00001010))
                 (format (standard-output) "call with ~A ~A~%" 'C00001011 'C00001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001010) (y C00001011))
                 (format (standard-output) "call with ~A ~A~%" 'C00001010 'C00001011)
                 (f (create (class C00001011)) (create (class C0000101))))
(defclass C000010 (C0000100 C0000101) ())
(defmethod f ((x C0000101) (y C0000100))
                 (format (standard-output) "call with ~A ~A~%" 'C0000101 'C0000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000100) (y C0000101))
                 (format (standard-output) "call with ~A ~A~%" 'C0000100 'C0000101)
                 (f (create (class C0000101)) (create (class C000010))))
(defclass C000011000 () ())
(defmethod f ((x C000011000) (y C000011000)) nil)
(defclass C000011001 () ())
(defmethod f ((x C000011001) (y C000011001)) nil)
(defclass C00001100 (C000011000 C000011001) ())
(defmethod f ((x C000011001) (y C000011000))
                 (format (standard-output) "call with ~A ~A~%" 'C000011001 'C000011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000011000) (y C000011001))
                 (format (standard-output) "call with ~A ~A~%" 'C000011000 'C000011001)
                 (f (create (class C000011001)) (create (class C00001100))))
(defclass C000011010 () ())
(defmethod f ((x C000011010) (y C000011010)) nil)
(defclass C000011011 () ())
(defmethod f ((x C000011011) (y C000011011)) nil)
(defclass C00001101 (C000011010 C000011011) ())
(defmethod f ((x C000011011) (y C000011010))
                 (format (standard-output) "call with ~A ~A~%" 'C000011011 'C000011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000011010) (y C000011011))
                 (format (standard-output) "call with ~A ~A~%" 'C000011010 'C000011011)
                 (f (create (class C000011011)) (create (class C00001101))))
(defclass C0000110 (C00001100 C00001101) ())
(defmethod f ((x C00001101) (y C00001100))
                 (format (standard-output) "call with ~A ~A~%" 'C00001101 'C00001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001100) (y C00001101))
                 (format (standard-output) "call with ~A ~A~%" 'C00001100 'C00001101)
                 (f (create (class C00001101)) (create (class C0000110))))
(defclass C000011100 () ())
(defmethod f ((x C000011100) (y C000011100)) nil)
(defclass C000011101 () ())
(defmethod f ((x C000011101) (y C000011101)) nil)
(defclass C00001110 (C000011100 C000011101) ())
(defmethod f ((x C000011101) (y C000011100))
                 (format (standard-output) "call with ~A ~A~%" 'C000011101 'C000011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000011100) (y C000011101))
                 (format (standard-output) "call with ~A ~A~%" 'C000011100 'C000011101)
                 (f (create (class C000011101)) (create (class C00001110))))
(defclass C000011110 () ())
(defmethod f ((x C000011110) (y C000011110)) nil)
(defclass C000011111 () ())
(defmethod f ((x C000011111) (y C000011111)) nil)
(defclass C00001111 (C000011110 C000011111) ())
(defmethod f ((x C000011111) (y C000011110))
                 (format (standard-output) "call with ~A ~A~%" 'C000011111 'C000011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000011110) (y C000011111))
                 (format (standard-output) "call with ~A ~A~%" 'C000011110 'C000011111)
                 (f (create (class C000011111)) (create (class C00001111))))
(defclass C0000111 (C00001110 C00001111) ())
(defmethod f ((x C00001111) (y C00001110))
                 (format (standard-output) "call with ~A ~A~%" 'C00001111 'C00001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00001110) (y C00001111))
                 (format (standard-output) "call with ~A ~A~%" 'C00001110 'C00001111)
                 (f (create (class C00001111)) (create (class C0000111))))
(defclass C000011 (C0000110 C0000111) ())
(defmethod f ((x C0000111) (y C0000110))
                 (format (standard-output) "call with ~A ~A~%" 'C0000111 'C0000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000110) (y C0000111))
                 (format (standard-output) "call with ~A ~A~%" 'C0000110 'C0000111)
                 (f (create (class C0000111)) (create (class C000011))))
(defclass C00001 (C000010 C000011) ())
(defmethod f ((x C000011) (y C000010))
                 (format (standard-output) "call with ~A ~A~%" 'C000011 'C000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010) (y C000011))
                 (format (standard-output) "call with ~A ~A~%" 'C000010 'C000011)
                 (f (create (class C000011)) (create (class C00001))))
(defclass C0000 (C00000 C00001) ())
(defmethod f ((x C00001) (y C00000))
                 (format (standard-output) "call with ~A ~A~%" 'C00001 'C00000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000) (y C00001))
                 (format (standard-output) "call with ~A ~A~%" 'C00000 'C00001)
                 (f (create (class C00001)) (create (class C0000))))
(defclass C000100000 () ())
(defmethod f ((x C000100000) (y C000100000)) nil)
(defclass C000100001 () ())
(defmethod f ((x C000100001) (y C000100001)) nil)
(defclass C00010000 (C000100000 C000100001) ())
(defmethod f ((x C000100001) (y C000100000))
                 (format (standard-output) "call with ~A ~A~%" 'C000100001 'C000100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100000) (y C000100001))
                 (format (standard-output) "call with ~A ~A~%" 'C000100000 'C000100001)
                 (f (create (class C000100001)) (create (class C00010000))))
(defclass C000100010 () ())
(defmethod f ((x C000100010) (y C000100010)) nil)
(defclass C000100011 () ())
(defmethod f ((x C000100011) (y C000100011)) nil)
(defclass C00010001 (C000100010 C000100011) ())
(defmethod f ((x C000100011) (y C000100010))
                 (format (standard-output) "call with ~A ~A~%" 'C000100011 'C000100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100010) (y C000100011))
                 (format (standard-output) "call with ~A ~A~%" 'C000100010 'C000100011)
                 (f (create (class C000100011)) (create (class C00010001))))
(defclass C0001000 (C00010000 C00010001) ())
(defmethod f ((x C00010001) (y C00010000))
                 (format (standard-output) "call with ~A ~A~%" 'C00010001 'C00010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010000) (y C00010001))
                 (format (standard-output) "call with ~A ~A~%" 'C00010000 'C00010001)
                 (f (create (class C00010001)) (create (class C0001000))))
(defclass C000100100 () ())
(defmethod f ((x C000100100) (y C000100100)) nil)
(defclass C000100101 () ())
(defmethod f ((x C000100101) (y C000100101)) nil)
(defclass C00010010 (C000100100 C000100101) ())
(defmethod f ((x C000100101) (y C000100100))
                 (format (standard-output) "call with ~A ~A~%" 'C000100101 'C000100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100100) (y C000100101))
                 (format (standard-output) "call with ~A ~A~%" 'C000100100 'C000100101)
                 (f (create (class C000100101)) (create (class C00010010))))
(defclass C000100110 () ())
(defmethod f ((x C000100110) (y C000100110)) nil)
(defclass C000100111 () ())
(defmethod f ((x C000100111) (y C000100111)) nil)
(defclass C00010011 (C000100110 C000100111) ())
(defmethod f ((x C000100111) (y C000100110))
                 (format (standard-output) "call with ~A ~A~%" 'C000100111 'C000100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100110) (y C000100111))
                 (format (standard-output) "call with ~A ~A~%" 'C000100110 'C000100111)
                 (f (create (class C000100111)) (create (class C00010011))))
(defclass C0001001 (C00010010 C00010011) ())
(defmethod f ((x C00010011) (y C00010010))
                 (format (standard-output) "call with ~A ~A~%" 'C00010011 'C00010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010010) (y C00010011))
                 (format (standard-output) "call with ~A ~A~%" 'C00010010 'C00010011)
                 (f (create (class C00010011)) (create (class C0001001))))
(defclass C000100 (C0001000 C0001001) ())
(defmethod f ((x C0001001) (y C0001000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001001 'C0001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001000) (y C0001001))
                 (format (standard-output) "call with ~A ~A~%" 'C0001000 'C0001001)
                 (f (create (class C0001001)) (create (class C000100))))
(defclass C000101000 () ())
(defmethod f ((x C000101000) (y C000101000)) nil)
(defclass C000101001 () ())
(defmethod f ((x C000101001) (y C000101001)) nil)
(defclass C00010100 (C000101000 C000101001) ())
(defmethod f ((x C000101001) (y C000101000))
                 (format (standard-output) "call with ~A ~A~%" 'C000101001 'C000101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000101000) (y C000101001))
                 (format (standard-output) "call with ~A ~A~%" 'C000101000 'C000101001)
                 (f (create (class C000101001)) (create (class C00010100))))
(defclass C000101010 () ())
(defmethod f ((x C000101010) (y C000101010)) nil)
(defclass C000101011 () ())
(defmethod f ((x C000101011) (y C000101011)) nil)
(defclass C00010101 (C000101010 C000101011) ())
(defmethod f ((x C000101011) (y C000101010))
                 (format (standard-output) "call with ~A ~A~%" 'C000101011 'C000101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000101010) (y C000101011))
                 (format (standard-output) "call with ~A ~A~%" 'C000101010 'C000101011)
                 (f (create (class C000101011)) (create (class C00010101))))
(defclass C0001010 (C00010100 C00010101) ())
(defmethod f ((x C00010101) (y C00010100))
                 (format (standard-output) "call with ~A ~A~%" 'C00010101 'C00010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010100) (y C00010101))
                 (format (standard-output) "call with ~A ~A~%" 'C00010100 'C00010101)
                 (f (create (class C00010101)) (create (class C0001010))))
(defclass C000101100 () ())
(defmethod f ((x C000101100) (y C000101100)) nil)
(defclass C000101101 () ())
(defmethod f ((x C000101101) (y C000101101)) nil)
(defclass C00010110 (C000101100 C000101101) ())
(defmethod f ((x C000101101) (y C000101100))
                 (format (standard-output) "call with ~A ~A~%" 'C000101101 'C000101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000101100) (y C000101101))
                 (format (standard-output) "call with ~A ~A~%" 'C000101100 'C000101101)
                 (f (create (class C000101101)) (create (class C00010110))))
(defclass C000101110 () ())
(defmethod f ((x C000101110) (y C000101110)) nil)
(defclass C000101111 () ())
(defmethod f ((x C000101111) (y C000101111)) nil)
(defclass C00010111 (C000101110 C000101111) ())
(defmethod f ((x C000101111) (y C000101110))
                 (format (standard-output) "call with ~A ~A~%" 'C000101111 'C000101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000101110) (y C000101111))
                 (format (standard-output) "call with ~A ~A~%" 'C000101110 'C000101111)
                 (f (create (class C000101111)) (create (class C00010111))))
(defclass C0001011 (C00010110 C00010111) ())
(defmethod f ((x C00010111) (y C00010110))
                 (format (standard-output) "call with ~A ~A~%" 'C00010111 'C00010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010110) (y C00010111))
                 (format (standard-output) "call with ~A ~A~%" 'C00010110 'C00010111)
                 (f (create (class C00010111)) (create (class C0001011))))
(defclass C000101 (C0001010 C0001011) ())
(defmethod f ((x C0001011) (y C0001010))
                 (format (standard-output) "call with ~A ~A~%" 'C0001011 'C0001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001010) (y C0001011))
                 (format (standard-output) "call with ~A ~A~%" 'C0001010 'C0001011)
                 (f (create (class C0001011)) (create (class C000101))))
(defclass C00010 (C000100 C000101) ())
(defmethod f ((x C000101) (y C000100))
                 (format (standard-output) "call with ~A ~A~%" 'C000101 'C000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100) (y C000101))
                 (format (standard-output) "call with ~A ~A~%" 'C000100 'C000101)
                 (f (create (class C000101)) (create (class C00010))))
(defclass C000110000 () ())
(defmethod f ((x C000110000) (y C000110000)) nil)
(defclass C000110001 () ())
(defmethod f ((x C000110001) (y C000110001)) nil)
(defclass C00011000 (C000110000 C000110001) ())
(defmethod f ((x C000110001) (y C000110000))
                 (format (standard-output) "call with ~A ~A~%" 'C000110001 'C000110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110000) (y C000110001))
                 (format (standard-output) "call with ~A ~A~%" 'C000110000 'C000110001)
                 (f (create (class C000110001)) (create (class C00011000))))
(defclass C000110010 () ())
(defmethod f ((x C000110010) (y C000110010)) nil)
(defclass C000110011 () ())
(defmethod f ((x C000110011) (y C000110011)) nil)
(defclass C00011001 (C000110010 C000110011) ())
(defmethod f ((x C000110011) (y C000110010))
                 (format (standard-output) "call with ~A ~A~%" 'C000110011 'C000110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110010) (y C000110011))
                 (format (standard-output) "call with ~A ~A~%" 'C000110010 'C000110011)
                 (f (create (class C000110011)) (create (class C00011001))))
(defclass C0001100 (C00011000 C00011001) ())
(defmethod f ((x C00011001) (y C00011000))
                 (format (standard-output) "call with ~A ~A~%" 'C00011001 'C00011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011000) (y C00011001))
                 (format (standard-output) "call with ~A ~A~%" 'C00011000 'C00011001)
                 (f (create (class C00011001)) (create (class C0001100))))
(defclass C000110100 () ())
(defmethod f ((x C000110100) (y C000110100)) nil)
(defclass C000110101 () ())
(defmethod f ((x C000110101) (y C000110101)) nil)
(defclass C00011010 (C000110100 C000110101) ())
(defmethod f ((x C000110101) (y C000110100))
                 (format (standard-output) "call with ~A ~A~%" 'C000110101 'C000110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110100) (y C000110101))
                 (format (standard-output) "call with ~A ~A~%" 'C000110100 'C000110101)
                 (f (create (class C000110101)) (create (class C00011010))))
(defclass C000110110 () ())
(defmethod f ((x C000110110) (y C000110110)) nil)
(defclass C000110111 () ())
(defmethod f ((x C000110111) (y C000110111)) nil)
(defclass C00011011 (C000110110 C000110111) ())
(defmethod f ((x C000110111) (y C000110110))
                 (format (standard-output) "call with ~A ~A~%" 'C000110111 'C000110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110110) (y C000110111))
                 (format (standard-output) "call with ~A ~A~%" 'C000110110 'C000110111)
                 (f (create (class C000110111)) (create (class C00011011))))
(defclass C0001101 (C00011010 C00011011) ())
(defmethod f ((x C00011011) (y C00011010))
                 (format (standard-output) "call with ~A ~A~%" 'C00011011 'C00011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011010) (y C00011011))
                 (format (standard-output) "call with ~A ~A~%" 'C00011010 'C00011011)
                 (f (create (class C00011011)) (create (class C0001101))))
(defclass C000110 (C0001100 C0001101) ())
(defmethod f ((x C0001101) (y C0001100))
                 (format (standard-output) "call with ~A ~A~%" 'C0001101 'C0001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001100) (y C0001101))
                 (format (standard-output) "call with ~A ~A~%" 'C0001100 'C0001101)
                 (f (create (class C0001101)) (create (class C000110))))
(defclass C000111000 () ())
(defmethod f ((x C000111000) (y C000111000)) nil)
(defclass C000111001 () ())
(defmethod f ((x C000111001) (y C000111001)) nil)
(defclass C00011100 (C000111000 C000111001) ())
(defmethod f ((x C000111001) (y C000111000))
                 (format (standard-output) "call with ~A ~A~%" 'C000111001 'C000111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000111000) (y C000111001))
                 (format (standard-output) "call with ~A ~A~%" 'C000111000 'C000111001)
                 (f (create (class C000111001)) (create (class C00011100))))
(defclass C000111010 () ())
(defmethod f ((x C000111010) (y C000111010)) nil)
(defclass C000111011 () ())
(defmethod f ((x C000111011) (y C000111011)) nil)
(defclass C00011101 (C000111010 C000111011) ())
(defmethod f ((x C000111011) (y C000111010))
                 (format (standard-output) "call with ~A ~A~%" 'C000111011 'C000111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000111010) (y C000111011))
                 (format (standard-output) "call with ~A ~A~%" 'C000111010 'C000111011)
                 (f (create (class C000111011)) (create (class C00011101))))
(defclass C0001110 (C00011100 C00011101) ())
(defmethod f ((x C00011101) (y C00011100))
                 (format (standard-output) "call with ~A ~A~%" 'C00011101 'C00011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011100) (y C00011101))
                 (format (standard-output) "call with ~A ~A~%" 'C00011100 'C00011101)
                 (f (create (class C00011101)) (create (class C0001110))))
(defclass C000111100 () ())
(defmethod f ((x C000111100) (y C000111100)) nil)
(defclass C000111101 () ())
(defmethod f ((x C000111101) (y C000111101)) nil)
(defclass C00011110 (C000111100 C000111101) ())
(defmethod f ((x C000111101) (y C000111100))
                 (format (standard-output) "call with ~A ~A~%" 'C000111101 'C000111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000111100) (y C000111101))
                 (format (standard-output) "call with ~A ~A~%" 'C000111100 'C000111101)
                 (f (create (class C000111101)) (create (class C00011110))))
(defclass C000111110 () ())
(defmethod f ((x C000111110) (y C000111110)) nil)
(defclass C000111111 () ())
(defmethod f ((x C000111111) (y C000111111)) nil)
(defclass C00011111 (C000111110 C000111111) ())
(defmethod f ((x C000111111) (y C000111110))
                 (format (standard-output) "call with ~A ~A~%" 'C000111111 'C000111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000111110) (y C000111111))
                 (format (standard-output) "call with ~A ~A~%" 'C000111110 'C000111111)
                 (f (create (class C000111111)) (create (class C00011111))))
(defclass C0001111 (C00011110 C00011111) ())
(defmethod f ((x C00011111) (y C00011110))
                 (format (standard-output) "call with ~A ~A~%" 'C00011111 'C00011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00011110) (y C00011111))
                 (format (standard-output) "call with ~A ~A~%" 'C00011110 'C00011111)
                 (f (create (class C00011111)) (create (class C0001111))))
(defclass C000111 (C0001110 C0001111) ())
(defmethod f ((x C0001111) (y C0001110))
                 (format (standard-output) "call with ~A ~A~%" 'C0001111 'C0001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0001110) (y C0001111))
                 (format (standard-output) "call with ~A ~A~%" 'C0001110 'C0001111)
                 (f (create (class C0001111)) (create (class C000111))))
(defclass C00011 (C000110 C000111) ())
(defmethod f ((x C000111) (y C000110))
                 (format (standard-output) "call with ~A ~A~%" 'C000111 'C000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110) (y C000111))
                 (format (standard-output) "call with ~A ~A~%" 'C000110 'C000111)
                 (f (create (class C000111)) (create (class C00011))))
(defclass C0001 (C00010 C00011) ())
(defmethod f ((x C00011) (y C00010))
                 (format (standard-output) "call with ~A ~A~%" 'C00011 'C00010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010) (y C00011))
                 (format (standard-output) "call with ~A ~A~%" 'C00010 'C00011)
                 (f (create (class C00011)) (create (class C0001))))
(defclass C000 (C0000 C0001) ())
(defmethod f ((x C0001) (y C0000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001 'C0000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000) (y C0001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000 'C0001)
                 (f (create (class C0001)) (create (class C000))))
(defclass C001000000 () ())
(defmethod f ((x C001000000) (y C001000000)) nil)
(defclass C001000001 () ())
(defmethod f ((x C001000001) (y C001000001)) nil)
(defclass C00100000 (C001000000 C001000001) ())
(defmethod f ((x C001000001) (y C001000000))
                 (format (standard-output) "call with ~A ~A~%" 'C001000001 'C001000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000000) (y C001000001))
                 (format (standard-output) "call with ~A ~A~%" 'C001000000 'C001000001)
                 (f (create (class C001000001)) (create (class C00100000))))
(defclass C001000010 () ())
(defmethod f ((x C001000010) (y C001000010)) nil)
(defclass C001000011 () ())
(defmethod f ((x C001000011) (y C001000011)) nil)
(defclass C00100001 (C001000010 C001000011) ())
(defmethod f ((x C001000011) (y C001000010))
                 (format (standard-output) "call with ~A ~A~%" 'C001000011 'C001000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000010) (y C001000011))
                 (format (standard-output) "call with ~A ~A~%" 'C001000010 'C001000011)
                 (f (create (class C001000011)) (create (class C00100001))))
(defclass C0010000 (C00100000 C00100001) ())
(defmethod f ((x C00100001) (y C00100000))
                 (format (standard-output) "call with ~A ~A~%" 'C00100001 'C00100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100000) (y C00100001))
                 (format (standard-output) "call with ~A ~A~%" 'C00100000 'C00100001)
                 (f (create (class C00100001)) (create (class C0010000))))
(defclass C001000100 () ())
(defmethod f ((x C001000100) (y C001000100)) nil)
(defclass C001000101 () ())
(defmethod f ((x C001000101) (y C001000101)) nil)
(defclass C00100010 (C001000100 C001000101) ())
(defmethod f ((x C001000101) (y C001000100))
                 (format (standard-output) "call with ~A ~A~%" 'C001000101 'C001000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000100) (y C001000101))
                 (format (standard-output) "call with ~A ~A~%" 'C001000100 'C001000101)
                 (f (create (class C001000101)) (create (class C00100010))))
(defclass C001000110 () ())
(defmethod f ((x C001000110) (y C001000110)) nil)
(defclass C001000111 () ())
(defmethod f ((x C001000111) (y C001000111)) nil)
(defclass C00100011 (C001000110 C001000111) ())
(defmethod f ((x C001000111) (y C001000110))
                 (format (standard-output) "call with ~A ~A~%" 'C001000111 'C001000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000110) (y C001000111))
                 (format (standard-output) "call with ~A ~A~%" 'C001000110 'C001000111)
                 (f (create (class C001000111)) (create (class C00100011))))
(defclass C0010001 (C00100010 C00100011) ())
(defmethod f ((x C00100011) (y C00100010))
                 (format (standard-output) "call with ~A ~A~%" 'C00100011 'C00100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100010) (y C00100011))
                 (format (standard-output) "call with ~A ~A~%" 'C00100010 'C00100011)
                 (f (create (class C00100011)) (create (class C0010001))))
(defclass C001000 (C0010000 C0010001) ())
(defmethod f ((x C0010001) (y C0010000))
                 (format (standard-output) "call with ~A ~A~%" 'C0010001 'C0010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010000) (y C0010001))
                 (format (standard-output) "call with ~A ~A~%" 'C0010000 'C0010001)
                 (f (create (class C0010001)) (create (class C001000))))
(defclass C001001000 () ())
(defmethod f ((x C001001000) (y C001001000)) nil)
(defclass C001001001 () ())
(defmethod f ((x C001001001) (y C001001001)) nil)
(defclass C00100100 (C001001000 C001001001) ())
(defmethod f ((x C001001001) (y C001001000))
                 (format (standard-output) "call with ~A ~A~%" 'C001001001 'C001001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001001000) (y C001001001))
                 (format (standard-output) "call with ~A ~A~%" 'C001001000 'C001001001)
                 (f (create (class C001001001)) (create (class C00100100))))
(defclass C001001010 () ())
(defmethod f ((x C001001010) (y C001001010)) nil)
(defclass C001001011 () ())
(defmethod f ((x C001001011) (y C001001011)) nil)
(defclass C00100101 (C001001010 C001001011) ())
(defmethod f ((x C001001011) (y C001001010))
                 (format (standard-output) "call with ~A ~A~%" 'C001001011 'C001001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001001010) (y C001001011))
                 (format (standard-output) "call with ~A ~A~%" 'C001001010 'C001001011)
                 (f (create (class C001001011)) (create (class C00100101))))
(defclass C0010010 (C00100100 C00100101) ())
(defmethod f ((x C00100101) (y C00100100))
                 (format (standard-output) "call with ~A ~A~%" 'C00100101 'C00100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100100) (y C00100101))
                 (format (standard-output) "call with ~A ~A~%" 'C00100100 'C00100101)
                 (f (create (class C00100101)) (create (class C0010010))))
(defclass C001001100 () ())
(defmethod f ((x C001001100) (y C001001100)) nil)
(defclass C001001101 () ())
(defmethod f ((x C001001101) (y C001001101)) nil)
(defclass C00100110 (C001001100 C001001101) ())
(defmethod f ((x C001001101) (y C001001100))
                 (format (standard-output) "call with ~A ~A~%" 'C001001101 'C001001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001001100) (y C001001101))
                 (format (standard-output) "call with ~A ~A~%" 'C001001100 'C001001101)
                 (f (create (class C001001101)) (create (class C00100110))))
(defclass C001001110 () ())
(defmethod f ((x C001001110) (y C001001110)) nil)
(defclass C001001111 () ())
(defmethod f ((x C001001111) (y C001001111)) nil)
(defclass C00100111 (C001001110 C001001111) ())
(defmethod f ((x C001001111) (y C001001110))
                 (format (standard-output) "call with ~A ~A~%" 'C001001111 'C001001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001001110) (y C001001111))
                 (format (standard-output) "call with ~A ~A~%" 'C001001110 'C001001111)
                 (f (create (class C001001111)) (create (class C00100111))))
(defclass C0010011 (C00100110 C00100111) ())
(defmethod f ((x C00100111) (y C00100110))
                 (format (standard-output) "call with ~A ~A~%" 'C00100111 'C00100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100110) (y C00100111))
                 (format (standard-output) "call with ~A ~A~%" 'C00100110 'C00100111)
                 (f (create (class C00100111)) (create (class C0010011))))
(defclass C001001 (C0010010 C0010011) ())
(defmethod f ((x C0010011) (y C0010010))
                 (format (standard-output) "call with ~A ~A~%" 'C0010011 'C0010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010010) (y C0010011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010010 'C0010011)
                 (f (create (class C0010011)) (create (class C001001))))
(defclass C00100 (C001000 C001001) ())
(defmethod f ((x C001001) (y C001000))
                 (format (standard-output) "call with ~A ~A~%" 'C001001 'C001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000) (y C001001))
                 (format (standard-output) "call with ~A ~A~%" 'C001000 'C001001)
                 (f (create (class C001001)) (create (class C00100))))
(defclass C001010000 () ())
(defmethod f ((x C001010000) (y C001010000)) nil)
(defclass C001010001 () ())
(defmethod f ((x C001010001) (y C001010001)) nil)
(defclass C00101000 (C001010000 C001010001) ())
(defmethod f ((x C001010001) (y C001010000))
                 (format (standard-output) "call with ~A ~A~%" 'C001010001 'C001010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010000) (y C001010001))
                 (format (standard-output) "call with ~A ~A~%" 'C001010000 'C001010001)
                 (f (create (class C001010001)) (create (class C00101000))))
(defclass C001010010 () ())
(defmethod f ((x C001010010) (y C001010010)) nil)
(defclass C001010011 () ())
(defmethod f ((x C001010011) (y C001010011)) nil)
(defclass C00101001 (C001010010 C001010011) ())
(defmethod f ((x C001010011) (y C001010010))
                 (format (standard-output) "call with ~A ~A~%" 'C001010011 'C001010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010010) (y C001010011))
                 (format (standard-output) "call with ~A ~A~%" 'C001010010 'C001010011)
                 (f (create (class C001010011)) (create (class C00101001))))
(defclass C0010100 (C00101000 C00101001) ())
(defmethod f ((x C00101001) (y C00101000))
                 (format (standard-output) "call with ~A ~A~%" 'C00101001 'C00101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101000) (y C00101001))
                 (format (standard-output) "call with ~A ~A~%" 'C00101000 'C00101001)
                 (f (create (class C00101001)) (create (class C0010100))))
(defclass C001010100 () ())
(defmethod f ((x C001010100) (y C001010100)) nil)
(defclass C001010101 () ())
(defmethod f ((x C001010101) (y C001010101)) nil)
(defclass C00101010 (C001010100 C001010101) ())
(defmethod f ((x C001010101) (y C001010100))
                 (format (standard-output) "call with ~A ~A~%" 'C001010101 'C001010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010100) (y C001010101))
                 (format (standard-output) "call with ~A ~A~%" 'C001010100 'C001010101)
                 (f (create (class C001010101)) (create (class C00101010))))
(defclass C001010110 () ())
(defmethod f ((x C001010110) (y C001010110)) nil)
(defclass C001010111 () ())
(defmethod f ((x C001010111) (y C001010111)) nil)
(defclass C00101011 (C001010110 C001010111) ())
(defmethod f ((x C001010111) (y C001010110))
                 (format (standard-output) "call with ~A ~A~%" 'C001010111 'C001010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010110) (y C001010111))
                 (format (standard-output) "call with ~A ~A~%" 'C001010110 'C001010111)
                 (f (create (class C001010111)) (create (class C00101011))))
(defclass C0010101 (C00101010 C00101011) ())
(defmethod f ((x C00101011) (y C00101010))
                 (format (standard-output) "call with ~A ~A~%" 'C00101011 'C00101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101010) (y C00101011))
                 (format (standard-output) "call with ~A ~A~%" 'C00101010 'C00101011)
                 (f (create (class C00101011)) (create (class C0010101))))
(defclass C001010 (C0010100 C0010101) ())
(defmethod f ((x C0010101) (y C0010100))
                 (format (standard-output) "call with ~A ~A~%" 'C0010101 'C0010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010100) (y C0010101))
                 (format (standard-output) "call with ~A ~A~%" 'C0010100 'C0010101)
                 (f (create (class C0010101)) (create (class C001010))))
(defclass C001011000 () ())
(defmethod f ((x C001011000) (y C001011000)) nil)
(defclass C001011001 () ())
(defmethod f ((x C001011001) (y C001011001)) nil)
(defclass C00101100 (C001011000 C001011001) ())
(defmethod f ((x C001011001) (y C001011000))
                 (format (standard-output) "call with ~A ~A~%" 'C001011001 'C001011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001011000) (y C001011001))
                 (format (standard-output) "call with ~A ~A~%" 'C001011000 'C001011001)
                 (f (create (class C001011001)) (create (class C00101100))))
(defclass C001011010 () ())
(defmethod f ((x C001011010) (y C001011010)) nil)
(defclass C001011011 () ())
(defmethod f ((x C001011011) (y C001011011)) nil)
(defclass C00101101 (C001011010 C001011011) ())
(defmethod f ((x C001011011) (y C001011010))
                 (format (standard-output) "call with ~A ~A~%" 'C001011011 'C001011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001011010) (y C001011011))
                 (format (standard-output) "call with ~A ~A~%" 'C001011010 'C001011011)
                 (f (create (class C001011011)) (create (class C00101101))))
(defclass C0010110 (C00101100 C00101101) ())
(defmethod f ((x C00101101) (y C00101100))
                 (format (standard-output) "call with ~A ~A~%" 'C00101101 'C00101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101100) (y C00101101))
                 (format (standard-output) "call with ~A ~A~%" 'C00101100 'C00101101)
                 (f (create (class C00101101)) (create (class C0010110))))
(defclass C001011100 () ())
(defmethod f ((x C001011100) (y C001011100)) nil)
(defclass C001011101 () ())
(defmethod f ((x C001011101) (y C001011101)) nil)
(defclass C00101110 (C001011100 C001011101) ())
(defmethod f ((x C001011101) (y C001011100))
                 (format (standard-output) "call with ~A ~A~%" 'C001011101 'C001011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001011100) (y C001011101))
                 (format (standard-output) "call with ~A ~A~%" 'C001011100 'C001011101)
                 (f (create (class C001011101)) (create (class C00101110))))
(defclass C001011110 () ())
(defmethod f ((x C001011110) (y C001011110)) nil)
(defclass C001011111 () ())
(defmethod f ((x C001011111) (y C001011111)) nil)
(defclass C00101111 (C001011110 C001011111) ())
(defmethod f ((x C001011111) (y C001011110))
                 (format (standard-output) "call with ~A ~A~%" 'C001011111 'C001011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001011110) (y C001011111))
                 (format (standard-output) "call with ~A ~A~%" 'C001011110 'C001011111)
                 (f (create (class C001011111)) (create (class C00101111))))
(defclass C0010111 (C00101110 C00101111) ())
(defmethod f ((x C00101111) (y C00101110))
                 (format (standard-output) "call with ~A ~A~%" 'C00101111 'C00101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00101110) (y C00101111))
                 (format (standard-output) "call with ~A ~A~%" 'C00101110 'C00101111)
                 (f (create (class C00101111)) (create (class C0010111))))
(defclass C001011 (C0010110 C0010111) ())
(defmethod f ((x C0010111) (y C0010110))
                 (format (standard-output) "call with ~A ~A~%" 'C0010111 'C0010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010110) (y C0010111))
                 (format (standard-output) "call with ~A ~A~%" 'C0010110 'C0010111)
                 (f (create (class C0010111)) (create (class C001011))))
(defclass C00101 (C001010 C001011) ())
(defmethod f ((x C001011) (y C001010))
                 (format (standard-output) "call with ~A ~A~%" 'C001011 'C001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010) (y C001011))
                 (format (standard-output) "call with ~A ~A~%" 'C001010 'C001011)
                 (f (create (class C001011)) (create (class C00101))))
(defclass C0010 (C00100 C00101) ())
(defmethod f ((x C00101) (y C00100))
                 (format (standard-output) "call with ~A ~A~%" 'C00101 'C00100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100) (y C00101))
                 (format (standard-output) "call with ~A ~A~%" 'C00100 'C00101)
                 (f (create (class C00101)) (create (class C0010))))
(defclass C001100000 () ())
(defmethod f ((x C001100000) (y C001100000)) nil)
(defclass C001100001 () ())
(defmethod f ((x C001100001) (y C001100001)) nil)
(defclass C00110000 (C001100000 C001100001) ())
(defmethod f ((x C001100001) (y C001100000))
                 (format (standard-output) "call with ~A ~A~%" 'C001100001 'C001100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100000) (y C001100001))
                 (format (standard-output) "call with ~A ~A~%" 'C001100000 'C001100001)
                 (f (create (class C001100001)) (create (class C00110000))))
(defclass C001100010 () ())
(defmethod f ((x C001100010) (y C001100010)) nil)
(defclass C001100011 () ())
(defmethod f ((x C001100011) (y C001100011)) nil)
(defclass C00110001 (C001100010 C001100011) ())
(defmethod f ((x C001100011) (y C001100010))
                 (format (standard-output) "call with ~A ~A~%" 'C001100011 'C001100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100010) (y C001100011))
                 (format (standard-output) "call with ~A ~A~%" 'C001100010 'C001100011)
                 (f (create (class C001100011)) (create (class C00110001))))
(defclass C0011000 (C00110000 C00110001) ())
(defmethod f ((x C00110001) (y C00110000))
                 (format (standard-output) "call with ~A ~A~%" 'C00110001 'C00110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110000) (y C00110001))
                 (format (standard-output) "call with ~A ~A~%" 'C00110000 'C00110001)
                 (f (create (class C00110001)) (create (class C0011000))))
(defclass C001100100 () ())
(defmethod f ((x C001100100) (y C001100100)) nil)
(defclass C001100101 () ())
(defmethod f ((x C001100101) (y C001100101)) nil)
(defclass C00110010 (C001100100 C001100101) ())
(defmethod f ((x C001100101) (y C001100100))
                 (format (standard-output) "call with ~A ~A~%" 'C001100101 'C001100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100100) (y C001100101))
                 (format (standard-output) "call with ~A ~A~%" 'C001100100 'C001100101)
                 (f (create (class C001100101)) (create (class C00110010))))
(defclass C001100110 () ())
(defmethod f ((x C001100110) (y C001100110)) nil)
(defclass C001100111 () ())
(defmethod f ((x C001100111) (y C001100111)) nil)
(defclass C00110011 (C001100110 C001100111) ())
(defmethod f ((x C001100111) (y C001100110))
                 (format (standard-output) "call with ~A ~A~%" 'C001100111 'C001100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100110) (y C001100111))
                 (format (standard-output) "call with ~A ~A~%" 'C001100110 'C001100111)
                 (f (create (class C001100111)) (create (class C00110011))))
(defclass C0011001 (C00110010 C00110011) ())
(defmethod f ((x C00110011) (y C00110010))
                 (format (standard-output) "call with ~A ~A~%" 'C00110011 'C00110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110010) (y C00110011))
                 (format (standard-output) "call with ~A ~A~%" 'C00110010 'C00110011)
                 (f (create (class C00110011)) (create (class C0011001))))
(defclass C001100 (C0011000 C0011001) ())
(defmethod f ((x C0011001) (y C0011000))
                 (format (standard-output) "call with ~A ~A~%" 'C0011001 'C0011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011000) (y C0011001))
                 (format (standard-output) "call with ~A ~A~%" 'C0011000 'C0011001)
                 (f (create (class C0011001)) (create (class C001100))))
(defclass C001101000 () ())
(defmethod f ((x C001101000) (y C001101000)) nil)
(defclass C001101001 () ())
(defmethod f ((x C001101001) (y C001101001)) nil)
(defclass C00110100 (C001101000 C001101001) ())
(defmethod f ((x C001101001) (y C001101000))
                 (format (standard-output) "call with ~A ~A~%" 'C001101001 'C001101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001101000) (y C001101001))
                 (format (standard-output) "call with ~A ~A~%" 'C001101000 'C001101001)
                 (f (create (class C001101001)) (create (class C00110100))))
(defclass C001101010 () ())
(defmethod f ((x C001101010) (y C001101010)) nil)
(defclass C001101011 () ())
(defmethod f ((x C001101011) (y C001101011)) nil)
(defclass C00110101 (C001101010 C001101011) ())
(defmethod f ((x C001101011) (y C001101010))
                 (format (standard-output) "call with ~A ~A~%" 'C001101011 'C001101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001101010) (y C001101011))
                 (format (standard-output) "call with ~A ~A~%" 'C001101010 'C001101011)
                 (f (create (class C001101011)) (create (class C00110101))))
(defclass C0011010 (C00110100 C00110101) ())
(defmethod f ((x C00110101) (y C00110100))
                 (format (standard-output) "call with ~A ~A~%" 'C00110101 'C00110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110100) (y C00110101))
                 (format (standard-output) "call with ~A ~A~%" 'C00110100 'C00110101)
                 (f (create (class C00110101)) (create (class C0011010))))
(defclass C001101100 () ())
(defmethod f ((x C001101100) (y C001101100)) nil)
(defclass C001101101 () ())
(defmethod f ((x C001101101) (y C001101101)) nil)
(defclass C00110110 (C001101100 C001101101) ())
(defmethod f ((x C001101101) (y C001101100))
                 (format (standard-output) "call with ~A ~A~%" 'C001101101 'C001101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001101100) (y C001101101))
                 (format (standard-output) "call with ~A ~A~%" 'C001101100 'C001101101)
                 (f (create (class C001101101)) (create (class C00110110))))
(defclass C001101110 () ())
(defmethod f ((x C001101110) (y C001101110)) nil)
(defclass C001101111 () ())
(defmethod f ((x C001101111) (y C001101111)) nil)
(defclass C00110111 (C001101110 C001101111) ())
(defmethod f ((x C001101111) (y C001101110))
                 (format (standard-output) "call with ~A ~A~%" 'C001101111 'C001101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001101110) (y C001101111))
                 (format (standard-output) "call with ~A ~A~%" 'C001101110 'C001101111)
                 (f (create (class C001101111)) (create (class C00110111))))
(defclass C0011011 (C00110110 C00110111) ())
(defmethod f ((x C00110111) (y C00110110))
                 (format (standard-output) "call with ~A ~A~%" 'C00110111 'C00110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110110) (y C00110111))
                 (format (standard-output) "call with ~A ~A~%" 'C00110110 'C00110111)
                 (f (create (class C00110111)) (create (class C0011011))))
(defclass C001101 (C0011010 C0011011) ())
(defmethod f ((x C0011011) (y C0011010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011011 'C0011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011010) (y C0011011))
                 (format (standard-output) "call with ~A ~A~%" 'C0011010 'C0011011)
                 (f (create (class C0011011)) (create (class C001101))))
(defclass C00110 (C001100 C001101) ())
(defmethod f ((x C001101) (y C001100))
                 (format (standard-output) "call with ~A ~A~%" 'C001101 'C001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100) (y C001101))
                 (format (standard-output) "call with ~A ~A~%" 'C001100 'C001101)
                 (f (create (class C001101)) (create (class C00110))))
(defclass C001110000 () ())
(defmethod f ((x C001110000) (y C001110000)) nil)
(defclass C001110001 () ())
(defmethod f ((x C001110001) (y C001110001)) nil)
(defclass C00111000 (C001110000 C001110001) ())
(defmethod f ((x C001110001) (y C001110000))
                 (format (standard-output) "call with ~A ~A~%" 'C001110001 'C001110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110000) (y C001110001))
                 (format (standard-output) "call with ~A ~A~%" 'C001110000 'C001110001)
                 (f (create (class C001110001)) (create (class C00111000))))
(defclass C001110010 () ())
(defmethod f ((x C001110010) (y C001110010)) nil)
(defclass C001110011 () ())
(defmethod f ((x C001110011) (y C001110011)) nil)
(defclass C00111001 (C001110010 C001110011) ())
(defmethod f ((x C001110011) (y C001110010))
                 (format (standard-output) "call with ~A ~A~%" 'C001110011 'C001110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110010) (y C001110011))
                 (format (standard-output) "call with ~A ~A~%" 'C001110010 'C001110011)
                 (f (create (class C001110011)) (create (class C00111001))))
(defclass C0011100 (C00111000 C00111001) ())
(defmethod f ((x C00111001) (y C00111000))
                 (format (standard-output) "call with ~A ~A~%" 'C00111001 'C00111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111000) (y C00111001))
                 (format (standard-output) "call with ~A ~A~%" 'C00111000 'C00111001)
                 (f (create (class C00111001)) (create (class C0011100))))
(defclass C001110100 () ())
(defmethod f ((x C001110100) (y C001110100)) nil)
(defclass C001110101 () ())
(defmethod f ((x C001110101) (y C001110101)) nil)
(defclass C00111010 (C001110100 C001110101) ())
(defmethod f ((x C001110101) (y C001110100))
                 (format (standard-output) "call with ~A ~A~%" 'C001110101 'C001110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110100) (y C001110101))
                 (format (standard-output) "call with ~A ~A~%" 'C001110100 'C001110101)
                 (f (create (class C001110101)) (create (class C00111010))))
(defclass C001110110 () ())
(defmethod f ((x C001110110) (y C001110110)) nil)
(defclass C001110111 () ())
(defmethod f ((x C001110111) (y C001110111)) nil)
(defclass C00111011 (C001110110 C001110111) ())
(defmethod f ((x C001110111) (y C001110110))
                 (format (standard-output) "call with ~A ~A~%" 'C001110111 'C001110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110110) (y C001110111))
                 (format (standard-output) "call with ~A ~A~%" 'C001110110 'C001110111)
                 (f (create (class C001110111)) (create (class C00111011))))
(defclass C0011101 (C00111010 C00111011) ())
(defmethod f ((x C00111011) (y C00111010))
                 (format (standard-output) "call with ~A ~A~%" 'C00111011 'C00111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111010) (y C00111011))
                 (format (standard-output) "call with ~A ~A~%" 'C00111010 'C00111011)
                 (f (create (class C00111011)) (create (class C0011101))))
(defclass C001110 (C0011100 C0011101) ())
(defmethod f ((x C0011101) (y C0011100))
                 (format (standard-output) "call with ~A ~A~%" 'C0011101 'C0011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011100) (y C0011101))
                 (format (standard-output) "call with ~A ~A~%" 'C0011100 'C0011101)
                 (f (create (class C0011101)) (create (class C001110))))
(defclass C001111000 () ())
(defmethod f ((x C001111000) (y C001111000)) nil)
(defclass C001111001 () ())
(defmethod f ((x C001111001) (y C001111001)) nil)
(defclass C00111100 (C001111000 C001111001) ())
(defmethod f ((x C001111001) (y C001111000))
                 (format (standard-output) "call with ~A ~A~%" 'C001111001 'C001111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001111000) (y C001111001))
                 (format (standard-output) "call with ~A ~A~%" 'C001111000 'C001111001)
                 (f (create (class C001111001)) (create (class C00111100))))
(defclass C001111010 () ())
(defmethod f ((x C001111010) (y C001111010)) nil)
(defclass C001111011 () ())
(defmethod f ((x C001111011) (y C001111011)) nil)
(defclass C00111101 (C001111010 C001111011) ())
(defmethod f ((x C001111011) (y C001111010))
                 (format (standard-output) "call with ~A ~A~%" 'C001111011 'C001111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001111010) (y C001111011))
                 (format (standard-output) "call with ~A ~A~%" 'C001111010 'C001111011)
                 (f (create (class C001111011)) (create (class C00111101))))
(defclass C0011110 (C00111100 C00111101) ())
(defmethod f ((x C00111101) (y C00111100))
                 (format (standard-output) "call with ~A ~A~%" 'C00111101 'C00111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111100) (y C00111101))
                 (format (standard-output) "call with ~A ~A~%" 'C00111100 'C00111101)
                 (f (create (class C00111101)) (create (class C0011110))))
(defclass C001111100 () ())
(defmethod f ((x C001111100) (y C001111100)) nil)
(defclass C001111101 () ())
(defmethod f ((x C001111101) (y C001111101)) nil)
(defclass C00111110 (C001111100 C001111101) ())
(defmethod f ((x C001111101) (y C001111100))
                 (format (standard-output) "call with ~A ~A~%" 'C001111101 'C001111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001111100) (y C001111101))
                 (format (standard-output) "call with ~A ~A~%" 'C001111100 'C001111101)
                 (f (create (class C001111101)) (create (class C00111110))))
(defclass C001111110 () ())
(defmethod f ((x C001111110) (y C001111110)) nil)
(defclass C001111111 () ())
(defmethod f ((x C001111111) (y C001111111)) nil)
(defclass C00111111 (C001111110 C001111111) ())
(defmethod f ((x C001111111) (y C001111110))
                 (format (standard-output) "call with ~A ~A~%" 'C001111111 'C001111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001111110) (y C001111111))
                 (format (standard-output) "call with ~A ~A~%" 'C001111110 'C001111111)
                 (f (create (class C001111111)) (create (class C00111111))))
(defclass C0011111 (C00111110 C00111111) ())
(defmethod f ((x C00111111) (y C00111110))
                 (format (standard-output) "call with ~A ~A~%" 'C00111111 'C00111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00111110) (y C00111111))
                 (format (standard-output) "call with ~A ~A~%" 'C00111110 'C00111111)
                 (f (create (class C00111111)) (create (class C0011111))))
(defclass C001111 (C0011110 C0011111) ())
(defmethod f ((x C0011111) (y C0011110))
                 (format (standard-output) "call with ~A ~A~%" 'C0011111 'C0011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0011110) (y C0011111))
                 (format (standard-output) "call with ~A ~A~%" 'C0011110 'C0011111)
                 (f (create (class C0011111)) (create (class C001111))))
(defclass C00111 (C001110 C001111) ())
(defmethod f ((x C001111) (y C001110))
                 (format (standard-output) "call with ~A ~A~%" 'C001111 'C001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110) (y C001111))
                 (format (standard-output) "call with ~A ~A~%" 'C001110 'C001111)
                 (f (create (class C001111)) (create (class C00111))))
(defclass C0011 (C00110 C00111) ())
(defmethod f ((x C00111) (y C00110))
                 (format (standard-output) "call with ~A ~A~%" 'C00111 'C00110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110) (y C00111))
                 (format (standard-output) "call with ~A ~A~%" 'C00110 'C00111)
                 (f (create (class C00111)) (create (class C0011))))
(defclass C001 (C0010 C0011) ())
(defmethod f ((x C0011) (y C0010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011 'C0010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010) (y C0011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010 'C0011)
                 (f (create (class C0011)) (create (class C001))))
(defclass C00 (C000 C001) ())
(defmethod f ((x C001) (y C000))
                 (format (standard-output) "call with ~A ~A~%" 'C001 'C000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000) (y C001))
                 (format (standard-output) "call with ~A ~A~%" 'C000 'C001)
                 (f (create (class C001)) (create (class C00))))
(defclass C010000000 () ())
(defmethod f ((x C010000000) (y C010000000)) nil)
(defclass C010000001 () ())
(defmethod f ((x C010000001) (y C010000001)) nil)
(defclass C01000000 (C010000000 C010000001) ())
(defmethod f ((x C010000001) (y C010000000))
                 (format (standard-output) "call with ~A ~A~%" 'C010000001 'C010000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000000) (y C010000001))
                 (format (standard-output) "call with ~A ~A~%" 'C010000000 'C010000001)
                 (f (create (class C010000001)) (create (class C01000000))))
(defclass C010000010 () ())
(defmethod f ((x C010000010) (y C010000010)) nil)
(defclass C010000011 () ())
(defmethod f ((x C010000011) (y C010000011)) nil)
(defclass C01000001 (C010000010 C010000011) ())
(defmethod f ((x C010000011) (y C010000010))
                 (format (standard-output) "call with ~A ~A~%" 'C010000011 'C010000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000010) (y C010000011))
                 (format (standard-output) "call with ~A ~A~%" 'C010000010 'C010000011)
                 (f (create (class C010000011)) (create (class C01000001))))
(defclass C0100000 (C01000000 C01000001) ())
(defmethod f ((x C01000001) (y C01000000))
                 (format (standard-output) "call with ~A ~A~%" 'C01000001 'C01000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000000) (y C01000001))
                 (format (standard-output) "call with ~A ~A~%" 'C01000000 'C01000001)
                 (f (create (class C01000001)) (create (class C0100000))))
(defclass C010000100 () ())
(defmethod f ((x C010000100) (y C010000100)) nil)
(defclass C010000101 () ())
(defmethod f ((x C010000101) (y C010000101)) nil)
(defclass C01000010 (C010000100 C010000101) ())
(defmethod f ((x C010000101) (y C010000100))
                 (format (standard-output) "call with ~A ~A~%" 'C010000101 'C010000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000100) (y C010000101))
                 (format (standard-output) "call with ~A ~A~%" 'C010000100 'C010000101)
                 (f (create (class C010000101)) (create (class C01000010))))
(defclass C010000110 () ())
(defmethod f ((x C010000110) (y C010000110)) nil)
(defclass C010000111 () ())
(defmethod f ((x C010000111) (y C010000111)) nil)
(defclass C01000011 (C010000110 C010000111) ())
(defmethod f ((x C010000111) (y C010000110))
                 (format (standard-output) "call with ~A ~A~%" 'C010000111 'C010000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000110) (y C010000111))
                 (format (standard-output) "call with ~A ~A~%" 'C010000110 'C010000111)
                 (f (create (class C010000111)) (create (class C01000011))))
(defclass C0100001 (C01000010 C01000011) ())
(defmethod f ((x C01000011) (y C01000010))
                 (format (standard-output) "call with ~A ~A~%" 'C01000011 'C01000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000010) (y C01000011))
                 (format (standard-output) "call with ~A ~A~%" 'C01000010 'C01000011)
                 (f (create (class C01000011)) (create (class C0100001))))
(defclass C010000 (C0100000 C0100001) ())
(defmethod f ((x C0100001) (y C0100000))
                 (format (standard-output) "call with ~A ~A~%" 'C0100001 'C0100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100000) (y C0100001))
                 (format (standard-output) "call with ~A ~A~%" 'C0100000 'C0100001)
                 (f (create (class C0100001)) (create (class C010000))))
(defclass C010001000 () ())
(defmethod f ((x C010001000) (y C010001000)) nil)
(defclass C010001001 () ())
(defmethod f ((x C010001001) (y C010001001)) nil)
(defclass C01000100 (C010001000 C010001001) ())
(defmethod f ((x C010001001) (y C010001000))
                 (format (standard-output) "call with ~A ~A~%" 'C010001001 'C010001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010001000) (y C010001001))
                 (format (standard-output) "call with ~A ~A~%" 'C010001000 'C010001001)
                 (f (create (class C010001001)) (create (class C01000100))))
(defclass C010001010 () ())
(defmethod f ((x C010001010) (y C010001010)) nil)
(defclass C010001011 () ())
(defmethod f ((x C010001011) (y C010001011)) nil)
(defclass C01000101 (C010001010 C010001011) ())
(defmethod f ((x C010001011) (y C010001010))
                 (format (standard-output) "call with ~A ~A~%" 'C010001011 'C010001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010001010) (y C010001011))
                 (format (standard-output) "call with ~A ~A~%" 'C010001010 'C010001011)
                 (f (create (class C010001011)) (create (class C01000101))))
(defclass C0100010 (C01000100 C01000101) ())
(defmethod f ((x C01000101) (y C01000100))
                 (format (standard-output) "call with ~A ~A~%" 'C01000101 'C01000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000100) (y C01000101))
                 (format (standard-output) "call with ~A ~A~%" 'C01000100 'C01000101)
                 (f (create (class C01000101)) (create (class C0100010))))
(defclass C010001100 () ())
(defmethod f ((x C010001100) (y C010001100)) nil)
(defclass C010001101 () ())
(defmethod f ((x C010001101) (y C010001101)) nil)
(defclass C01000110 (C010001100 C010001101) ())
(defmethod f ((x C010001101) (y C010001100))
                 (format (standard-output) "call with ~A ~A~%" 'C010001101 'C010001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010001100) (y C010001101))
                 (format (standard-output) "call with ~A ~A~%" 'C010001100 'C010001101)
                 (f (create (class C010001101)) (create (class C01000110))))
(defclass C010001110 () ())
(defmethod f ((x C010001110) (y C010001110)) nil)
(defclass C010001111 () ())
(defmethod f ((x C010001111) (y C010001111)) nil)
(defclass C01000111 (C010001110 C010001111) ())
(defmethod f ((x C010001111) (y C010001110))
                 (format (standard-output) "call with ~A ~A~%" 'C010001111 'C010001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010001110) (y C010001111))
                 (format (standard-output) "call with ~A ~A~%" 'C010001110 'C010001111)
                 (f (create (class C010001111)) (create (class C01000111))))
(defclass C0100011 (C01000110 C01000111) ())
(defmethod f ((x C01000111) (y C01000110))
                 (format (standard-output) "call with ~A ~A~%" 'C01000111 'C01000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000110) (y C01000111))
                 (format (standard-output) "call with ~A ~A~%" 'C01000110 'C01000111)
                 (f (create (class C01000111)) (create (class C0100011))))
(defclass C010001 (C0100010 C0100011) ())
(defmethod f ((x C0100011) (y C0100010))
                 (format (standard-output) "call with ~A ~A~%" 'C0100011 'C0100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100010) (y C0100011))
                 (format (standard-output) "call with ~A ~A~%" 'C0100010 'C0100011)
                 (f (create (class C0100011)) (create (class C010001))))
(defclass C01000 (C010000 C010001) ())
(defmethod f ((x C010001) (y C010000))
                 (format (standard-output) "call with ~A ~A~%" 'C010001 'C010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000) (y C010001))
                 (format (standard-output) "call with ~A ~A~%" 'C010000 'C010001)
                 (f (create (class C010001)) (create (class C01000))))
(defclass C010010000 () ())
(defmethod f ((x C010010000) (y C010010000)) nil)
(defclass C010010001 () ())
(defmethod f ((x C010010001) (y C010010001)) nil)
(defclass C01001000 (C010010000 C010010001) ())
(defmethod f ((x C010010001) (y C010010000))
                 (format (standard-output) "call with ~A ~A~%" 'C010010001 'C010010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010000) (y C010010001))
                 (format (standard-output) "call with ~A ~A~%" 'C010010000 'C010010001)
                 (f (create (class C010010001)) (create (class C01001000))))
(defclass C010010010 () ())
(defmethod f ((x C010010010) (y C010010010)) nil)
(defclass C010010011 () ())
(defmethod f ((x C010010011) (y C010010011)) nil)
(defclass C01001001 (C010010010 C010010011) ())
(defmethod f ((x C010010011) (y C010010010))
                 (format (standard-output) "call with ~A ~A~%" 'C010010011 'C010010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010010) (y C010010011))
                 (format (standard-output) "call with ~A ~A~%" 'C010010010 'C010010011)
                 (f (create (class C010010011)) (create (class C01001001))))
(defclass C0100100 (C01001000 C01001001) ())
(defmethod f ((x C01001001) (y C01001000))
                 (format (standard-output) "call with ~A ~A~%" 'C01001001 'C01001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001000) (y C01001001))
                 (format (standard-output) "call with ~A ~A~%" 'C01001000 'C01001001)
                 (f (create (class C01001001)) (create (class C0100100))))
(defclass C010010100 () ())
(defmethod f ((x C010010100) (y C010010100)) nil)
(defclass C010010101 () ())
(defmethod f ((x C010010101) (y C010010101)) nil)
(defclass C01001010 (C010010100 C010010101) ())
(defmethod f ((x C010010101) (y C010010100))
                 (format (standard-output) "call with ~A ~A~%" 'C010010101 'C010010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010100) (y C010010101))
                 (format (standard-output) "call with ~A ~A~%" 'C010010100 'C010010101)
                 (f (create (class C010010101)) (create (class C01001010))))
(defclass C010010110 () ())
(defmethod f ((x C010010110) (y C010010110)) nil)
(defclass C010010111 () ())
(defmethod f ((x C010010111) (y C010010111)) nil)
(defclass C01001011 (C010010110 C010010111) ())
(defmethod f ((x C010010111) (y C010010110))
                 (format (standard-output) "call with ~A ~A~%" 'C010010111 'C010010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010110) (y C010010111))
                 (format (standard-output) "call with ~A ~A~%" 'C010010110 'C010010111)
                 (f (create (class C010010111)) (create (class C01001011))))
(defclass C0100101 (C01001010 C01001011) ())
(defmethod f ((x C01001011) (y C01001010))
                 (format (standard-output) "call with ~A ~A~%" 'C01001011 'C01001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001010) (y C01001011))
                 (format (standard-output) "call with ~A ~A~%" 'C01001010 'C01001011)
                 (f (create (class C01001011)) (create (class C0100101))))
(defclass C010010 (C0100100 C0100101) ())
(defmethod f ((x C0100101) (y C0100100))
                 (format (standard-output) "call with ~A ~A~%" 'C0100101 'C0100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100100) (y C0100101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100100 'C0100101)
                 (f (create (class C0100101)) (create (class C010010))))
(defclass C010011000 () ())
(defmethod f ((x C010011000) (y C010011000)) nil)
(defclass C010011001 () ())
(defmethod f ((x C010011001) (y C010011001)) nil)
(defclass C01001100 (C010011000 C010011001) ())
(defmethod f ((x C010011001) (y C010011000))
                 (format (standard-output) "call with ~A ~A~%" 'C010011001 'C010011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010011000) (y C010011001))
                 (format (standard-output) "call with ~A ~A~%" 'C010011000 'C010011001)
                 (f (create (class C010011001)) (create (class C01001100))))
(defclass C010011010 () ())
(defmethod f ((x C010011010) (y C010011010)) nil)
(defclass C010011011 () ())
(defmethod f ((x C010011011) (y C010011011)) nil)
(defclass C01001101 (C010011010 C010011011) ())
(defmethod f ((x C010011011) (y C010011010))
                 (format (standard-output) "call with ~A ~A~%" 'C010011011 'C010011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010011010) (y C010011011))
                 (format (standard-output) "call with ~A ~A~%" 'C010011010 'C010011011)
                 (f (create (class C010011011)) (create (class C01001101))))
(defclass C0100110 (C01001100 C01001101) ())
(defmethod f ((x C01001101) (y C01001100))
                 (format (standard-output) "call with ~A ~A~%" 'C01001101 'C01001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001100) (y C01001101))
                 (format (standard-output) "call with ~A ~A~%" 'C01001100 'C01001101)
                 (f (create (class C01001101)) (create (class C0100110))))
(defclass C010011100 () ())
(defmethod f ((x C010011100) (y C010011100)) nil)
(defclass C010011101 () ())
(defmethod f ((x C010011101) (y C010011101)) nil)
(defclass C01001110 (C010011100 C010011101) ())
(defmethod f ((x C010011101) (y C010011100))
                 (format (standard-output) "call with ~A ~A~%" 'C010011101 'C010011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010011100) (y C010011101))
                 (format (standard-output) "call with ~A ~A~%" 'C010011100 'C010011101)
                 (f (create (class C010011101)) (create (class C01001110))))
(defclass C010011110 () ())
(defmethod f ((x C010011110) (y C010011110)) nil)
(defclass C010011111 () ())
(defmethod f ((x C010011111) (y C010011111)) nil)
(defclass C01001111 (C010011110 C010011111) ())
(defmethod f ((x C010011111) (y C010011110))
                 (format (standard-output) "call with ~A ~A~%" 'C010011111 'C010011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010011110) (y C010011111))
                 (format (standard-output) "call with ~A ~A~%" 'C010011110 'C010011111)
                 (f (create (class C010011111)) (create (class C01001111))))
(defclass C0100111 (C01001110 C01001111) ())
(defmethod f ((x C01001111) (y C01001110))
                 (format (standard-output) "call with ~A ~A~%" 'C01001111 'C01001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01001110) (y C01001111))
                 (format (standard-output) "call with ~A ~A~%" 'C01001110 'C01001111)
                 (f (create (class C01001111)) (create (class C0100111))))
(defclass C010011 (C0100110 C0100111) ())
(defmethod f ((x C0100111) (y C0100110))
                 (format (standard-output) "call with ~A ~A~%" 'C0100111 'C0100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100110) (y C0100111))
                 (format (standard-output) "call with ~A ~A~%" 'C0100110 'C0100111)
                 (f (create (class C0100111)) (create (class C010011))))
(defclass C01001 (C010010 C010011) ())
(defmethod f ((x C010011) (y C010010))
                 (format (standard-output) "call with ~A ~A~%" 'C010011 'C010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010) (y C010011))
                 (format (standard-output) "call with ~A ~A~%" 'C010010 'C010011)
                 (f (create (class C010011)) (create (class C01001))))
(defclass C0100 (C01000 C01001) ())
(defmethod f ((x C01001) (y C01000))
                 (format (standard-output) "call with ~A ~A~%" 'C01001 'C01000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000) (y C01001))
                 (format (standard-output) "call with ~A ~A~%" 'C01000 'C01001)
                 (f (create (class C01001)) (create (class C0100))))
(defclass C010100000 () ())
(defmethod f ((x C010100000) (y C010100000)) nil)
(defclass C010100001 () ())
(defmethod f ((x C010100001) (y C010100001)) nil)
(defclass C01010000 (C010100000 C010100001) ())
(defmethod f ((x C010100001) (y C010100000))
                 (format (standard-output) "call with ~A ~A~%" 'C010100001 'C010100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100000) (y C010100001))
                 (format (standard-output) "call with ~A ~A~%" 'C010100000 'C010100001)
                 (f (create (class C010100001)) (create (class C01010000))))
(defclass C010100010 () ())
(defmethod f ((x C010100010) (y C010100010)) nil)
(defclass C010100011 () ())
(defmethod f ((x C010100011) (y C010100011)) nil)
(defclass C01010001 (C010100010 C010100011) ())
(defmethod f ((x C010100011) (y C010100010))
                 (format (standard-output) "call with ~A ~A~%" 'C010100011 'C010100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100010) (y C010100011))
                 (format (standard-output) "call with ~A ~A~%" 'C010100010 'C010100011)
                 (f (create (class C010100011)) (create (class C01010001))))
(defclass C0101000 (C01010000 C01010001) ())
(defmethod f ((x C01010001) (y C01010000))
                 (format (standard-output) "call with ~A ~A~%" 'C01010001 'C01010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010000) (y C01010001))
                 (format (standard-output) "call with ~A ~A~%" 'C01010000 'C01010001)
                 (f (create (class C01010001)) (create (class C0101000))))
(defclass C010100100 () ())
(defmethod f ((x C010100100) (y C010100100)) nil)
(defclass C010100101 () ())
(defmethod f ((x C010100101) (y C010100101)) nil)
(defclass C01010010 (C010100100 C010100101) ())
(defmethod f ((x C010100101) (y C010100100))
                 (format (standard-output) "call with ~A ~A~%" 'C010100101 'C010100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100100) (y C010100101))
                 (format (standard-output) "call with ~A ~A~%" 'C010100100 'C010100101)
                 (f (create (class C010100101)) (create (class C01010010))))
(defclass C010100110 () ())
(defmethod f ((x C010100110) (y C010100110)) nil)
(defclass C010100111 () ())
(defmethod f ((x C010100111) (y C010100111)) nil)
(defclass C01010011 (C010100110 C010100111) ())
(defmethod f ((x C010100111) (y C010100110))
                 (format (standard-output) "call with ~A ~A~%" 'C010100111 'C010100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100110) (y C010100111))
                 (format (standard-output) "call with ~A ~A~%" 'C010100110 'C010100111)
                 (f (create (class C010100111)) (create (class C01010011))))
(defclass C0101001 (C01010010 C01010011) ())
(defmethod f ((x C01010011) (y C01010010))
                 (format (standard-output) "call with ~A ~A~%" 'C01010011 'C01010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010010) (y C01010011))
                 (format (standard-output) "call with ~A ~A~%" 'C01010010 'C01010011)
                 (f (create (class C01010011)) (create (class C0101001))))
(defclass C010100 (C0101000 C0101001) ())
(defmethod f ((x C0101001) (y C0101000))
                 (format (standard-output) "call with ~A ~A~%" 'C0101001 'C0101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101000) (y C0101001))
                 (format (standard-output) "call with ~A ~A~%" 'C0101000 'C0101001)
                 (f (create (class C0101001)) (create (class C010100))))
(defclass C010101000 () ())
(defmethod f ((x C010101000) (y C010101000)) nil)
(defclass C010101001 () ())
(defmethod f ((x C010101001) (y C010101001)) nil)
(defclass C01010100 (C010101000 C010101001) ())
(defmethod f ((x C010101001) (y C010101000))
                 (format (standard-output) "call with ~A ~A~%" 'C010101001 'C010101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010101000) (y C010101001))
                 (format (standard-output) "call with ~A ~A~%" 'C010101000 'C010101001)
                 (f (create (class C010101001)) (create (class C01010100))))
(defclass C010101010 () ())
(defmethod f ((x C010101010) (y C010101010)) nil)
(defclass C010101011 () ())
(defmethod f ((x C010101011) (y C010101011)) nil)
(defclass C01010101 (C010101010 C010101011) ())
(defmethod f ((x C010101011) (y C010101010))
                 (format (standard-output) "call with ~A ~A~%" 'C010101011 'C010101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010101010) (y C010101011))
                 (format (standard-output) "call with ~A ~A~%" 'C010101010 'C010101011)
                 (f (create (class C010101011)) (create (class C01010101))))
(defclass C0101010 (C01010100 C01010101) ())
(defmethod f ((x C01010101) (y C01010100))
                 (format (standard-output) "call with ~A ~A~%" 'C01010101 'C01010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010100) (y C01010101))
                 (format (standard-output) "call with ~A ~A~%" 'C01010100 'C01010101)
                 (f (create (class C01010101)) (create (class C0101010))))
(defclass C010101100 () ())
(defmethod f ((x C010101100) (y C010101100)) nil)
(defclass C010101101 () ())
(defmethod f ((x C010101101) (y C010101101)) nil)
(defclass C01010110 (C010101100 C010101101) ())
(defmethod f ((x C010101101) (y C010101100))
                 (format (standard-output) "call with ~A ~A~%" 'C010101101 'C010101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010101100) (y C010101101))
                 (format (standard-output) "call with ~A ~A~%" 'C010101100 'C010101101)
                 (f (create (class C010101101)) (create (class C01010110))))
(defclass C010101110 () ())
(defmethod f ((x C010101110) (y C010101110)) nil)
(defclass C010101111 () ())
(defmethod f ((x C010101111) (y C010101111)) nil)
(defclass C01010111 (C010101110 C010101111) ())
(defmethod f ((x C010101111) (y C010101110))
                 (format (standard-output) "call with ~A ~A~%" 'C010101111 'C010101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010101110) (y C010101111))
                 (format (standard-output) "call with ~A ~A~%" 'C010101110 'C010101111)
                 (f (create (class C010101111)) (create (class C01010111))))
(defclass C0101011 (C01010110 C01010111) ())
(defmethod f ((x C01010111) (y C01010110))
                 (format (standard-output) "call with ~A ~A~%" 'C01010111 'C01010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010110) (y C01010111))
                 (format (standard-output) "call with ~A ~A~%" 'C01010110 'C01010111)
                 (f (create (class C01010111)) (create (class C0101011))))
(defclass C010101 (C0101010 C0101011) ())
(defmethod f ((x C0101011) (y C0101010))
                 (format (standard-output) "call with ~A ~A~%" 'C0101011 'C0101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101010) (y C0101011))
                 (format (standard-output) "call with ~A ~A~%" 'C0101010 'C0101011)
                 (f (create (class C0101011)) (create (class C010101))))
(defclass C01010 (C010100 C010101) ())
(defmethod f ((x C010101) (y C010100))
                 (format (standard-output) "call with ~A ~A~%" 'C010101 'C010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100) (y C010101))
                 (format (standard-output) "call with ~A ~A~%" 'C010100 'C010101)
                 (f (create (class C010101)) (create (class C01010))))
(defclass C010110000 () ())
(defmethod f ((x C010110000) (y C010110000)) nil)
(defclass C010110001 () ())
(defmethod f ((x C010110001) (y C010110001)) nil)
(defclass C01011000 (C010110000 C010110001) ())
(defmethod f ((x C010110001) (y C010110000))
                 (format (standard-output) "call with ~A ~A~%" 'C010110001 'C010110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110000) (y C010110001))
                 (format (standard-output) "call with ~A ~A~%" 'C010110000 'C010110001)
                 (f (create (class C010110001)) (create (class C01011000))))
(defclass C010110010 () ())
(defmethod f ((x C010110010) (y C010110010)) nil)
(defclass C010110011 () ())
(defmethod f ((x C010110011) (y C010110011)) nil)
(defclass C01011001 (C010110010 C010110011) ())
(defmethod f ((x C010110011) (y C010110010))
                 (format (standard-output) "call with ~A ~A~%" 'C010110011 'C010110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110010) (y C010110011))
                 (format (standard-output) "call with ~A ~A~%" 'C010110010 'C010110011)
                 (f (create (class C010110011)) (create (class C01011001))))
(defclass C0101100 (C01011000 C01011001) ())
(defmethod f ((x C01011001) (y C01011000))
                 (format (standard-output) "call with ~A ~A~%" 'C01011001 'C01011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011000) (y C01011001))
                 (format (standard-output) "call with ~A ~A~%" 'C01011000 'C01011001)
                 (f (create (class C01011001)) (create (class C0101100))))
(defclass C010110100 () ())
(defmethod f ((x C010110100) (y C010110100)) nil)
(defclass C010110101 () ())
(defmethod f ((x C010110101) (y C010110101)) nil)
(defclass C01011010 (C010110100 C010110101) ())
(defmethod f ((x C010110101) (y C010110100))
                 (format (standard-output) "call with ~A ~A~%" 'C010110101 'C010110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110100) (y C010110101))
                 (format (standard-output) "call with ~A ~A~%" 'C010110100 'C010110101)
                 (f (create (class C010110101)) (create (class C01011010))))
(defclass C010110110 () ())
(defmethod f ((x C010110110) (y C010110110)) nil)
(defclass C010110111 () ())
(defmethod f ((x C010110111) (y C010110111)) nil)
(defclass C01011011 (C010110110 C010110111) ())
(defmethod f ((x C010110111) (y C010110110))
                 (format (standard-output) "call with ~A ~A~%" 'C010110111 'C010110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110110) (y C010110111))
                 (format (standard-output) "call with ~A ~A~%" 'C010110110 'C010110111)
                 (f (create (class C010110111)) (create (class C01011011))))
(defclass C0101101 (C01011010 C01011011) ())
(defmethod f ((x C01011011) (y C01011010))
                 (format (standard-output) "call with ~A ~A~%" 'C01011011 'C01011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011010) (y C01011011))
                 (format (standard-output) "call with ~A ~A~%" 'C01011010 'C01011011)
                 (f (create (class C01011011)) (create (class C0101101))))
(defclass C010110 (C0101100 C0101101) ())
(defmethod f ((x C0101101) (y C0101100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101101 'C0101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101100) (y C0101101))
                 (format (standard-output) "call with ~A ~A~%" 'C0101100 'C0101101)
                 (f (create (class C0101101)) (create (class C010110))))
(defclass C010111000 () ())
(defmethod f ((x C010111000) (y C010111000)) nil)
(defclass C010111001 () ())
(defmethod f ((x C010111001) (y C010111001)) nil)
(defclass C01011100 (C010111000 C010111001) ())
(defmethod f ((x C010111001) (y C010111000))
                 (format (standard-output) "call with ~A ~A~%" 'C010111001 'C010111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010111000) (y C010111001))
                 (format (standard-output) "call with ~A ~A~%" 'C010111000 'C010111001)
                 (f (create (class C010111001)) (create (class C01011100))))
(defclass C010111010 () ())
(defmethod f ((x C010111010) (y C010111010)) nil)
(defclass C010111011 () ())
(defmethod f ((x C010111011) (y C010111011)) nil)
(defclass C01011101 (C010111010 C010111011) ())
(defmethod f ((x C010111011) (y C010111010))
                 (format (standard-output) "call with ~A ~A~%" 'C010111011 'C010111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010111010) (y C010111011))
                 (format (standard-output) "call with ~A ~A~%" 'C010111010 'C010111011)
                 (f (create (class C010111011)) (create (class C01011101))))
(defclass C0101110 (C01011100 C01011101) ())
(defmethod f ((x C01011101) (y C01011100))
                 (format (standard-output) "call with ~A ~A~%" 'C01011101 'C01011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011100) (y C01011101))
                 (format (standard-output) "call with ~A ~A~%" 'C01011100 'C01011101)
                 (f (create (class C01011101)) (create (class C0101110))))
(defclass C010111100 () ())
(defmethod f ((x C010111100) (y C010111100)) nil)
(defclass C010111101 () ())
(defmethod f ((x C010111101) (y C010111101)) nil)
(defclass C01011110 (C010111100 C010111101) ())
(defmethod f ((x C010111101) (y C010111100))
                 (format (standard-output) "call with ~A ~A~%" 'C010111101 'C010111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010111100) (y C010111101))
                 (format (standard-output) "call with ~A ~A~%" 'C010111100 'C010111101)
                 (f (create (class C010111101)) (create (class C01011110))))
(defclass C010111110 () ())
(defmethod f ((x C010111110) (y C010111110)) nil)
(defclass C010111111 () ())
(defmethod f ((x C010111111) (y C010111111)) nil)
(defclass C01011111 (C010111110 C010111111) ())
(defmethod f ((x C010111111) (y C010111110))
                 (format (standard-output) "call with ~A ~A~%" 'C010111111 'C010111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010111110) (y C010111111))
                 (format (standard-output) "call with ~A ~A~%" 'C010111110 'C010111111)
                 (f (create (class C010111111)) (create (class C01011111))))
(defclass C0101111 (C01011110 C01011111) ())
(defmethod f ((x C01011111) (y C01011110))
                 (format (standard-output) "call with ~A ~A~%" 'C01011111 'C01011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01011110) (y C01011111))
                 (format (standard-output) "call with ~A ~A~%" 'C01011110 'C01011111)
                 (f (create (class C01011111)) (create (class C0101111))))
(defclass C010111 (C0101110 C0101111) ())
(defmethod f ((x C0101111) (y C0101110))
                 (format (standard-output) "call with ~A ~A~%" 'C0101111 'C0101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0101110) (y C0101111))
                 (format (standard-output) "call with ~A ~A~%" 'C0101110 'C0101111)
                 (f (create (class C0101111)) (create (class C010111))))
(defclass C01011 (C010110 C010111) ())
(defmethod f ((x C010111) (y C010110))
                 (format (standard-output) "call with ~A ~A~%" 'C010111 'C010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110) (y C010111))
                 (format (standard-output) "call with ~A ~A~%" 'C010110 'C010111)
                 (f (create (class C010111)) (create (class C01011))))
(defclass C0101 (C01010 C01011) ())
(defmethod f ((x C01011) (y C01010))
                 (format (standard-output) "call with ~A ~A~%" 'C01011 'C01010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010) (y C01011))
                 (format (standard-output) "call with ~A ~A~%" 'C01010 'C01011)
                 (f (create (class C01011)) (create (class C0101))))
(defclass C010 (C0100 C0101) ())
(defmethod f ((x C0101) (y C0100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101 'C0100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100) (y C0101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100 'C0101)
                 (f (create (class C0101)) (create (class C010))))
(defclass C011000000 () ())
(defmethod f ((x C011000000) (y C011000000)) nil)
(defclass C011000001 () ())
(defmethod f ((x C011000001) (y C011000001)) nil)
(defclass C01100000 (C011000000 C011000001) ())
(defmethod f ((x C011000001) (y C011000000))
                 (format (standard-output) "call with ~A ~A~%" 'C011000001 'C011000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000000) (y C011000001))
                 (format (standard-output) "call with ~A ~A~%" 'C011000000 'C011000001)
                 (f (create (class C011000001)) (create (class C01100000))))
(defclass C011000010 () ())
(defmethod f ((x C011000010) (y C011000010)) nil)
(defclass C011000011 () ())
(defmethod f ((x C011000011) (y C011000011)) nil)
(defclass C01100001 (C011000010 C011000011) ())
(defmethod f ((x C011000011) (y C011000010))
                 (format (standard-output) "call with ~A ~A~%" 'C011000011 'C011000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000010) (y C011000011))
                 (format (standard-output) "call with ~A ~A~%" 'C011000010 'C011000011)
                 (f (create (class C011000011)) (create (class C01100001))))
(defclass C0110000 (C01100000 C01100001) ())
(defmethod f ((x C01100001) (y C01100000))
                 (format (standard-output) "call with ~A ~A~%" 'C01100001 'C01100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100000) (y C01100001))
                 (format (standard-output) "call with ~A ~A~%" 'C01100000 'C01100001)
                 (f (create (class C01100001)) (create (class C0110000))))
(defclass C011000100 () ())
(defmethod f ((x C011000100) (y C011000100)) nil)
(defclass C011000101 () ())
(defmethod f ((x C011000101) (y C011000101)) nil)
(defclass C01100010 (C011000100 C011000101) ())
(defmethod f ((x C011000101) (y C011000100))
                 (format (standard-output) "call with ~A ~A~%" 'C011000101 'C011000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000100) (y C011000101))
                 (format (standard-output) "call with ~A ~A~%" 'C011000100 'C011000101)
                 (f (create (class C011000101)) (create (class C01100010))))
(defclass C011000110 () ())
(defmethod f ((x C011000110) (y C011000110)) nil)
(defclass C011000111 () ())
(defmethod f ((x C011000111) (y C011000111)) nil)
(defclass C01100011 (C011000110 C011000111) ())
(defmethod f ((x C011000111) (y C011000110))
                 (format (standard-output) "call with ~A ~A~%" 'C011000111 'C011000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000110) (y C011000111))
                 (format (standard-output) "call with ~A ~A~%" 'C011000110 'C011000111)
                 (f (create (class C011000111)) (create (class C01100011))))
(defclass C0110001 (C01100010 C01100011) ())
(defmethod f ((x C01100011) (y C01100010))
                 (format (standard-output) "call with ~A ~A~%" 'C01100011 'C01100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100010) (y C01100011))
                 (format (standard-output) "call with ~A ~A~%" 'C01100010 'C01100011)
                 (f (create (class C01100011)) (create (class C0110001))))
(defclass C011000 (C0110000 C0110001) ())
(defmethod f ((x C0110001) (y C0110000))
                 (format (standard-output) "call with ~A ~A~%" 'C0110001 'C0110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110000) (y C0110001))
                 (format (standard-output) "call with ~A ~A~%" 'C0110000 'C0110001)
                 (f (create (class C0110001)) (create (class C011000))))
(defclass C011001000 () ())
(defmethod f ((x C011001000) (y C011001000)) nil)
(defclass C011001001 () ())
(defmethod f ((x C011001001) (y C011001001)) nil)
(defclass C01100100 (C011001000 C011001001) ())
(defmethod f ((x C011001001) (y C011001000))
                 (format (standard-output) "call with ~A ~A~%" 'C011001001 'C011001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011001000) (y C011001001))
                 (format (standard-output) "call with ~A ~A~%" 'C011001000 'C011001001)
                 (f (create (class C011001001)) (create (class C01100100))))
(defclass C011001010 () ())
(defmethod f ((x C011001010) (y C011001010)) nil)
(defclass C011001011 () ())
(defmethod f ((x C011001011) (y C011001011)) nil)
(defclass C01100101 (C011001010 C011001011) ())
(defmethod f ((x C011001011) (y C011001010))
                 (format (standard-output) "call with ~A ~A~%" 'C011001011 'C011001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011001010) (y C011001011))
                 (format (standard-output) "call with ~A ~A~%" 'C011001010 'C011001011)
                 (f (create (class C011001011)) (create (class C01100101))))
(defclass C0110010 (C01100100 C01100101) ())
(defmethod f ((x C01100101) (y C01100100))
                 (format (standard-output) "call with ~A ~A~%" 'C01100101 'C01100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100100) (y C01100101))
                 (format (standard-output) "call with ~A ~A~%" 'C01100100 'C01100101)
                 (f (create (class C01100101)) (create (class C0110010))))
(defclass C011001100 () ())
(defmethod f ((x C011001100) (y C011001100)) nil)
(defclass C011001101 () ())
(defmethod f ((x C011001101) (y C011001101)) nil)
(defclass C01100110 (C011001100 C011001101) ())
(defmethod f ((x C011001101) (y C011001100))
                 (format (standard-output) "call with ~A ~A~%" 'C011001101 'C011001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011001100) (y C011001101))
                 (format (standard-output) "call with ~A ~A~%" 'C011001100 'C011001101)
                 (f (create (class C011001101)) (create (class C01100110))))
(defclass C011001110 () ())
(defmethod f ((x C011001110) (y C011001110)) nil)
(defclass C011001111 () ())
(defmethod f ((x C011001111) (y C011001111)) nil)
(defclass C01100111 (C011001110 C011001111) ())
(defmethod f ((x C011001111) (y C011001110))
                 (format (standard-output) "call with ~A ~A~%" 'C011001111 'C011001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011001110) (y C011001111))
                 (format (standard-output) "call with ~A ~A~%" 'C011001110 'C011001111)
                 (f (create (class C011001111)) (create (class C01100111))))
(defclass C0110011 (C01100110 C01100111) ())
(defmethod f ((x C01100111) (y C01100110))
                 (format (standard-output) "call with ~A ~A~%" 'C01100111 'C01100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100110) (y C01100111))
                 (format (standard-output) "call with ~A ~A~%" 'C01100110 'C01100111)
                 (f (create (class C01100111)) (create (class C0110011))))
(defclass C011001 (C0110010 C0110011) ())
(defmethod f ((x C0110011) (y C0110010))
                 (format (standard-output) "call with ~A ~A~%" 'C0110011 'C0110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110010) (y C0110011))
                 (format (standard-output) "call with ~A ~A~%" 'C0110010 'C0110011)
                 (f (create (class C0110011)) (create (class C011001))))
(defclass C01100 (C011000 C011001) ())
(defmethod f ((x C011001) (y C011000))
                 (format (standard-output) "call with ~A ~A~%" 'C011001 'C011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000) (y C011001))
                 (format (standard-output) "call with ~A ~A~%" 'C011000 'C011001)
                 (f (create (class C011001)) (create (class C01100))))
(defclass C011010000 () ())
(defmethod f ((x C011010000) (y C011010000)) nil)
(defclass C011010001 () ())
(defmethod f ((x C011010001) (y C011010001)) nil)
(defclass C01101000 (C011010000 C011010001) ())
(defmethod f ((x C011010001) (y C011010000))
                 (format (standard-output) "call with ~A ~A~%" 'C011010001 'C011010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010000) (y C011010001))
                 (format (standard-output) "call with ~A ~A~%" 'C011010000 'C011010001)
                 (f (create (class C011010001)) (create (class C01101000))))
(defclass C011010010 () ())
(defmethod f ((x C011010010) (y C011010010)) nil)
(defclass C011010011 () ())
(defmethod f ((x C011010011) (y C011010011)) nil)
(defclass C01101001 (C011010010 C011010011) ())
(defmethod f ((x C011010011) (y C011010010))
                 (format (standard-output) "call with ~A ~A~%" 'C011010011 'C011010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010010) (y C011010011))
                 (format (standard-output) "call with ~A ~A~%" 'C011010010 'C011010011)
                 (f (create (class C011010011)) (create (class C01101001))))
(defclass C0110100 (C01101000 C01101001) ())
(defmethod f ((x C01101001) (y C01101000))
                 (format (standard-output) "call with ~A ~A~%" 'C01101001 'C01101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101000) (y C01101001))
                 (format (standard-output) "call with ~A ~A~%" 'C01101000 'C01101001)
                 (f (create (class C01101001)) (create (class C0110100))))
(defclass C011010100 () ())
(defmethod f ((x C011010100) (y C011010100)) nil)
(defclass C011010101 () ())
(defmethod f ((x C011010101) (y C011010101)) nil)
(defclass C01101010 (C011010100 C011010101) ())
(defmethod f ((x C011010101) (y C011010100))
                 (format (standard-output) "call with ~A ~A~%" 'C011010101 'C011010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010100) (y C011010101))
                 (format (standard-output) "call with ~A ~A~%" 'C011010100 'C011010101)
                 (f (create (class C011010101)) (create (class C01101010))))
(defclass C011010110 () ())
(defmethod f ((x C011010110) (y C011010110)) nil)
(defclass C011010111 () ())
(defmethod f ((x C011010111) (y C011010111)) nil)
(defclass C01101011 (C011010110 C011010111) ())
(defmethod f ((x C011010111) (y C011010110))
                 (format (standard-output) "call with ~A ~A~%" 'C011010111 'C011010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010110) (y C011010111))
                 (format (standard-output) "call with ~A ~A~%" 'C011010110 'C011010111)
                 (f (create (class C011010111)) (create (class C01101011))))
(defclass C0110101 (C01101010 C01101011) ())
(defmethod f ((x C01101011) (y C01101010))
                 (format (standard-output) "call with ~A ~A~%" 'C01101011 'C01101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101010) (y C01101011))
                 (format (standard-output) "call with ~A ~A~%" 'C01101010 'C01101011)
                 (f (create (class C01101011)) (create (class C0110101))))
(defclass C011010 (C0110100 C0110101) ())
(defmethod f ((x C0110101) (y C0110100))
                 (format (standard-output) "call with ~A ~A~%" 'C0110101 'C0110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110100) (y C0110101))
                 (format (standard-output) "call with ~A ~A~%" 'C0110100 'C0110101)
                 (f (create (class C0110101)) (create (class C011010))))
(defclass C011011000 () ())
(defmethod f ((x C011011000) (y C011011000)) nil)
(defclass C011011001 () ())
(defmethod f ((x C011011001) (y C011011001)) nil)
(defclass C01101100 (C011011000 C011011001) ())
(defmethod f ((x C011011001) (y C011011000))
                 (format (standard-output) "call with ~A ~A~%" 'C011011001 'C011011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011011000) (y C011011001))
                 (format (standard-output) "call with ~A ~A~%" 'C011011000 'C011011001)
                 (f (create (class C011011001)) (create (class C01101100))))
(defclass C011011010 () ())
(defmethod f ((x C011011010) (y C011011010)) nil)
(defclass C011011011 () ())
(defmethod f ((x C011011011) (y C011011011)) nil)
(defclass C01101101 (C011011010 C011011011) ())
(defmethod f ((x C011011011) (y C011011010))
                 (format (standard-output) "call with ~A ~A~%" 'C011011011 'C011011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011011010) (y C011011011))
                 (format (standard-output) "call with ~A ~A~%" 'C011011010 'C011011011)
                 (f (create (class C011011011)) (create (class C01101101))))
(defclass C0110110 (C01101100 C01101101) ())
(defmethod f ((x C01101101) (y C01101100))
                 (format (standard-output) "call with ~A ~A~%" 'C01101101 'C01101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101100) (y C01101101))
                 (format (standard-output) "call with ~A ~A~%" 'C01101100 'C01101101)
                 (f (create (class C01101101)) (create (class C0110110))))
(defclass C011011100 () ())
(defmethod f ((x C011011100) (y C011011100)) nil)
(defclass C011011101 () ())
(defmethod f ((x C011011101) (y C011011101)) nil)
(defclass C01101110 (C011011100 C011011101) ())
(defmethod f ((x C011011101) (y C011011100))
                 (format (standard-output) "call with ~A ~A~%" 'C011011101 'C011011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011011100) (y C011011101))
                 (format (standard-output) "call with ~A ~A~%" 'C011011100 'C011011101)
                 (f (create (class C011011101)) (create (class C01101110))))
(defclass C011011110 () ())
(defmethod f ((x C011011110) (y C011011110)) nil)
(defclass C011011111 () ())
(defmethod f ((x C011011111) (y C011011111)) nil)
(defclass C01101111 (C011011110 C011011111) ())
(defmethod f ((x C011011111) (y C011011110))
                 (format (standard-output) "call with ~A ~A~%" 'C011011111 'C011011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011011110) (y C011011111))
                 (format (standard-output) "call with ~A ~A~%" 'C011011110 'C011011111)
                 (f (create (class C011011111)) (create (class C01101111))))
(defclass C0110111 (C01101110 C01101111) ())
(defmethod f ((x C01101111) (y C01101110))
                 (format (standard-output) "call with ~A ~A~%" 'C01101111 'C01101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01101110) (y C01101111))
                 (format (standard-output) "call with ~A ~A~%" 'C01101110 'C01101111)
                 (f (create (class C01101111)) (create (class C0110111))))
(defclass C011011 (C0110110 C0110111) ())
(defmethod f ((x C0110111) (y C0110110))
                 (format (standard-output) "call with ~A ~A~%" 'C0110111 'C0110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110110) (y C0110111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110110 'C0110111)
                 (f (create (class C0110111)) (create (class C011011))))
(defclass C01101 (C011010 C011011) ())
(defmethod f ((x C011011) (y C011010))
                 (format (standard-output) "call with ~A ~A~%" 'C011011 'C011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010) (y C011011))
                 (format (standard-output) "call with ~A ~A~%" 'C011010 'C011011)
                 (f (create (class C011011)) (create (class C01101))))
(defclass C0110 (C01100 C01101) ())
(defmethod f ((x C01101) (y C01100))
                 (format (standard-output) "call with ~A ~A~%" 'C01101 'C01100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100) (y C01101))
                 (format (standard-output) "call with ~A ~A~%" 'C01100 'C01101)
                 (f (create (class C01101)) (create (class C0110))))
(defclass C011100000 () ())
(defmethod f ((x C011100000) (y C011100000)) nil)
(defclass C011100001 () ())
(defmethod f ((x C011100001) (y C011100001)) nil)
(defclass C01110000 (C011100000 C011100001) ())
(defmethod f ((x C011100001) (y C011100000))
                 (format (standard-output) "call with ~A ~A~%" 'C011100001 'C011100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100000) (y C011100001))
                 (format (standard-output) "call with ~A ~A~%" 'C011100000 'C011100001)
                 (f (create (class C011100001)) (create (class C01110000))))
(defclass C011100010 () ())
(defmethod f ((x C011100010) (y C011100010)) nil)
(defclass C011100011 () ())
(defmethod f ((x C011100011) (y C011100011)) nil)
(defclass C01110001 (C011100010 C011100011) ())
(defmethod f ((x C011100011) (y C011100010))
                 (format (standard-output) "call with ~A ~A~%" 'C011100011 'C011100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100010) (y C011100011))
                 (format (standard-output) "call with ~A ~A~%" 'C011100010 'C011100011)
                 (f (create (class C011100011)) (create (class C01110001))))
(defclass C0111000 (C01110000 C01110001) ())
(defmethod f ((x C01110001) (y C01110000))
                 (format (standard-output) "call with ~A ~A~%" 'C01110001 'C01110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110000) (y C01110001))
                 (format (standard-output) "call with ~A ~A~%" 'C01110000 'C01110001)
                 (f (create (class C01110001)) (create (class C0111000))))
(defclass C011100100 () ())
(defmethod f ((x C011100100) (y C011100100)) nil)
(defclass C011100101 () ())
(defmethod f ((x C011100101) (y C011100101)) nil)
(defclass C01110010 (C011100100 C011100101) ())
(defmethod f ((x C011100101) (y C011100100))
                 (format (standard-output) "call with ~A ~A~%" 'C011100101 'C011100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100100) (y C011100101))
                 (format (standard-output) "call with ~A ~A~%" 'C011100100 'C011100101)
                 (f (create (class C011100101)) (create (class C01110010))))
(defclass C011100110 () ())
(defmethod f ((x C011100110) (y C011100110)) nil)
(defclass C011100111 () ())
(defmethod f ((x C011100111) (y C011100111)) nil)
(defclass C01110011 (C011100110 C011100111) ())
(defmethod f ((x C011100111) (y C011100110))
                 (format (standard-output) "call with ~A ~A~%" 'C011100111 'C011100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100110) (y C011100111))
                 (format (standard-output) "call with ~A ~A~%" 'C011100110 'C011100111)
                 (f (create (class C011100111)) (create (class C01110011))))
(defclass C0111001 (C01110010 C01110011) ())
(defmethod f ((x C01110011) (y C01110010))
                 (format (standard-output) "call with ~A ~A~%" 'C01110011 'C01110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110010) (y C01110011))
                 (format (standard-output) "call with ~A ~A~%" 'C01110010 'C01110011)
                 (f (create (class C01110011)) (create (class C0111001))))
(defclass C011100 (C0111000 C0111001) ())
(defmethod f ((x C0111001) (y C0111000))
                 (format (standard-output) "call with ~A ~A~%" 'C0111001 'C0111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111000) (y C0111001))
                 (format (standard-output) "call with ~A ~A~%" 'C0111000 'C0111001)
                 (f (create (class C0111001)) (create (class C011100))))
(defclass C011101000 () ())
(defmethod f ((x C011101000) (y C011101000)) nil)
(defclass C011101001 () ())
(defmethod f ((x C011101001) (y C011101001)) nil)
(defclass C01110100 (C011101000 C011101001) ())
(defmethod f ((x C011101001) (y C011101000))
                 (format (standard-output) "call with ~A ~A~%" 'C011101001 'C011101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011101000) (y C011101001))
                 (format (standard-output) "call with ~A ~A~%" 'C011101000 'C011101001)
                 (f (create (class C011101001)) (create (class C01110100))))
(defclass C011101010 () ())
(defmethod f ((x C011101010) (y C011101010)) nil)
(defclass C011101011 () ())
(defmethod f ((x C011101011) (y C011101011)) nil)
(defclass C01110101 (C011101010 C011101011) ())
(defmethod f ((x C011101011) (y C011101010))
                 (format (standard-output) "call with ~A ~A~%" 'C011101011 'C011101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011101010) (y C011101011))
                 (format (standard-output) "call with ~A ~A~%" 'C011101010 'C011101011)
                 (f (create (class C011101011)) (create (class C01110101))))
(defclass C0111010 (C01110100 C01110101) ())
(defmethod f ((x C01110101) (y C01110100))
                 (format (standard-output) "call with ~A ~A~%" 'C01110101 'C01110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110100) (y C01110101))
                 (format (standard-output) "call with ~A ~A~%" 'C01110100 'C01110101)
                 (f (create (class C01110101)) (create (class C0111010))))
(defclass C011101100 () ())
(defmethod f ((x C011101100) (y C011101100)) nil)
(defclass C011101101 () ())
(defmethod f ((x C011101101) (y C011101101)) nil)
(defclass C01110110 (C011101100 C011101101) ())
(defmethod f ((x C011101101) (y C011101100))
                 (format (standard-output) "call with ~A ~A~%" 'C011101101 'C011101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011101100) (y C011101101))
                 (format (standard-output) "call with ~A ~A~%" 'C011101100 'C011101101)
                 (f (create (class C011101101)) (create (class C01110110))))
(defclass C011101110 () ())
(defmethod f ((x C011101110) (y C011101110)) nil)
(defclass C011101111 () ())
(defmethod f ((x C011101111) (y C011101111)) nil)
(defclass C01110111 (C011101110 C011101111) ())
(defmethod f ((x C011101111) (y C011101110))
                 (format (standard-output) "call with ~A ~A~%" 'C011101111 'C011101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011101110) (y C011101111))
                 (format (standard-output) "call with ~A ~A~%" 'C011101110 'C011101111)
                 (f (create (class C011101111)) (create (class C01110111))))
(defclass C0111011 (C01110110 C01110111) ())
(defmethod f ((x C01110111) (y C01110110))
                 (format (standard-output) "call with ~A ~A~%" 'C01110111 'C01110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110110) (y C01110111))
                 (format (standard-output) "call with ~A ~A~%" 'C01110110 'C01110111)
                 (f (create (class C01110111)) (create (class C0111011))))
(defclass C011101 (C0111010 C0111011) ())
(defmethod f ((x C0111011) (y C0111010))
                 (format (standard-output) "call with ~A ~A~%" 'C0111011 'C0111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111010) (y C0111011))
                 (format (standard-output) "call with ~A ~A~%" 'C0111010 'C0111011)
                 (f (create (class C0111011)) (create (class C011101))))
(defclass C01110 (C011100 C011101) ())
(defmethod f ((x C011101) (y C011100))
                 (format (standard-output) "call with ~A ~A~%" 'C011101 'C011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100) (y C011101))
                 (format (standard-output) "call with ~A ~A~%" 'C011100 'C011101)
                 (f (create (class C011101)) (create (class C01110))))
(defclass C011110000 () ())
(defmethod f ((x C011110000) (y C011110000)) nil)
(defclass C011110001 () ())
(defmethod f ((x C011110001) (y C011110001)) nil)
(defclass C01111000 (C011110000 C011110001) ())
(defmethod f ((x C011110001) (y C011110000))
                 (format (standard-output) "call with ~A ~A~%" 'C011110001 'C011110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110000) (y C011110001))
                 (format (standard-output) "call with ~A ~A~%" 'C011110000 'C011110001)
                 (f (create (class C011110001)) (create (class C01111000))))
(defclass C011110010 () ())
(defmethod f ((x C011110010) (y C011110010)) nil)
(defclass C011110011 () ())
(defmethod f ((x C011110011) (y C011110011)) nil)
(defclass C01111001 (C011110010 C011110011) ())
(defmethod f ((x C011110011) (y C011110010))
                 (format (standard-output) "call with ~A ~A~%" 'C011110011 'C011110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110010) (y C011110011))
                 (format (standard-output) "call with ~A ~A~%" 'C011110010 'C011110011)
                 (f (create (class C011110011)) (create (class C01111001))))
(defclass C0111100 (C01111000 C01111001) ())
(defmethod f ((x C01111001) (y C01111000))
                 (format (standard-output) "call with ~A ~A~%" 'C01111001 'C01111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111000) (y C01111001))
                 (format (standard-output) "call with ~A ~A~%" 'C01111000 'C01111001)
                 (f (create (class C01111001)) (create (class C0111100))))
(defclass C011110100 () ())
(defmethod f ((x C011110100) (y C011110100)) nil)
(defclass C011110101 () ())
(defmethod f ((x C011110101) (y C011110101)) nil)
(defclass C01111010 (C011110100 C011110101) ())
(defmethod f ((x C011110101) (y C011110100))
                 (format (standard-output) "call with ~A ~A~%" 'C011110101 'C011110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110100) (y C011110101))
                 (format (standard-output) "call with ~A ~A~%" 'C011110100 'C011110101)
                 (f (create (class C011110101)) (create (class C01111010))))
(defclass C011110110 () ())
(defmethod f ((x C011110110) (y C011110110)) nil)
(defclass C011110111 () ())
(defmethod f ((x C011110111) (y C011110111)) nil)
(defclass C01111011 (C011110110 C011110111) ())
(defmethod f ((x C011110111) (y C011110110))
                 (format (standard-output) "call with ~A ~A~%" 'C011110111 'C011110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110110) (y C011110111))
                 (format (standard-output) "call with ~A ~A~%" 'C011110110 'C011110111)
                 (f (create (class C011110111)) (create (class C01111011))))
(defclass C0111101 (C01111010 C01111011) ())
(defmethod f ((x C01111011) (y C01111010))
                 (format (standard-output) "call with ~A ~A~%" 'C01111011 'C01111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111010) (y C01111011))
                 (format (standard-output) "call with ~A ~A~%" 'C01111010 'C01111011)
                 (f (create (class C01111011)) (create (class C0111101))))
(defclass C011110 (C0111100 C0111101) ())
(defmethod f ((x C0111101) (y C0111100))
                 (format (standard-output) "call with ~A ~A~%" 'C0111101 'C0111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111100) (y C0111101))
                 (format (standard-output) "call with ~A ~A~%" 'C0111100 'C0111101)
                 (f (create (class C0111101)) (create (class C011110))))
(defclass C011111000 () ())
(defmethod f ((x C011111000) (y C011111000)) nil)
(defclass C011111001 () ())
(defmethod f ((x C011111001) (y C011111001)) nil)
(defclass C01111100 (C011111000 C011111001) ())
(defmethod f ((x C011111001) (y C011111000))
                 (format (standard-output) "call with ~A ~A~%" 'C011111001 'C011111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011111000) (y C011111001))
                 (format (standard-output) "call with ~A ~A~%" 'C011111000 'C011111001)
                 (f (create (class C011111001)) (create (class C01111100))))
(defclass C011111010 () ())
(defmethod f ((x C011111010) (y C011111010)) nil)
(defclass C011111011 () ())
(defmethod f ((x C011111011) (y C011111011)) nil)
(defclass C01111101 (C011111010 C011111011) ())
(defmethod f ((x C011111011) (y C011111010))
                 (format (standard-output) "call with ~A ~A~%" 'C011111011 'C011111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011111010) (y C011111011))
                 (format (standard-output) "call with ~A ~A~%" 'C011111010 'C011111011)
                 (f (create (class C011111011)) (create (class C01111101))))
(defclass C0111110 (C01111100 C01111101) ())
(defmethod f ((x C01111101) (y C01111100))
                 (format (standard-output) "call with ~A ~A~%" 'C01111101 'C01111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111100) (y C01111101))
                 (format (standard-output) "call with ~A ~A~%" 'C01111100 'C01111101)
                 (f (create (class C01111101)) (create (class C0111110))))
(defclass C011111100 () ())
(defmethod f ((x C011111100) (y C011111100)) nil)
(defclass C011111101 () ())
(defmethod f ((x C011111101) (y C011111101)) nil)
(defclass C01111110 (C011111100 C011111101) ())
(defmethod f ((x C011111101) (y C011111100))
                 (format (standard-output) "call with ~A ~A~%" 'C011111101 'C011111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011111100) (y C011111101))
                 (format (standard-output) "call with ~A ~A~%" 'C011111100 'C011111101)
                 (f (create (class C011111101)) (create (class C01111110))))
(defclass C011111110 () ())
(defmethod f ((x C011111110) (y C011111110)) nil)
(defclass C011111111 () ())
(defmethod f ((x C011111111) (y C011111111)) nil)
(defclass C01111111 (C011111110 C011111111) ())
(defmethod f ((x C011111111) (y C011111110))
                 (format (standard-output) "call with ~A ~A~%" 'C011111111 'C011111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011111110) (y C011111111))
                 (format (standard-output) "call with ~A ~A~%" 'C011111110 'C011111111)
                 (f (create (class C011111111)) (create (class C01111111))))
(defclass C0111111 (C01111110 C01111111) ())
(defmethod f ((x C01111111) (y C01111110))
                 (format (standard-output) "call with ~A ~A~%" 'C01111111 'C01111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01111110) (y C01111111))
                 (format (standard-output) "call with ~A ~A~%" 'C01111110 'C01111111)
                 (f (create (class C01111111)) (create (class C0111111))))
(defclass C011111 (C0111110 C0111111) ())
(defmethod f ((x C0111111) (y C0111110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111111 'C0111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0111110) (y C0111111))
                 (format (standard-output) "call with ~A ~A~%" 'C0111110 'C0111111)
                 (f (create (class C0111111)) (create (class C011111))))
(defclass C01111 (C011110 C011111) ())
(defmethod f ((x C011111) (y C011110))
                 (format (standard-output) "call with ~A ~A~%" 'C011111 'C011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110) (y C011111))
                 (format (standard-output) "call with ~A ~A~%" 'C011110 'C011111)
                 (f (create (class C011111)) (create (class C01111))))
(defclass C0111 (C01110 C01111) ())
(defmethod f ((x C01111) (y C01110))
                 (format (standard-output) "call with ~A ~A~%" 'C01111 'C01110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110) (y C01111))
                 (format (standard-output) "call with ~A ~A~%" 'C01110 'C01111)
                 (f (create (class C01111)) (create (class C0111))))
(defclass C011 (C0110 C0111) ())
(defmethod f ((x C0111) (y C0110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111 'C0110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110) (y C0111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110 'C0111)
                 (f (create (class C0111)) (create (class C011))))
(defclass C01 (C010 C011) ())
(defmethod f ((x C011) (y C010))
                 (format (standard-output) "call with ~A ~A~%" 'C011 'C010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010) (y C011))
                 (format (standard-output) "call with ~A ~A~%" 'C010 'C011)
                 (f (create (class C011)) (create (class C01))))
(defclass C0 (C00 C01) ())
(defmethod f ((x C01) (y C00))
                 (format (standard-output) "call with ~A ~A~%" 'C01 'C00)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00) (y C01))
                 (format (standard-output) "call with ~A ~A~%" 'C00 'C01)
                 (f (create (class C01)) (create (class C0))))
(defclass C100000000 () ())
(defmethod f ((x C100000000) (y C100000000)) nil)
(defclass C100000001 () ())
(defmethod f ((x C100000001) (y C100000001)) nil)
(defclass C10000000 (C100000000 C100000001) ())
(defmethod f ((x C100000001) (y C100000000))
                 (format (standard-output) "call with ~A ~A~%" 'C100000001 'C100000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000000) (y C100000001))
                 (format (standard-output) "call with ~A ~A~%" 'C100000000 'C100000001)
                 (f (create (class C100000001)) (create (class C10000000))))
(defclass C100000010 () ())
(defmethod f ((x C100000010) (y C100000010)) nil)
(defclass C100000011 () ())
(defmethod f ((x C100000011) (y C100000011)) nil)
(defclass C10000001 (C100000010 C100000011) ())
(defmethod f ((x C100000011) (y C100000010))
                 (format (standard-output) "call with ~A ~A~%" 'C100000011 'C100000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000010) (y C100000011))
                 (format (standard-output) "call with ~A ~A~%" 'C100000010 'C100000011)
                 (f (create (class C100000011)) (create (class C10000001))))
(defclass C1000000 (C10000000 C10000001) ())
(defmethod f ((x C10000001) (y C10000000))
                 (format (standard-output) "call with ~A ~A~%" 'C10000001 'C10000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000000) (y C10000001))
                 (format (standard-output) "call with ~A ~A~%" 'C10000000 'C10000001)
                 (f (create (class C10000001)) (create (class C1000000))))
(defclass C100000100 () ())
(defmethod f ((x C100000100) (y C100000100)) nil)
(defclass C100000101 () ())
(defmethod f ((x C100000101) (y C100000101)) nil)
(defclass C10000010 (C100000100 C100000101) ())
(defmethod f ((x C100000101) (y C100000100))
                 (format (standard-output) "call with ~A ~A~%" 'C100000101 'C100000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000100) (y C100000101))
                 (format (standard-output) "call with ~A ~A~%" 'C100000100 'C100000101)
                 (f (create (class C100000101)) (create (class C10000010))))
(defclass C100000110 () ())
(defmethod f ((x C100000110) (y C100000110)) nil)
(defclass C100000111 () ())
(defmethod f ((x C100000111) (y C100000111)) nil)
(defclass C10000011 (C100000110 C100000111) ())
(defmethod f ((x C100000111) (y C100000110))
                 (format (standard-output) "call with ~A ~A~%" 'C100000111 'C100000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000110) (y C100000111))
                 (format (standard-output) "call with ~A ~A~%" 'C100000110 'C100000111)
                 (f (create (class C100000111)) (create (class C10000011))))
(defclass C1000001 (C10000010 C10000011) ())
(defmethod f ((x C10000011) (y C10000010))
                 (format (standard-output) "call with ~A ~A~%" 'C10000011 'C10000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000010) (y C10000011))
                 (format (standard-output) "call with ~A ~A~%" 'C10000010 'C10000011)
                 (f (create (class C10000011)) (create (class C1000001))))
(defclass C100000 (C1000000 C1000001) ())
(defmethod f ((x C1000001) (y C1000000))
                 (format (standard-output) "call with ~A ~A~%" 'C1000001 'C1000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000000) (y C1000001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000000 'C1000001)
                 (f (create (class C1000001)) (create (class C100000))))
(defclass C100001000 () ())
(defmethod f ((x C100001000) (y C100001000)) nil)
(defclass C100001001 () ())
(defmethod f ((x C100001001) (y C100001001)) nil)
(defclass C10000100 (C100001000 C100001001) ())
(defmethod f ((x C100001001) (y C100001000))
                 (format (standard-output) "call with ~A ~A~%" 'C100001001 'C100001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100001000) (y C100001001))
                 (format (standard-output) "call with ~A ~A~%" 'C100001000 'C100001001)
                 (f (create (class C100001001)) (create (class C10000100))))
(defclass C100001010 () ())
(defmethod f ((x C100001010) (y C100001010)) nil)
(defclass C100001011 () ())
(defmethod f ((x C100001011) (y C100001011)) nil)
(defclass C10000101 (C100001010 C100001011) ())
(defmethod f ((x C100001011) (y C100001010))
                 (format (standard-output) "call with ~A ~A~%" 'C100001011 'C100001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100001010) (y C100001011))
                 (format (standard-output) "call with ~A ~A~%" 'C100001010 'C100001011)
                 (f (create (class C100001011)) (create (class C10000101))))
(defclass C1000010 (C10000100 C10000101) ())
(defmethod f ((x C10000101) (y C10000100))
                 (format (standard-output) "call with ~A ~A~%" 'C10000101 'C10000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000100) (y C10000101))
                 (format (standard-output) "call with ~A ~A~%" 'C10000100 'C10000101)
                 (f (create (class C10000101)) (create (class C1000010))))
(defclass C100001100 () ())
(defmethod f ((x C100001100) (y C100001100)) nil)
(defclass C100001101 () ())
(defmethod f ((x C100001101) (y C100001101)) nil)
(defclass C10000110 (C100001100 C100001101) ())
(defmethod f ((x C100001101) (y C100001100))
                 (format (standard-output) "call with ~A ~A~%" 'C100001101 'C100001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100001100) (y C100001101))
                 (format (standard-output) "call with ~A ~A~%" 'C100001100 'C100001101)
                 (f (create (class C100001101)) (create (class C10000110))))
(defclass C100001110 () ())
(defmethod f ((x C100001110) (y C100001110)) nil)
(defclass C100001111 () ())
(defmethod f ((x C100001111) (y C100001111)) nil)
(defclass C10000111 (C100001110 C100001111) ())
(defmethod f ((x C100001111) (y C100001110))
                 (format (standard-output) "call with ~A ~A~%" 'C100001111 'C100001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100001110) (y C100001111))
                 (format (standard-output) "call with ~A ~A~%" 'C100001110 'C100001111)
                 (f (create (class C100001111)) (create (class C10000111))))
(defclass C1000011 (C10000110 C10000111) ())
(defmethod f ((x C10000111) (y C10000110))
                 (format (standard-output) "call with ~A ~A~%" 'C10000111 'C10000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000110) (y C10000111))
                 (format (standard-output) "call with ~A ~A~%" 'C10000110 'C10000111)
                 (f (create (class C10000111)) (create (class C1000011))))
(defclass C100001 (C1000010 C1000011) ())
(defmethod f ((x C1000011) (y C1000010))
                 (format (standard-output) "call with ~A ~A~%" 'C1000011 'C1000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000010) (y C1000011))
                 (format (standard-output) "call with ~A ~A~%" 'C1000010 'C1000011)
                 (f (create (class C1000011)) (create (class C100001))))
(defclass C10000 (C100000 C100001) ())
(defmethod f ((x C100001) (y C100000))
                 (format (standard-output) "call with ~A ~A~%" 'C100001 'C100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000) (y C100001))
                 (format (standard-output) "call with ~A ~A~%" 'C100000 'C100001)
                 (f (create (class C100001)) (create (class C10000))))
(defclass C100010000 () ())
(defmethod f ((x C100010000) (y C100010000)) nil)
(defclass C100010001 () ())
(defmethod f ((x C100010001) (y C100010001)) nil)
(defclass C10001000 (C100010000 C100010001) ())
(defmethod f ((x C100010001) (y C100010000))
                 (format (standard-output) "call with ~A ~A~%" 'C100010001 'C100010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010000) (y C100010001))
                 (format (standard-output) "call with ~A ~A~%" 'C100010000 'C100010001)
                 (f (create (class C100010001)) (create (class C10001000))))
(defclass C100010010 () ())
(defmethod f ((x C100010010) (y C100010010)) nil)
(defclass C100010011 () ())
(defmethod f ((x C100010011) (y C100010011)) nil)
(defclass C10001001 (C100010010 C100010011) ())
(defmethod f ((x C100010011) (y C100010010))
                 (format (standard-output) "call with ~A ~A~%" 'C100010011 'C100010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010010) (y C100010011))
                 (format (standard-output) "call with ~A ~A~%" 'C100010010 'C100010011)
                 (f (create (class C100010011)) (create (class C10001001))))
(defclass C1000100 (C10001000 C10001001) ())
(defmethod f ((x C10001001) (y C10001000))
                 (format (standard-output) "call with ~A ~A~%" 'C10001001 'C10001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001000) (y C10001001))
                 (format (standard-output) "call with ~A ~A~%" 'C10001000 'C10001001)
                 (f (create (class C10001001)) (create (class C1000100))))
(defclass C100010100 () ())
(defmethod f ((x C100010100) (y C100010100)) nil)
(defclass C100010101 () ())
(defmethod f ((x C100010101) (y C100010101)) nil)
(defclass C10001010 (C100010100 C100010101) ())
(defmethod f ((x C100010101) (y C100010100))
                 (format (standard-output) "call with ~A ~A~%" 'C100010101 'C100010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010100) (y C100010101))
                 (format (standard-output) "call with ~A ~A~%" 'C100010100 'C100010101)
                 (f (create (class C100010101)) (create (class C10001010))))
(defclass C100010110 () ())
(defmethod f ((x C100010110) (y C100010110)) nil)
(defclass C100010111 () ())
(defmethod f ((x C100010111) (y C100010111)) nil)
(defclass C10001011 (C100010110 C100010111) ())
(defmethod f ((x C100010111) (y C100010110))
                 (format (standard-output) "call with ~A ~A~%" 'C100010111 'C100010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010110) (y C100010111))
                 (format (standard-output) "call with ~A ~A~%" 'C100010110 'C100010111)
                 (f (create (class C100010111)) (create (class C10001011))))
(defclass C1000101 (C10001010 C10001011) ())
(defmethod f ((x C10001011) (y C10001010))
                 (format (standard-output) "call with ~A ~A~%" 'C10001011 'C10001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001010) (y C10001011))
                 (format (standard-output) "call with ~A ~A~%" 'C10001010 'C10001011)
                 (f (create (class C10001011)) (create (class C1000101))))
(defclass C100010 (C1000100 C1000101) ())
(defmethod f ((x C1000101) (y C1000100))
                 (format (standard-output) "call with ~A ~A~%" 'C1000101 'C1000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000100) (y C1000101))
                 (format (standard-output) "call with ~A ~A~%" 'C1000100 'C1000101)
                 (f (create (class C1000101)) (create (class C100010))))
(defclass C100011000 () ())
(defmethod f ((x C100011000) (y C100011000)) nil)
(defclass C100011001 () ())
(defmethod f ((x C100011001) (y C100011001)) nil)
(defclass C10001100 (C100011000 C100011001) ())
(defmethod f ((x C100011001) (y C100011000))
                 (format (standard-output) "call with ~A ~A~%" 'C100011001 'C100011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100011000) (y C100011001))
                 (format (standard-output) "call with ~A ~A~%" 'C100011000 'C100011001)
                 (f (create (class C100011001)) (create (class C10001100))))
(defclass C100011010 () ())
(defmethod f ((x C100011010) (y C100011010)) nil)
(defclass C100011011 () ())
(defmethod f ((x C100011011) (y C100011011)) nil)
(defclass C10001101 (C100011010 C100011011) ())
(defmethod f ((x C100011011) (y C100011010))
                 (format (standard-output) "call with ~A ~A~%" 'C100011011 'C100011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100011010) (y C100011011))
                 (format (standard-output) "call with ~A ~A~%" 'C100011010 'C100011011)
                 (f (create (class C100011011)) (create (class C10001101))))
(defclass C1000110 (C10001100 C10001101) ())
(defmethod f ((x C10001101) (y C10001100))
                 (format (standard-output) "call with ~A ~A~%" 'C10001101 'C10001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001100) (y C10001101))
                 (format (standard-output) "call with ~A ~A~%" 'C10001100 'C10001101)
                 (f (create (class C10001101)) (create (class C1000110))))
(defclass C100011100 () ())
(defmethod f ((x C100011100) (y C100011100)) nil)
(defclass C100011101 () ())
(defmethod f ((x C100011101) (y C100011101)) nil)
(defclass C10001110 (C100011100 C100011101) ())
(defmethod f ((x C100011101) (y C100011100))
                 (format (standard-output) "call with ~A ~A~%" 'C100011101 'C100011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100011100) (y C100011101))
                 (format (standard-output) "call with ~A ~A~%" 'C100011100 'C100011101)
                 (f (create (class C100011101)) (create (class C10001110))))
(defclass C100011110 () ())
(defmethod f ((x C100011110) (y C100011110)) nil)
(defclass C100011111 () ())
(defmethod f ((x C100011111) (y C100011111)) nil)
(defclass C10001111 (C100011110 C100011111) ())
(defmethod f ((x C100011111) (y C100011110))
                 (format (standard-output) "call with ~A ~A~%" 'C100011111 'C100011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100011110) (y C100011111))
                 (format (standard-output) "call with ~A ~A~%" 'C100011110 'C100011111)
                 (f (create (class C100011111)) (create (class C10001111))))
(defclass C1000111 (C10001110 C10001111) ())
(defmethod f ((x C10001111) (y C10001110))
                 (format (standard-output) "call with ~A ~A~%" 'C10001111 'C10001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10001110) (y C10001111))
                 (format (standard-output) "call with ~A ~A~%" 'C10001110 'C10001111)
                 (f (create (class C10001111)) (create (class C1000111))))
(defclass C100011 (C1000110 C1000111) ())
(defmethod f ((x C1000111) (y C1000110))
                 (format (standard-output) "call with ~A ~A~%" 'C1000111 'C1000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000110) (y C1000111))
                 (format (standard-output) "call with ~A ~A~%" 'C1000110 'C1000111)
                 (f (create (class C1000111)) (create (class C100011))))
(defclass C10001 (C100010 C100011) ())
(defmethod f ((x C100011) (y C100010))
                 (format (standard-output) "call with ~A ~A~%" 'C100011 'C100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010) (y C100011))
                 (format (standard-output) "call with ~A ~A~%" 'C100010 'C100011)
                 (f (create (class C100011)) (create (class C10001))))
(defclass C1000 (C10000 C10001) ())
(defmethod f ((x C10001) (y C10000))
                 (format (standard-output) "call with ~A ~A~%" 'C10001 'C10000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000) (y C10001))
                 (format (standard-output) "call with ~A ~A~%" 'C10000 'C10001)
                 (f (create (class C10001)) (create (class C1000))))
(defclass C100100000 () ())
(defmethod f ((x C100100000) (y C100100000)) nil)
(defclass C100100001 () ())
(defmethod f ((x C100100001) (y C100100001)) nil)
(defclass C10010000 (C100100000 C100100001) ())
(defmethod f ((x C100100001) (y C100100000))
                 (format (standard-output) "call with ~A ~A~%" 'C100100001 'C100100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100000) (y C100100001))
                 (format (standard-output) "call with ~A ~A~%" 'C100100000 'C100100001)
                 (f (create (class C100100001)) (create (class C10010000))))
(defclass C100100010 () ())
(defmethod f ((x C100100010) (y C100100010)) nil)
(defclass C100100011 () ())
(defmethod f ((x C100100011) (y C100100011)) nil)
(defclass C10010001 (C100100010 C100100011) ())
(defmethod f ((x C100100011) (y C100100010))
                 (format (standard-output) "call with ~A ~A~%" 'C100100011 'C100100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100010) (y C100100011))
                 (format (standard-output) "call with ~A ~A~%" 'C100100010 'C100100011)
                 (f (create (class C100100011)) (create (class C10010001))))
(defclass C1001000 (C10010000 C10010001) ())
(defmethod f ((x C10010001) (y C10010000))
                 (format (standard-output) "call with ~A ~A~%" 'C10010001 'C10010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010000) (y C10010001))
                 (format (standard-output) "call with ~A ~A~%" 'C10010000 'C10010001)
                 (f (create (class C10010001)) (create (class C1001000))))
(defclass C100100100 () ())
(defmethod f ((x C100100100) (y C100100100)) nil)
(defclass C100100101 () ())
(defmethod f ((x C100100101) (y C100100101)) nil)
(defclass C10010010 (C100100100 C100100101) ())
(defmethod f ((x C100100101) (y C100100100))
                 (format (standard-output) "call with ~A ~A~%" 'C100100101 'C100100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100100) (y C100100101))
                 (format (standard-output) "call with ~A ~A~%" 'C100100100 'C100100101)
                 (f (create (class C100100101)) (create (class C10010010))))
(defclass C100100110 () ())
(defmethod f ((x C100100110) (y C100100110)) nil)
(defclass C100100111 () ())
(defmethod f ((x C100100111) (y C100100111)) nil)
(defclass C10010011 (C100100110 C100100111) ())
(defmethod f ((x C100100111) (y C100100110))
                 (format (standard-output) "call with ~A ~A~%" 'C100100111 'C100100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100110) (y C100100111))
                 (format (standard-output) "call with ~A ~A~%" 'C100100110 'C100100111)
                 (f (create (class C100100111)) (create (class C10010011))))
(defclass C1001001 (C10010010 C10010011) ())
(defmethod f ((x C10010011) (y C10010010))
                 (format (standard-output) "call with ~A ~A~%" 'C10010011 'C10010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010010) (y C10010011))
                 (format (standard-output) "call with ~A ~A~%" 'C10010010 'C10010011)
                 (f (create (class C10010011)) (create (class C1001001))))
(defclass C100100 (C1001000 C1001001) ())
(defmethod f ((x C1001001) (y C1001000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001001 'C1001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001000) (y C1001001))
                 (format (standard-output) "call with ~A ~A~%" 'C1001000 'C1001001)
                 (f (create (class C1001001)) (create (class C100100))))
(defclass C100101000 () ())
(defmethod f ((x C100101000) (y C100101000)) nil)
(defclass C100101001 () ())
(defmethod f ((x C100101001) (y C100101001)) nil)
(defclass C10010100 (C100101000 C100101001) ())
(defmethod f ((x C100101001) (y C100101000))
                 (format (standard-output) "call with ~A ~A~%" 'C100101001 'C100101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100101000) (y C100101001))
                 (format (standard-output) "call with ~A ~A~%" 'C100101000 'C100101001)
                 (f (create (class C100101001)) (create (class C10010100))))
(defclass C100101010 () ())
(defmethod f ((x C100101010) (y C100101010)) nil)
(defclass C100101011 () ())
(defmethod f ((x C100101011) (y C100101011)) nil)
(defclass C10010101 (C100101010 C100101011) ())
(defmethod f ((x C100101011) (y C100101010))
                 (format (standard-output) "call with ~A ~A~%" 'C100101011 'C100101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100101010) (y C100101011))
                 (format (standard-output) "call with ~A ~A~%" 'C100101010 'C100101011)
                 (f (create (class C100101011)) (create (class C10010101))))
(defclass C1001010 (C10010100 C10010101) ())
(defmethod f ((x C10010101) (y C10010100))
                 (format (standard-output) "call with ~A ~A~%" 'C10010101 'C10010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010100) (y C10010101))
                 (format (standard-output) "call with ~A ~A~%" 'C10010100 'C10010101)
                 (f (create (class C10010101)) (create (class C1001010))))
(defclass C100101100 () ())
(defmethod f ((x C100101100) (y C100101100)) nil)
(defclass C100101101 () ())
(defmethod f ((x C100101101) (y C100101101)) nil)
(defclass C10010110 (C100101100 C100101101) ())
(defmethod f ((x C100101101) (y C100101100))
                 (format (standard-output) "call with ~A ~A~%" 'C100101101 'C100101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100101100) (y C100101101))
                 (format (standard-output) "call with ~A ~A~%" 'C100101100 'C100101101)
                 (f (create (class C100101101)) (create (class C10010110))))
(defclass C100101110 () ())
(defmethod f ((x C100101110) (y C100101110)) nil)
(defclass C100101111 () ())
(defmethod f ((x C100101111) (y C100101111)) nil)
(defclass C10010111 (C100101110 C100101111) ())
(defmethod f ((x C100101111) (y C100101110))
                 (format (standard-output) "call with ~A ~A~%" 'C100101111 'C100101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100101110) (y C100101111))
                 (format (standard-output) "call with ~A ~A~%" 'C100101110 'C100101111)
                 (f (create (class C100101111)) (create (class C10010111))))
(defclass C1001011 (C10010110 C10010111) ())
(defmethod f ((x C10010111) (y C10010110))
                 (format (standard-output) "call with ~A ~A~%" 'C10010111 'C10010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010110) (y C10010111))
                 (format (standard-output) "call with ~A ~A~%" 'C10010110 'C10010111)
                 (f (create (class C10010111)) (create (class C1001011))))
(defclass C100101 (C1001010 C1001011) ())
(defmethod f ((x C1001011) (y C1001010))
                 (format (standard-output) "call with ~A ~A~%" 'C1001011 'C1001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001010) (y C1001011))
                 (format (standard-output) "call with ~A ~A~%" 'C1001010 'C1001011)
                 (f (create (class C1001011)) (create (class C100101))))
(defclass C10010 (C100100 C100101) ())
(defmethod f ((x C100101) (y C100100))
                 (format (standard-output) "call with ~A ~A~%" 'C100101 'C100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100) (y C100101))
                 (format (standard-output) "call with ~A ~A~%" 'C100100 'C100101)
                 (f (create (class C100101)) (create (class C10010))))
(defclass C100110000 () ())
(defmethod f ((x C100110000) (y C100110000)) nil)
(defclass C100110001 () ())
(defmethod f ((x C100110001) (y C100110001)) nil)
(defclass C10011000 (C100110000 C100110001) ())
(defmethod f ((x C100110001) (y C100110000))
                 (format (standard-output) "call with ~A ~A~%" 'C100110001 'C100110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110000) (y C100110001))
                 (format (standard-output) "call with ~A ~A~%" 'C100110000 'C100110001)
                 (f (create (class C100110001)) (create (class C10011000))))
(defclass C100110010 () ())
(defmethod f ((x C100110010) (y C100110010)) nil)
(defclass C100110011 () ())
(defmethod f ((x C100110011) (y C100110011)) nil)
(defclass C10011001 (C100110010 C100110011) ())
(defmethod f ((x C100110011) (y C100110010))
                 (format (standard-output) "call with ~A ~A~%" 'C100110011 'C100110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110010) (y C100110011))
                 (format (standard-output) "call with ~A ~A~%" 'C100110010 'C100110011)
                 (f (create (class C100110011)) (create (class C10011001))))
(defclass C1001100 (C10011000 C10011001) ())
(defmethod f ((x C10011001) (y C10011000))
                 (format (standard-output) "call with ~A ~A~%" 'C10011001 'C10011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011000) (y C10011001))
                 (format (standard-output) "call with ~A ~A~%" 'C10011000 'C10011001)
                 (f (create (class C10011001)) (create (class C1001100))))
(defclass C100110100 () ())
(defmethod f ((x C100110100) (y C100110100)) nil)
(defclass C100110101 () ())
(defmethod f ((x C100110101) (y C100110101)) nil)
(defclass C10011010 (C100110100 C100110101) ())
(defmethod f ((x C100110101) (y C100110100))
                 (format (standard-output) "call with ~A ~A~%" 'C100110101 'C100110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110100) (y C100110101))
                 (format (standard-output) "call with ~A ~A~%" 'C100110100 'C100110101)
                 (f (create (class C100110101)) (create (class C10011010))))
(defclass C100110110 () ())
(defmethod f ((x C100110110) (y C100110110)) nil)
(defclass C100110111 () ())
(defmethod f ((x C100110111) (y C100110111)) nil)
(defclass C10011011 (C100110110 C100110111) ())
(defmethod f ((x C100110111) (y C100110110))
                 (format (standard-output) "call with ~A ~A~%" 'C100110111 'C100110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110110) (y C100110111))
                 (format (standard-output) "call with ~A ~A~%" 'C100110110 'C100110111)
                 (f (create (class C100110111)) (create (class C10011011))))
(defclass C1001101 (C10011010 C10011011) ())
(defmethod f ((x C10011011) (y C10011010))
                 (format (standard-output) "call with ~A ~A~%" 'C10011011 'C10011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011010) (y C10011011))
                 (format (standard-output) "call with ~A ~A~%" 'C10011010 'C10011011)
                 (f (create (class C10011011)) (create (class C1001101))))
(defclass C100110 (C1001100 C1001101) ())
(defmethod f ((x C1001101) (y C1001100))
                 (format (standard-output) "call with ~A ~A~%" 'C1001101 'C1001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001100) (y C1001101))
                 (format (standard-output) "call with ~A ~A~%" 'C1001100 'C1001101)
                 (f (create (class C1001101)) (create (class C100110))))
(defclass C100111000 () ())
(defmethod f ((x C100111000) (y C100111000)) nil)
(defclass C100111001 () ())
(defmethod f ((x C100111001) (y C100111001)) nil)
(defclass C10011100 (C100111000 C100111001) ())
(defmethod f ((x C100111001) (y C100111000))
                 (format (standard-output) "call with ~A ~A~%" 'C100111001 'C100111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100111000) (y C100111001))
                 (format (standard-output) "call with ~A ~A~%" 'C100111000 'C100111001)
                 (f (create (class C100111001)) (create (class C10011100))))
(defclass C100111010 () ())
(defmethod f ((x C100111010) (y C100111010)) nil)
(defclass C100111011 () ())
(defmethod f ((x C100111011) (y C100111011)) nil)
(defclass C10011101 (C100111010 C100111011) ())
(defmethod f ((x C100111011) (y C100111010))
                 (format (standard-output) "call with ~A ~A~%" 'C100111011 'C100111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100111010) (y C100111011))
                 (format (standard-output) "call with ~A ~A~%" 'C100111010 'C100111011)
                 (f (create (class C100111011)) (create (class C10011101))))
(defclass C1001110 (C10011100 C10011101) ())
(defmethod f ((x C10011101) (y C10011100))
                 (format (standard-output) "call with ~A ~A~%" 'C10011101 'C10011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011100) (y C10011101))
                 (format (standard-output) "call with ~A ~A~%" 'C10011100 'C10011101)
                 (f (create (class C10011101)) (create (class C1001110))))
(defclass C100111100 () ())
(defmethod f ((x C100111100) (y C100111100)) nil)
(defclass C100111101 () ())
(defmethod f ((x C100111101) (y C100111101)) nil)
(defclass C10011110 (C100111100 C100111101) ())
(defmethod f ((x C100111101) (y C100111100))
                 (format (standard-output) "call with ~A ~A~%" 'C100111101 'C100111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100111100) (y C100111101))
                 (format (standard-output) "call with ~A ~A~%" 'C100111100 'C100111101)
                 (f (create (class C100111101)) (create (class C10011110))))
(defclass C100111110 () ())
(defmethod f ((x C100111110) (y C100111110)) nil)
(defclass C100111111 () ())
(defmethod f ((x C100111111) (y C100111111)) nil)
(defclass C10011111 (C100111110 C100111111) ())
(defmethod f ((x C100111111) (y C100111110))
                 (format (standard-output) "call with ~A ~A~%" 'C100111111 'C100111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100111110) (y C100111111))
                 (format (standard-output) "call with ~A ~A~%" 'C100111110 'C100111111)
                 (f (create (class C100111111)) (create (class C10011111))))
(defclass C1001111 (C10011110 C10011111) ())
(defmethod f ((x C10011111) (y C10011110))
                 (format (standard-output) "call with ~A ~A~%" 'C10011111 'C10011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10011110) (y C10011111))
                 (format (standard-output) "call with ~A ~A~%" 'C10011110 'C10011111)
                 (f (create (class C10011111)) (create (class C1001111))))
(defclass C100111 (C1001110 C1001111) ())
(defmethod f ((x C1001111) (y C1001110))
                 (format (standard-output) "call with ~A ~A~%" 'C1001111 'C1001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1001110) (y C1001111))
                 (format (standard-output) "call with ~A ~A~%" 'C1001110 'C1001111)
                 (f (create (class C1001111)) (create (class C100111))))
(defclass C10011 (C100110 C100111) ())
(defmethod f ((x C100111) (y C100110))
                 (format (standard-output) "call with ~A ~A~%" 'C100111 'C100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110) (y C100111))
                 (format (standard-output) "call with ~A ~A~%" 'C100110 'C100111)
                 (f (create (class C100111)) (create (class C10011))))
(defclass C1001 (C10010 C10011) ())
(defmethod f ((x C10011) (y C10010))
                 (format (standard-output) "call with ~A ~A~%" 'C10011 'C10010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010) (y C10011))
                 (format (standard-output) "call with ~A ~A~%" 'C10010 'C10011)
                 (f (create (class C10011)) (create (class C1001))))
(defclass C100 (C1000 C1001) ())
(defmethod f ((x C1001) (y C1000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001 'C1000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000) (y C1001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000 'C1001)
                 (f (create (class C1001)) (create (class C100))))
(defclass C101000000 () ())
(defmethod f ((x C101000000) (y C101000000)) nil)
(defclass C101000001 () ())
(defmethod f ((x C101000001) (y C101000001)) nil)
(defclass C10100000 (C101000000 C101000001) ())
(defmethod f ((x C101000001) (y C101000000))
                 (format (standard-output) "call with ~A ~A~%" 'C101000001 'C101000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000000) (y C101000001))
                 (format (standard-output) "call with ~A ~A~%" 'C101000000 'C101000001)
                 (f (create (class C101000001)) (create (class C10100000))))
(defclass C101000010 () ())
(defmethod f ((x C101000010) (y C101000010)) nil)
(defclass C101000011 () ())
(defmethod f ((x C101000011) (y C101000011)) nil)
(defclass C10100001 (C101000010 C101000011) ())
(defmethod f ((x C101000011) (y C101000010))
                 (format (standard-output) "call with ~A ~A~%" 'C101000011 'C101000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000010) (y C101000011))
                 (format (standard-output) "call with ~A ~A~%" 'C101000010 'C101000011)
                 (f (create (class C101000011)) (create (class C10100001))))
(defclass C1010000 (C10100000 C10100001) ())
(defmethod f ((x C10100001) (y C10100000))
                 (format (standard-output) "call with ~A ~A~%" 'C10100001 'C10100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100000) (y C10100001))
                 (format (standard-output) "call with ~A ~A~%" 'C10100000 'C10100001)
                 (f (create (class C10100001)) (create (class C1010000))))
(defclass C101000100 () ())
(defmethod f ((x C101000100) (y C101000100)) nil)
(defclass C101000101 () ())
(defmethod f ((x C101000101) (y C101000101)) nil)
(defclass C10100010 (C101000100 C101000101) ())
(defmethod f ((x C101000101) (y C101000100))
                 (format (standard-output) "call with ~A ~A~%" 'C101000101 'C101000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000100) (y C101000101))
                 (format (standard-output) "call with ~A ~A~%" 'C101000100 'C101000101)
                 (f (create (class C101000101)) (create (class C10100010))))
(defclass C101000110 () ())
(defmethod f ((x C101000110) (y C101000110)) nil)
(defclass C101000111 () ())
(defmethod f ((x C101000111) (y C101000111)) nil)
(defclass C10100011 (C101000110 C101000111) ())
(defmethod f ((x C101000111) (y C101000110))
                 (format (standard-output) "call with ~A ~A~%" 'C101000111 'C101000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000110) (y C101000111))
                 (format (standard-output) "call with ~A ~A~%" 'C101000110 'C101000111)
                 (f (create (class C101000111)) (create (class C10100011))))
(defclass C1010001 (C10100010 C10100011) ())
(defmethod f ((x C10100011) (y C10100010))
                 (format (standard-output) "call with ~A ~A~%" 'C10100011 'C10100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100010) (y C10100011))
                 (format (standard-output) "call with ~A ~A~%" 'C10100010 'C10100011)
                 (f (create (class C10100011)) (create (class C1010001))))
(defclass C101000 (C1010000 C1010001) ())
(defmethod f ((x C1010001) (y C1010000))
                 (format (standard-output) "call with ~A ~A~%" 'C1010001 'C1010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010000) (y C1010001))
                 (format (standard-output) "call with ~A ~A~%" 'C1010000 'C1010001)
                 (f (create (class C1010001)) (create (class C101000))))
(defclass C101001000 () ())
(defmethod f ((x C101001000) (y C101001000)) nil)
(defclass C101001001 () ())
(defmethod f ((x C101001001) (y C101001001)) nil)
(defclass C10100100 (C101001000 C101001001) ())
(defmethod f ((x C101001001) (y C101001000))
                 (format (standard-output) "call with ~A ~A~%" 'C101001001 'C101001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101001000) (y C101001001))
                 (format (standard-output) "call with ~A ~A~%" 'C101001000 'C101001001)
                 (f (create (class C101001001)) (create (class C10100100))))
(defclass C101001010 () ())
(defmethod f ((x C101001010) (y C101001010)) nil)
(defclass C101001011 () ())
(defmethod f ((x C101001011) (y C101001011)) nil)
(defclass C10100101 (C101001010 C101001011) ())
(defmethod f ((x C101001011) (y C101001010))
                 (format (standard-output) "call with ~A ~A~%" 'C101001011 'C101001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101001010) (y C101001011))
                 (format (standard-output) "call with ~A ~A~%" 'C101001010 'C101001011)
                 (f (create (class C101001011)) (create (class C10100101))))
(defclass C1010010 (C10100100 C10100101) ())
(defmethod f ((x C10100101) (y C10100100))
                 (format (standard-output) "call with ~A ~A~%" 'C10100101 'C10100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100100) (y C10100101))
                 (format (standard-output) "call with ~A ~A~%" 'C10100100 'C10100101)
                 (f (create (class C10100101)) (create (class C1010010))))
(defclass C101001100 () ())
(defmethod f ((x C101001100) (y C101001100)) nil)
(defclass C101001101 () ())
(defmethod f ((x C101001101) (y C101001101)) nil)
(defclass C10100110 (C101001100 C101001101) ())
(defmethod f ((x C101001101) (y C101001100))
                 (format (standard-output) "call with ~A ~A~%" 'C101001101 'C101001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101001100) (y C101001101))
                 (format (standard-output) "call with ~A ~A~%" 'C101001100 'C101001101)
                 (f (create (class C101001101)) (create (class C10100110))))
(defclass C101001110 () ())
(defmethod f ((x C101001110) (y C101001110)) nil)
(defclass C101001111 () ())
(defmethod f ((x C101001111) (y C101001111)) nil)
(defclass C10100111 (C101001110 C101001111) ())
(defmethod f ((x C101001111) (y C101001110))
                 (format (standard-output) "call with ~A ~A~%" 'C101001111 'C101001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101001110) (y C101001111))
                 (format (standard-output) "call with ~A ~A~%" 'C101001110 'C101001111)
                 (f (create (class C101001111)) (create (class C10100111))))
(defclass C1010011 (C10100110 C10100111) ())
(defmethod f ((x C10100111) (y C10100110))
                 (format (standard-output) "call with ~A ~A~%" 'C10100111 'C10100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100110) (y C10100111))
                 (format (standard-output) "call with ~A ~A~%" 'C10100110 'C10100111)
                 (f (create (class C10100111)) (create (class C1010011))))
(defclass C101001 (C1010010 C1010011) ())
(defmethod f ((x C1010011) (y C1010010))
                 (format (standard-output) "call with ~A ~A~%" 'C1010011 'C1010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010010) (y C1010011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010010 'C1010011)
                 (f (create (class C1010011)) (create (class C101001))))
(defclass C10100 (C101000 C101001) ())
(defmethod f ((x C101001) (y C101000))
                 (format (standard-output) "call with ~A ~A~%" 'C101001 'C101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000) (y C101001))
                 (format (standard-output) "call with ~A ~A~%" 'C101000 'C101001)
                 (f (create (class C101001)) (create (class C10100))))
(defclass C101010000 () ())
(defmethod f ((x C101010000) (y C101010000)) nil)
(defclass C101010001 () ())
(defmethod f ((x C101010001) (y C101010001)) nil)
(defclass C10101000 (C101010000 C101010001) ())
(defmethod f ((x C101010001) (y C101010000))
                 (format (standard-output) "call with ~A ~A~%" 'C101010001 'C101010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010000) (y C101010001))
                 (format (standard-output) "call with ~A ~A~%" 'C101010000 'C101010001)
                 (f (create (class C101010001)) (create (class C10101000))))
(defclass C101010010 () ())
(defmethod f ((x C101010010) (y C101010010)) nil)
(defclass C101010011 () ())
(defmethod f ((x C101010011) (y C101010011)) nil)
(defclass C10101001 (C101010010 C101010011) ())
(defmethod f ((x C101010011) (y C101010010))
                 (format (standard-output) "call with ~A ~A~%" 'C101010011 'C101010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010010) (y C101010011))
                 (format (standard-output) "call with ~A ~A~%" 'C101010010 'C101010011)
                 (f (create (class C101010011)) (create (class C10101001))))
(defclass C1010100 (C10101000 C10101001) ())
(defmethod f ((x C10101001) (y C10101000))
                 (format (standard-output) "call with ~A ~A~%" 'C10101001 'C10101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101000) (y C10101001))
                 (format (standard-output) "call with ~A ~A~%" 'C10101000 'C10101001)
                 (f (create (class C10101001)) (create (class C1010100))))
(defclass C101010100 () ())
(defmethod f ((x C101010100) (y C101010100)) nil)
(defclass C101010101 () ())
(defmethod f ((x C101010101) (y C101010101)) nil)
(defclass C10101010 (C101010100 C101010101) ())
(defmethod f ((x C101010101) (y C101010100))
                 (format (standard-output) "call with ~A ~A~%" 'C101010101 'C101010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010100) (y C101010101))
                 (format (standard-output) "call with ~A ~A~%" 'C101010100 'C101010101)
                 (f (create (class C101010101)) (create (class C10101010))))
(defclass C101010110 () ())
(defmethod f ((x C101010110) (y C101010110)) nil)
(defclass C101010111 () ())
(defmethod f ((x C101010111) (y C101010111)) nil)
(defclass C10101011 (C101010110 C101010111) ())
(defmethod f ((x C101010111) (y C101010110))
                 (format (standard-output) "call with ~A ~A~%" 'C101010111 'C101010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010110) (y C101010111))
                 (format (standard-output) "call with ~A ~A~%" 'C101010110 'C101010111)
                 (f (create (class C101010111)) (create (class C10101011))))
(defclass C1010101 (C10101010 C10101011) ())
(defmethod f ((x C10101011) (y C10101010))
                 (format (standard-output) "call with ~A ~A~%" 'C10101011 'C10101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101010) (y C10101011))
                 (format (standard-output) "call with ~A ~A~%" 'C10101010 'C10101011)
                 (f (create (class C10101011)) (create (class C1010101))))
(defclass C101010 (C1010100 C1010101) ())
(defmethod f ((x C1010101) (y C1010100))
                 (format (standard-output) "call with ~A ~A~%" 'C1010101 'C1010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010100) (y C1010101))
                 (format (standard-output) "call with ~A ~A~%" 'C1010100 'C1010101)
                 (f (create (class C1010101)) (create (class C101010))))
(defclass C101011000 () ())
(defmethod f ((x C101011000) (y C101011000)) nil)
(defclass C101011001 () ())
(defmethod f ((x C101011001) (y C101011001)) nil)
(defclass C10101100 (C101011000 C101011001) ())
(defmethod f ((x C101011001) (y C101011000))
                 (format (standard-output) "call with ~A ~A~%" 'C101011001 'C101011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101011000) (y C101011001))
                 (format (standard-output) "call with ~A ~A~%" 'C101011000 'C101011001)
                 (f (create (class C101011001)) (create (class C10101100))))
(defclass C101011010 () ())
(defmethod f ((x C101011010) (y C101011010)) nil)
(defclass C101011011 () ())
(defmethod f ((x C101011011) (y C101011011)) nil)
(defclass C10101101 (C101011010 C101011011) ())
(defmethod f ((x C101011011) (y C101011010))
                 (format (standard-output) "call with ~A ~A~%" 'C101011011 'C101011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101011010) (y C101011011))
                 (format (standard-output) "call with ~A ~A~%" 'C101011010 'C101011011)
                 (f (create (class C101011011)) (create (class C10101101))))
(defclass C1010110 (C10101100 C10101101) ())
(defmethod f ((x C10101101) (y C10101100))
                 (format (standard-output) "call with ~A ~A~%" 'C10101101 'C10101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101100) (y C10101101))
                 (format (standard-output) "call with ~A ~A~%" 'C10101100 'C10101101)
                 (f (create (class C10101101)) (create (class C1010110))))
(defclass C101011100 () ())
(defmethod f ((x C101011100) (y C101011100)) nil)
(defclass C101011101 () ())
(defmethod f ((x C101011101) (y C101011101)) nil)
(defclass C10101110 (C101011100 C101011101) ())
(defmethod f ((x C101011101) (y C101011100))
                 (format (standard-output) "call with ~A ~A~%" 'C101011101 'C101011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101011100) (y C101011101))
                 (format (standard-output) "call with ~A ~A~%" 'C101011100 'C101011101)
                 (f (create (class C101011101)) (create (class C10101110))))
(defclass C101011110 () ())
(defmethod f ((x C101011110) (y C101011110)) nil)
(defclass C101011111 () ())
(defmethod f ((x C101011111) (y C101011111)) nil)
(defclass C10101111 (C101011110 C101011111) ())
(defmethod f ((x C101011111) (y C101011110))
                 (format (standard-output) "call with ~A ~A~%" 'C101011111 'C101011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101011110) (y C101011111))
                 (format (standard-output) "call with ~A ~A~%" 'C101011110 'C101011111)
                 (f (create (class C101011111)) (create (class C10101111))))
(defclass C1010111 (C10101110 C10101111) ())
(defmethod f ((x C10101111) (y C10101110))
                 (format (standard-output) "call with ~A ~A~%" 'C10101111 'C10101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10101110) (y C10101111))
                 (format (standard-output) "call with ~A ~A~%" 'C10101110 'C10101111)
                 (f (create (class C10101111)) (create (class C1010111))))
(defclass C101011 (C1010110 C1010111) ())
(defmethod f ((x C1010111) (y C1010110))
                 (format (standard-output) "call with ~A ~A~%" 'C1010111 'C1010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010110) (y C1010111))
                 (format (standard-output) "call with ~A ~A~%" 'C1010110 'C1010111)
                 (f (create (class C1010111)) (create (class C101011))))
(defclass C10101 (C101010 C101011) ())
(defmethod f ((x C101011) (y C101010))
                 (format (standard-output) "call with ~A ~A~%" 'C101011 'C101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010) (y C101011))
                 (format (standard-output) "call with ~A ~A~%" 'C101010 'C101011)
                 (f (create (class C101011)) (create (class C10101))))
(defclass C1010 (C10100 C10101) ())
(defmethod f ((x C10101) (y C10100))
                 (format (standard-output) "call with ~A ~A~%" 'C10101 'C10100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100) (y C10101))
                 (format (standard-output) "call with ~A ~A~%" 'C10100 'C10101)
                 (f (create (class C10101)) (create (class C1010))))
(defclass C101100000 () ())
(defmethod f ((x C101100000) (y C101100000)) nil)
(defclass C101100001 () ())
(defmethod f ((x C101100001) (y C101100001)) nil)
(defclass C10110000 (C101100000 C101100001) ())
(defmethod f ((x C101100001) (y C101100000))
                 (format (standard-output) "call with ~A ~A~%" 'C101100001 'C101100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100000) (y C101100001))
                 (format (standard-output) "call with ~A ~A~%" 'C101100000 'C101100001)
                 (f (create (class C101100001)) (create (class C10110000))))
(defclass C101100010 () ())
(defmethod f ((x C101100010) (y C101100010)) nil)
(defclass C101100011 () ())
(defmethod f ((x C101100011) (y C101100011)) nil)
(defclass C10110001 (C101100010 C101100011) ())
(defmethod f ((x C101100011) (y C101100010))
                 (format (standard-output) "call with ~A ~A~%" 'C101100011 'C101100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100010) (y C101100011))
                 (format (standard-output) "call with ~A ~A~%" 'C101100010 'C101100011)
                 (f (create (class C101100011)) (create (class C10110001))))
(defclass C1011000 (C10110000 C10110001) ())
(defmethod f ((x C10110001) (y C10110000))
                 (format (standard-output) "call with ~A ~A~%" 'C10110001 'C10110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110000) (y C10110001))
                 (format (standard-output) "call with ~A ~A~%" 'C10110000 'C10110001)
                 (f (create (class C10110001)) (create (class C1011000))))
(defclass C101100100 () ())
(defmethod f ((x C101100100) (y C101100100)) nil)
(defclass C101100101 () ())
(defmethod f ((x C101100101) (y C101100101)) nil)
(defclass C10110010 (C101100100 C101100101) ())
(defmethod f ((x C101100101) (y C101100100))
                 (format (standard-output) "call with ~A ~A~%" 'C101100101 'C101100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100100) (y C101100101))
                 (format (standard-output) "call with ~A ~A~%" 'C101100100 'C101100101)
                 (f (create (class C101100101)) (create (class C10110010))))
(defclass C101100110 () ())
(defmethod f ((x C101100110) (y C101100110)) nil)
(defclass C101100111 () ())
(defmethod f ((x C101100111) (y C101100111)) nil)
(defclass C10110011 (C101100110 C101100111) ())
(defmethod f ((x C101100111) (y C101100110))
                 (format (standard-output) "call with ~A ~A~%" 'C101100111 'C101100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100110) (y C101100111))
                 (format (standard-output) "call with ~A ~A~%" 'C101100110 'C101100111)
                 (f (create (class C101100111)) (create (class C10110011))))
(defclass C1011001 (C10110010 C10110011) ())
(defmethod f ((x C10110011) (y C10110010))
                 (format (standard-output) "call with ~A ~A~%" 'C10110011 'C10110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110010) (y C10110011))
                 (format (standard-output) "call with ~A ~A~%" 'C10110010 'C10110011)
                 (f (create (class C10110011)) (create (class C1011001))))
(defclass C101100 (C1011000 C1011001) ())
(defmethod f ((x C1011001) (y C1011000))
                 (format (standard-output) "call with ~A ~A~%" 'C1011001 'C1011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011000) (y C1011001))
                 (format (standard-output) "call with ~A ~A~%" 'C1011000 'C1011001)
                 (f (create (class C1011001)) (create (class C101100))))
(defclass C101101000 () ())
(defmethod f ((x C101101000) (y C101101000)) nil)
(defclass C101101001 () ())
(defmethod f ((x C101101001) (y C101101001)) nil)
(defclass C10110100 (C101101000 C101101001) ())
(defmethod f ((x C101101001) (y C101101000))
                 (format (standard-output) "call with ~A ~A~%" 'C101101001 'C101101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101101000) (y C101101001))
                 (format (standard-output) "call with ~A ~A~%" 'C101101000 'C101101001)
                 (f (create (class C101101001)) (create (class C10110100))))
(defclass C101101010 () ())
(defmethod f ((x C101101010) (y C101101010)) nil)
(defclass C101101011 () ())
(defmethod f ((x C101101011) (y C101101011)) nil)
(defclass C10110101 (C101101010 C101101011) ())
(defmethod f ((x C101101011) (y C101101010))
                 (format (standard-output) "call with ~A ~A~%" 'C101101011 'C101101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101101010) (y C101101011))
                 (format (standard-output) "call with ~A ~A~%" 'C101101010 'C101101011)
                 (f (create (class C101101011)) (create (class C10110101))))
(defclass C1011010 (C10110100 C10110101) ())
(defmethod f ((x C10110101) (y C10110100))
                 (format (standard-output) "call with ~A ~A~%" 'C10110101 'C10110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110100) (y C10110101))
                 (format (standard-output) "call with ~A ~A~%" 'C10110100 'C10110101)
                 (f (create (class C10110101)) (create (class C1011010))))
(defclass C101101100 () ())
(defmethod f ((x C101101100) (y C101101100)) nil)
(defclass C101101101 () ())
(defmethod f ((x C101101101) (y C101101101)) nil)
(defclass C10110110 (C101101100 C101101101) ())
(defmethod f ((x C101101101) (y C101101100))
                 (format (standard-output) "call with ~A ~A~%" 'C101101101 'C101101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101101100) (y C101101101))
                 (format (standard-output) "call with ~A ~A~%" 'C101101100 'C101101101)
                 (f (create (class C101101101)) (create (class C10110110))))
(defclass C101101110 () ())
(defmethod f ((x C101101110) (y C101101110)) nil)
(defclass C101101111 () ())
(defmethod f ((x C101101111) (y C101101111)) nil)
(defclass C10110111 (C101101110 C101101111) ())
(defmethod f ((x C101101111) (y C101101110))
                 (format (standard-output) "call with ~A ~A~%" 'C101101111 'C101101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101101110) (y C101101111))
                 (format (standard-output) "call with ~A ~A~%" 'C101101110 'C101101111)
                 (f (create (class C101101111)) (create (class C10110111))))
(defclass C1011011 (C10110110 C10110111) ())
(defmethod f ((x C10110111) (y C10110110))
                 (format (standard-output) "call with ~A ~A~%" 'C10110111 'C10110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110110) (y C10110111))
                 (format (standard-output) "call with ~A ~A~%" 'C10110110 'C10110111)
                 (f (create (class C10110111)) (create (class C1011011))))
(defclass C101101 (C1011010 C1011011) ())
(defmethod f ((x C1011011) (y C1011010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011011 'C1011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011010) (y C1011011))
                 (format (standard-output) "call with ~A ~A~%" 'C1011010 'C1011011)
                 (f (create (class C1011011)) (create (class C101101))))
(defclass C10110 (C101100 C101101) ())
(defmethod f ((x C101101) (y C101100))
                 (format (standard-output) "call with ~A ~A~%" 'C101101 'C101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100) (y C101101))
                 (format (standard-output) "call with ~A ~A~%" 'C101100 'C101101)
                 (f (create (class C101101)) (create (class C10110))))
(defclass C101110000 () ())
(defmethod f ((x C101110000) (y C101110000)) nil)
(defclass C101110001 () ())
(defmethod f ((x C101110001) (y C101110001)) nil)
(defclass C10111000 (C101110000 C101110001) ())
(defmethod f ((x C101110001) (y C101110000))
                 (format (standard-output) "call with ~A ~A~%" 'C101110001 'C101110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110000) (y C101110001))
                 (format (standard-output) "call with ~A ~A~%" 'C101110000 'C101110001)
                 (f (create (class C101110001)) (create (class C10111000))))
(defclass C101110010 () ())
(defmethod f ((x C101110010) (y C101110010)) nil)
(defclass C101110011 () ())
(defmethod f ((x C101110011) (y C101110011)) nil)
(defclass C10111001 (C101110010 C101110011) ())
(defmethod f ((x C101110011) (y C101110010))
                 (format (standard-output) "call with ~A ~A~%" 'C101110011 'C101110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110010) (y C101110011))
                 (format (standard-output) "call with ~A ~A~%" 'C101110010 'C101110011)
                 (f (create (class C101110011)) (create (class C10111001))))
(defclass C1011100 (C10111000 C10111001) ())
(defmethod f ((x C10111001) (y C10111000))
                 (format (standard-output) "call with ~A ~A~%" 'C10111001 'C10111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111000) (y C10111001))
                 (format (standard-output) "call with ~A ~A~%" 'C10111000 'C10111001)
                 (f (create (class C10111001)) (create (class C1011100))))
(defclass C101110100 () ())
(defmethod f ((x C101110100) (y C101110100)) nil)
(defclass C101110101 () ())
(defmethod f ((x C101110101) (y C101110101)) nil)
(defclass C10111010 (C101110100 C101110101) ())
(defmethod f ((x C101110101) (y C101110100))
                 (format (standard-output) "call with ~A ~A~%" 'C101110101 'C101110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110100) (y C101110101))
                 (format (standard-output) "call with ~A ~A~%" 'C101110100 'C101110101)
                 (f (create (class C101110101)) (create (class C10111010))))
(defclass C101110110 () ())
(defmethod f ((x C101110110) (y C101110110)) nil)
(defclass C101110111 () ())
(defmethod f ((x C101110111) (y C101110111)) nil)
(defclass C10111011 (C101110110 C101110111) ())
(defmethod f ((x C101110111) (y C101110110))
                 (format (standard-output) "call with ~A ~A~%" 'C101110111 'C101110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110110) (y C101110111))
                 (format (standard-output) "call with ~A ~A~%" 'C101110110 'C101110111)
                 (f (create (class C101110111)) (create (class C10111011))))
(defclass C1011101 (C10111010 C10111011) ())
(defmethod f ((x C10111011) (y C10111010))
                 (format (standard-output) "call with ~A ~A~%" 'C10111011 'C10111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111010) (y C10111011))
                 (format (standard-output) "call with ~A ~A~%" 'C10111010 'C10111011)
                 (f (create (class C10111011)) (create (class C1011101))))
(defclass C101110 (C1011100 C1011101) ())
(defmethod f ((x C1011101) (y C1011100))
                 (format (standard-output) "call with ~A ~A~%" 'C1011101 'C1011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011100) (y C1011101))
                 (format (standard-output) "call with ~A ~A~%" 'C1011100 'C1011101)
                 (f (create (class C1011101)) (create (class C101110))))
(defclass C101111000 () ())
(defmethod f ((x C101111000) (y C101111000)) nil)
(defclass C101111001 () ())
(defmethod f ((x C101111001) (y C101111001)) nil)
(defclass C10111100 (C101111000 C101111001) ())
(defmethod f ((x C101111001) (y C101111000))
                 (format (standard-output) "call with ~A ~A~%" 'C101111001 'C101111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101111000) (y C101111001))
                 (format (standard-output) "call with ~A ~A~%" 'C101111000 'C101111001)
                 (f (create (class C101111001)) (create (class C10111100))))
(defclass C101111010 () ())
(defmethod f ((x C101111010) (y C101111010)) nil)
(defclass C101111011 () ())
(defmethod f ((x C101111011) (y C101111011)) nil)
(defclass C10111101 (C101111010 C101111011) ())
(defmethod f ((x C101111011) (y C101111010))
                 (format (standard-output) "call with ~A ~A~%" 'C101111011 'C101111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101111010) (y C101111011))
                 (format (standard-output) "call with ~A ~A~%" 'C101111010 'C101111011)
                 (f (create (class C101111011)) (create (class C10111101))))
(defclass C1011110 (C10111100 C10111101) ())
(defmethod f ((x C10111101) (y C10111100))
                 (format (standard-output) "call with ~A ~A~%" 'C10111101 'C10111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111100) (y C10111101))
                 (format (standard-output) "call with ~A ~A~%" 'C10111100 'C10111101)
                 (f (create (class C10111101)) (create (class C1011110))))
(defclass C101111100 () ())
(defmethod f ((x C101111100) (y C101111100)) nil)
(defclass C101111101 () ())
(defmethod f ((x C101111101) (y C101111101)) nil)
(defclass C10111110 (C101111100 C101111101) ())
(defmethod f ((x C101111101) (y C101111100))
                 (format (standard-output) "call with ~A ~A~%" 'C101111101 'C101111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101111100) (y C101111101))
                 (format (standard-output) "call with ~A ~A~%" 'C101111100 'C101111101)
                 (f (create (class C101111101)) (create (class C10111110))))
(defclass C101111110 () ())
(defmethod f ((x C101111110) (y C101111110)) nil)
(defclass C101111111 () ())
(defmethod f ((x C101111111) (y C101111111)) nil)
(defclass C10111111 (C101111110 C101111111) ())
(defmethod f ((x C101111111) (y C101111110))
                 (format (standard-output) "call with ~A ~A~%" 'C101111111 'C101111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101111110) (y C101111111))
                 (format (standard-output) "call with ~A ~A~%" 'C101111110 'C101111111)
                 (f (create (class C101111111)) (create (class C10111111))))
(defclass C1011111 (C10111110 C10111111) ())
(defmethod f ((x C10111111) (y C10111110))
                 (format (standard-output) "call with ~A ~A~%" 'C10111111 'C10111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10111110) (y C10111111))
                 (format (standard-output) "call with ~A ~A~%" 'C10111110 'C10111111)
                 (f (create (class C10111111)) (create (class C1011111))))
(defclass C101111 (C1011110 C1011111) ())
(defmethod f ((x C1011111) (y C1011110))
                 (format (standard-output) "call with ~A ~A~%" 'C1011111 'C1011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1011110) (y C1011111))
                 (format (standard-output) "call with ~A ~A~%" 'C1011110 'C1011111)
                 (f (create (class C1011111)) (create (class C101111))))
(defclass C10111 (C101110 C101111) ())
(defmethod f ((x C101111) (y C101110))
                 (format (standard-output) "call with ~A ~A~%" 'C101111 'C101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110) (y C101111))
                 (format (standard-output) "call with ~A ~A~%" 'C101110 'C101111)
                 (f (create (class C101111)) (create (class C10111))))
(defclass C1011 (C10110 C10111) ())
(defmethod f ((x C10111) (y C10110))
                 (format (standard-output) "call with ~A ~A~%" 'C10111 'C10110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110) (y C10111))
                 (format (standard-output) "call with ~A ~A~%" 'C10110 'C10111)
                 (f (create (class C10111)) (create (class C1011))))
(defclass C101 (C1010 C1011) ())
(defmethod f ((x C1011) (y C1010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011 'C1010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010) (y C1011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010 'C1011)
                 (f (create (class C1011)) (create (class C101))))
(defclass C10 (C100 C101) ())
(defmethod f ((x C101) (y C100))
                 (format (standard-output) "call with ~A ~A~%" 'C101 'C100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100) (y C101))
                 (format (standard-output) "call with ~A ~A~%" 'C100 'C101)
                 (f (create (class C101)) (create (class C10))))
(defclass C110000000 () ())
(defmethod f ((x C110000000) (y C110000000)) nil)
(defclass C110000001 () ())
(defmethod f ((x C110000001) (y C110000001)) nil)
(defclass C11000000 (C110000000 C110000001) ())
(defmethod f ((x C110000001) (y C110000000))
                 (format (standard-output) "call with ~A ~A~%" 'C110000001 'C110000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000000) (y C110000001))
                 (format (standard-output) "call with ~A ~A~%" 'C110000000 'C110000001)
                 (f (create (class C110000001)) (create (class C11000000))))
(defclass C110000010 () ())
(defmethod f ((x C110000010) (y C110000010)) nil)
(defclass C110000011 () ())
(defmethod f ((x C110000011) (y C110000011)) nil)
(defclass C11000001 (C110000010 C110000011) ())
(defmethod f ((x C110000011) (y C110000010))
                 (format (standard-output) "call with ~A ~A~%" 'C110000011 'C110000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000010) (y C110000011))
                 (format (standard-output) "call with ~A ~A~%" 'C110000010 'C110000011)
                 (f (create (class C110000011)) (create (class C11000001))))
(defclass C1100000 (C11000000 C11000001) ())
(defmethod f ((x C11000001) (y C11000000))
                 (format (standard-output) "call with ~A ~A~%" 'C11000001 'C11000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000000) (y C11000001))
                 (format (standard-output) "call with ~A ~A~%" 'C11000000 'C11000001)
                 (f (create (class C11000001)) (create (class C1100000))))
(defclass C110000100 () ())
(defmethod f ((x C110000100) (y C110000100)) nil)
(defclass C110000101 () ())
(defmethod f ((x C110000101) (y C110000101)) nil)
(defclass C11000010 (C110000100 C110000101) ())
(defmethod f ((x C110000101) (y C110000100))
                 (format (standard-output) "call with ~A ~A~%" 'C110000101 'C110000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000100) (y C110000101))
                 (format (standard-output) "call with ~A ~A~%" 'C110000100 'C110000101)
                 (f (create (class C110000101)) (create (class C11000010))))
(defclass C110000110 () ())
(defmethod f ((x C110000110) (y C110000110)) nil)
(defclass C110000111 () ())
(defmethod f ((x C110000111) (y C110000111)) nil)
(defclass C11000011 (C110000110 C110000111) ())
(defmethod f ((x C110000111) (y C110000110))
                 (format (standard-output) "call with ~A ~A~%" 'C110000111 'C110000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000110) (y C110000111))
                 (format (standard-output) "call with ~A ~A~%" 'C110000110 'C110000111)
                 (f (create (class C110000111)) (create (class C11000011))))
(defclass C1100001 (C11000010 C11000011) ())
(defmethod f ((x C11000011) (y C11000010))
                 (format (standard-output) "call with ~A ~A~%" 'C11000011 'C11000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000010) (y C11000011))
                 (format (standard-output) "call with ~A ~A~%" 'C11000010 'C11000011)
                 (f (create (class C11000011)) (create (class C1100001))))
(defclass C110000 (C1100000 C1100001) ())
(defmethod f ((x C1100001) (y C1100000))
                 (format (standard-output) "call with ~A ~A~%" 'C1100001 'C1100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100000) (y C1100001))
                 (format (standard-output) "call with ~A ~A~%" 'C1100000 'C1100001)
                 (f (create (class C1100001)) (create (class C110000))))
(defclass C110001000 () ())
(defmethod f ((x C110001000) (y C110001000)) nil)
(defclass C110001001 () ())
(defmethod f ((x C110001001) (y C110001001)) nil)
(defclass C11000100 (C110001000 C110001001) ())
(defmethod f ((x C110001001) (y C110001000))
                 (format (standard-output) "call with ~A ~A~%" 'C110001001 'C110001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110001000) (y C110001001))
                 (format (standard-output) "call with ~A ~A~%" 'C110001000 'C110001001)
                 (f (create (class C110001001)) (create (class C11000100))))
(defclass C110001010 () ())
(defmethod f ((x C110001010) (y C110001010)) nil)
(defclass C110001011 () ())
(defmethod f ((x C110001011) (y C110001011)) nil)
(defclass C11000101 (C110001010 C110001011) ())
(defmethod f ((x C110001011) (y C110001010))
                 (format (standard-output) "call with ~A ~A~%" 'C110001011 'C110001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110001010) (y C110001011))
                 (format (standard-output) "call with ~A ~A~%" 'C110001010 'C110001011)
                 (f (create (class C110001011)) (create (class C11000101))))
(defclass C1100010 (C11000100 C11000101) ())
(defmethod f ((x C11000101) (y C11000100))
                 (format (standard-output) "call with ~A ~A~%" 'C11000101 'C11000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000100) (y C11000101))
                 (format (standard-output) "call with ~A ~A~%" 'C11000100 'C11000101)
                 (f (create (class C11000101)) (create (class C1100010))))
(defclass C110001100 () ())
(defmethod f ((x C110001100) (y C110001100)) nil)
(defclass C110001101 () ())
(defmethod f ((x C110001101) (y C110001101)) nil)
(defclass C11000110 (C110001100 C110001101) ())
(defmethod f ((x C110001101) (y C110001100))
                 (format (standard-output) "call with ~A ~A~%" 'C110001101 'C110001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110001100) (y C110001101))
                 (format (standard-output) "call with ~A ~A~%" 'C110001100 'C110001101)
                 (f (create (class C110001101)) (create (class C11000110))))
(defclass C110001110 () ())
(defmethod f ((x C110001110) (y C110001110)) nil)
(defclass C110001111 () ())
(defmethod f ((x C110001111) (y C110001111)) nil)
(defclass C11000111 (C110001110 C110001111) ())
(defmethod f ((x C110001111) (y C110001110))
                 (format (standard-output) "call with ~A ~A~%" 'C110001111 'C110001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110001110) (y C110001111))
                 (format (standard-output) "call with ~A ~A~%" 'C110001110 'C110001111)
                 (f (create (class C110001111)) (create (class C11000111))))
(defclass C1100011 (C11000110 C11000111) ())
(defmethod f ((x C11000111) (y C11000110))
                 (format (standard-output) "call with ~A ~A~%" 'C11000111 'C11000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000110) (y C11000111))
                 (format (standard-output) "call with ~A ~A~%" 'C11000110 'C11000111)
                 (f (create (class C11000111)) (create (class C1100011))))
(defclass C110001 (C1100010 C1100011) ())
(defmethod f ((x C1100011) (y C1100010))
                 (format (standard-output) "call with ~A ~A~%" 'C1100011 'C1100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100010) (y C1100011))
                 (format (standard-output) "call with ~A ~A~%" 'C1100010 'C1100011)
                 (f (create (class C1100011)) (create (class C110001))))
(defclass C11000 (C110000 C110001) ())
(defmethod f ((x C110001) (y C110000))
                 (format (standard-output) "call with ~A ~A~%" 'C110001 'C110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000) (y C110001))
                 (format (standard-output) "call with ~A ~A~%" 'C110000 'C110001)
                 (f (create (class C110001)) (create (class C11000))))
(defclass C110010000 () ())
(defmethod f ((x C110010000) (y C110010000)) nil)
(defclass C110010001 () ())
(defmethod f ((x C110010001) (y C110010001)) nil)
(defclass C11001000 (C110010000 C110010001) ())
(defmethod f ((x C110010001) (y C110010000))
                 (format (standard-output) "call with ~A ~A~%" 'C110010001 'C110010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010000) (y C110010001))
                 (format (standard-output) "call with ~A ~A~%" 'C110010000 'C110010001)
                 (f (create (class C110010001)) (create (class C11001000))))
(defclass C110010010 () ())
(defmethod f ((x C110010010) (y C110010010)) nil)
(defclass C110010011 () ())
(defmethod f ((x C110010011) (y C110010011)) nil)
(defclass C11001001 (C110010010 C110010011) ())
(defmethod f ((x C110010011) (y C110010010))
                 (format (standard-output) "call with ~A ~A~%" 'C110010011 'C110010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010010) (y C110010011))
                 (format (standard-output) "call with ~A ~A~%" 'C110010010 'C110010011)
                 (f (create (class C110010011)) (create (class C11001001))))
(defclass C1100100 (C11001000 C11001001) ())
(defmethod f ((x C11001001) (y C11001000))
                 (format (standard-output) "call with ~A ~A~%" 'C11001001 'C11001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001000) (y C11001001))
                 (format (standard-output) "call with ~A ~A~%" 'C11001000 'C11001001)
                 (f (create (class C11001001)) (create (class C1100100))))
(defclass C110010100 () ())
(defmethod f ((x C110010100) (y C110010100)) nil)
(defclass C110010101 () ())
(defmethod f ((x C110010101) (y C110010101)) nil)
(defclass C11001010 (C110010100 C110010101) ())
(defmethod f ((x C110010101) (y C110010100))
                 (format (standard-output) "call with ~A ~A~%" 'C110010101 'C110010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010100) (y C110010101))
                 (format (standard-output) "call with ~A ~A~%" 'C110010100 'C110010101)
                 (f (create (class C110010101)) (create (class C11001010))))
(defclass C110010110 () ())
(defmethod f ((x C110010110) (y C110010110)) nil)
(defclass C110010111 () ())
(defmethod f ((x C110010111) (y C110010111)) nil)
(defclass C11001011 (C110010110 C110010111) ())
(defmethod f ((x C110010111) (y C110010110))
                 (format (standard-output) "call with ~A ~A~%" 'C110010111 'C110010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010110) (y C110010111))
                 (format (standard-output) "call with ~A ~A~%" 'C110010110 'C110010111)
                 (f (create (class C110010111)) (create (class C11001011))))
(defclass C1100101 (C11001010 C11001011) ())
(defmethod f ((x C11001011) (y C11001010))
                 (format (standard-output) "call with ~A ~A~%" 'C11001011 'C11001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001010) (y C11001011))
                 (format (standard-output) "call with ~A ~A~%" 'C11001010 'C11001011)
                 (f (create (class C11001011)) (create (class C1100101))))
(defclass C110010 (C1100100 C1100101) ())
(defmethod f ((x C1100101) (y C1100100))
                 (format (standard-output) "call with ~A ~A~%" 'C1100101 'C1100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100100) (y C1100101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100100 'C1100101)
                 (f (create (class C1100101)) (create (class C110010))))
(defclass C110011000 () ())
(defmethod f ((x C110011000) (y C110011000)) nil)
(defclass C110011001 () ())
(defmethod f ((x C110011001) (y C110011001)) nil)
(defclass C11001100 (C110011000 C110011001) ())
(defmethod f ((x C110011001) (y C110011000))
                 (format (standard-output) "call with ~A ~A~%" 'C110011001 'C110011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110011000) (y C110011001))
                 (format (standard-output) "call with ~A ~A~%" 'C110011000 'C110011001)
                 (f (create (class C110011001)) (create (class C11001100))))
(defclass C110011010 () ())
(defmethod f ((x C110011010) (y C110011010)) nil)
(defclass C110011011 () ())
(defmethod f ((x C110011011) (y C110011011)) nil)
(defclass C11001101 (C110011010 C110011011) ())
(defmethod f ((x C110011011) (y C110011010))
                 (format (standard-output) "call with ~A ~A~%" 'C110011011 'C110011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110011010) (y C110011011))
                 (format (standard-output) "call with ~A ~A~%" 'C110011010 'C110011011)
                 (f (create (class C110011011)) (create (class C11001101))))
(defclass C1100110 (C11001100 C11001101) ())
(defmethod f ((x C11001101) (y C11001100))
                 (format (standard-output) "call with ~A ~A~%" 'C11001101 'C11001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001100) (y C11001101))
                 (format (standard-output) "call with ~A ~A~%" 'C11001100 'C11001101)
                 (f (create (class C11001101)) (create (class C1100110))))
(defclass C110011100 () ())
(defmethod f ((x C110011100) (y C110011100)) nil)
(defclass C110011101 () ())
(defmethod f ((x C110011101) (y C110011101)) nil)
(defclass C11001110 (C110011100 C110011101) ())
(defmethod f ((x C110011101) (y C110011100))
                 (format (standard-output) "call with ~A ~A~%" 'C110011101 'C110011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110011100) (y C110011101))
                 (format (standard-output) "call with ~A ~A~%" 'C110011100 'C110011101)
                 (f (create (class C110011101)) (create (class C11001110))))
(defclass C110011110 () ())
(defmethod f ((x C110011110) (y C110011110)) nil)
(defclass C110011111 () ())
(defmethod f ((x C110011111) (y C110011111)) nil)
(defclass C11001111 (C110011110 C110011111) ())
(defmethod f ((x C110011111) (y C110011110))
                 (format (standard-output) "call with ~A ~A~%" 'C110011111 'C110011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110011110) (y C110011111))
                 (format (standard-output) "call with ~A ~A~%" 'C110011110 'C110011111)
                 (f (create (class C110011111)) (create (class C11001111))))
(defclass C1100111 (C11001110 C11001111) ())
(defmethod f ((x C11001111) (y C11001110))
                 (format (standard-output) "call with ~A ~A~%" 'C11001111 'C11001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11001110) (y C11001111))
                 (format (standard-output) "call with ~A ~A~%" 'C11001110 'C11001111)
                 (f (create (class C11001111)) (create (class C1100111))))
(defclass C110011 (C1100110 C1100111) ())
(defmethod f ((x C1100111) (y C1100110))
                 (format (standard-output) "call with ~A ~A~%" 'C1100111 'C1100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100110) (y C1100111))
                 (format (standard-output) "call with ~A ~A~%" 'C1100110 'C1100111)
                 (f (create (class C1100111)) (create (class C110011))))
(defclass C11001 (C110010 C110011) ())
(defmethod f ((x C110011) (y C110010))
                 (format (standard-output) "call with ~A ~A~%" 'C110011 'C110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010) (y C110011))
                 (format (standard-output) "call with ~A ~A~%" 'C110010 'C110011)
                 (f (create (class C110011)) (create (class C11001))))
(defclass C1100 (C11000 C11001) ())
(defmethod f ((x C11001) (y C11000))
                 (format (standard-output) "call with ~A ~A~%" 'C11001 'C11000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000) (y C11001))
                 (format (standard-output) "call with ~A ~A~%" 'C11000 'C11001)
                 (f (create (class C11001)) (create (class C1100))))
(defclass C110100000 () ())
(defmethod f ((x C110100000) (y C110100000)) nil)
(defclass C110100001 () ())
(defmethod f ((x C110100001) (y C110100001)) nil)
(defclass C11010000 (C110100000 C110100001) ())
(defmethod f ((x C110100001) (y C110100000))
                 (format (standard-output) "call with ~A ~A~%" 'C110100001 'C110100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100000) (y C110100001))
                 (format (standard-output) "call with ~A ~A~%" 'C110100000 'C110100001)
                 (f (create (class C110100001)) (create (class C11010000))))
(defclass C110100010 () ())
(defmethod f ((x C110100010) (y C110100010)) nil)
(defclass C110100011 () ())
(defmethod f ((x C110100011) (y C110100011)) nil)
(defclass C11010001 (C110100010 C110100011) ())
(defmethod f ((x C110100011) (y C110100010))
                 (format (standard-output) "call with ~A ~A~%" 'C110100011 'C110100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100010) (y C110100011))
                 (format (standard-output) "call with ~A ~A~%" 'C110100010 'C110100011)
                 (f (create (class C110100011)) (create (class C11010001))))
(defclass C1101000 (C11010000 C11010001) ())
(defmethod f ((x C11010001) (y C11010000))
                 (format (standard-output) "call with ~A ~A~%" 'C11010001 'C11010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010000) (y C11010001))
                 (format (standard-output) "call with ~A ~A~%" 'C11010000 'C11010001)
                 (f (create (class C11010001)) (create (class C1101000))))
(defclass C110100100 () ())
(defmethod f ((x C110100100) (y C110100100)) nil)
(defclass C110100101 () ())
(defmethod f ((x C110100101) (y C110100101)) nil)
(defclass C11010010 (C110100100 C110100101) ())
(defmethod f ((x C110100101) (y C110100100))
                 (format (standard-output) "call with ~A ~A~%" 'C110100101 'C110100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100100) (y C110100101))
                 (format (standard-output) "call with ~A ~A~%" 'C110100100 'C110100101)
                 (f (create (class C110100101)) (create (class C11010010))))
(defclass C110100110 () ())
(defmethod f ((x C110100110) (y C110100110)) nil)
(defclass C110100111 () ())
(defmethod f ((x C110100111) (y C110100111)) nil)
(defclass C11010011 (C110100110 C110100111) ())
(defmethod f ((x C110100111) (y C110100110))
                 (format (standard-output) "call with ~A ~A~%" 'C110100111 'C110100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100110) (y C110100111))
                 (format (standard-output) "call with ~A ~A~%" 'C110100110 'C110100111)
                 (f (create (class C110100111)) (create (class C11010011))))
(defclass C1101001 (C11010010 C11010011) ())
(defmethod f ((x C11010011) (y C11010010))
                 (format (standard-output) "call with ~A ~A~%" 'C11010011 'C11010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010010) (y C11010011))
                 (format (standard-output) "call with ~A ~A~%" 'C11010010 'C11010011)
                 (f (create (class C11010011)) (create (class C1101001))))
(defclass C110100 (C1101000 C1101001) ())
(defmethod f ((x C1101001) (y C1101000))
                 (format (standard-output) "call with ~A ~A~%" 'C1101001 'C1101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101000) (y C1101001))
                 (format (standard-output) "call with ~A ~A~%" 'C1101000 'C1101001)
                 (f (create (class C1101001)) (create (class C110100))))
(defclass C110101000 () ())
(defmethod f ((x C110101000) (y C110101000)) nil)
(defclass C110101001 () ())
(defmethod f ((x C110101001) (y C110101001)) nil)
(defclass C11010100 (C110101000 C110101001) ())
(defmethod f ((x C110101001) (y C110101000))
                 (format (standard-output) "call with ~A ~A~%" 'C110101001 'C110101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110101000) (y C110101001))
                 (format (standard-output) "call with ~A ~A~%" 'C110101000 'C110101001)
                 (f (create (class C110101001)) (create (class C11010100))))
(defclass C110101010 () ())
(defmethod f ((x C110101010) (y C110101010)) nil)
(defclass C110101011 () ())
(defmethod f ((x C110101011) (y C110101011)) nil)
(defclass C11010101 (C110101010 C110101011) ())
(defmethod f ((x C110101011) (y C110101010))
                 (format (standard-output) "call with ~A ~A~%" 'C110101011 'C110101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110101010) (y C110101011))
                 (format (standard-output) "call with ~A ~A~%" 'C110101010 'C110101011)
                 (f (create (class C110101011)) (create (class C11010101))))
(defclass C1101010 (C11010100 C11010101) ())
(defmethod f ((x C11010101) (y C11010100))
                 (format (standard-output) "call with ~A ~A~%" 'C11010101 'C11010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010100) (y C11010101))
                 (format (standard-output) "call with ~A ~A~%" 'C11010100 'C11010101)
                 (f (create (class C11010101)) (create (class C1101010))))
(defclass C110101100 () ())
(defmethod f ((x C110101100) (y C110101100)) nil)
(defclass C110101101 () ())
(defmethod f ((x C110101101) (y C110101101)) nil)
(defclass C11010110 (C110101100 C110101101) ())
(defmethod f ((x C110101101) (y C110101100))
                 (format (standard-output) "call with ~A ~A~%" 'C110101101 'C110101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110101100) (y C110101101))
                 (format (standard-output) "call with ~A ~A~%" 'C110101100 'C110101101)
                 (f (create (class C110101101)) (create (class C11010110))))
(defclass C110101110 () ())
(defmethod f ((x C110101110) (y C110101110)) nil)
(defclass C110101111 () ())
(defmethod f ((x C110101111) (y C110101111)) nil)
(defclass C11010111 (C110101110 C110101111) ())
(defmethod f ((x C110101111) (y C110101110))
                 (format (standard-output) "call with ~A ~A~%" 'C110101111 'C110101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110101110) (y C110101111))
                 (format (standard-output) "call with ~A ~A~%" 'C110101110 'C110101111)
                 (f (create (class C110101111)) (create (class C11010111))))
(defclass C1101011 (C11010110 C11010111) ())
(defmethod f ((x C11010111) (y C11010110))
                 (format (standard-output) "call with ~A ~A~%" 'C11010111 'C11010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010110) (y C11010111))
                 (format (standard-output) "call with ~A ~A~%" 'C11010110 'C11010111)
                 (f (create (class C11010111)) (create (class C1101011))))
(defclass C110101 (C1101010 C1101011) ())
(defmethod f ((x C1101011) (y C1101010))
                 (format (standard-output) "call with ~A ~A~%" 'C1101011 'C1101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101010) (y C1101011))
                 (format (standard-output) "call with ~A ~A~%" 'C1101010 'C1101011)
                 (f (create (class C1101011)) (create (class C110101))))
(defclass C11010 (C110100 C110101) ())
(defmethod f ((x C110101) (y C110100))
                 (format (standard-output) "call with ~A ~A~%" 'C110101 'C110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100) (y C110101))
                 (format (standard-output) "call with ~A ~A~%" 'C110100 'C110101)
                 (f (create (class C110101)) (create (class C11010))))
(defclass C110110000 () ())
(defmethod f ((x C110110000) (y C110110000)) nil)
(defclass C110110001 () ())
(defmethod f ((x C110110001) (y C110110001)) nil)
(defclass C11011000 (C110110000 C110110001) ())
(defmethod f ((x C110110001) (y C110110000))
                 (format (standard-output) "call with ~A ~A~%" 'C110110001 'C110110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110000) (y C110110001))
                 (format (standard-output) "call with ~A ~A~%" 'C110110000 'C110110001)
                 (f (create (class C110110001)) (create (class C11011000))))
(defclass C110110010 () ())
(defmethod f ((x C110110010) (y C110110010)) nil)
(defclass C110110011 () ())
(defmethod f ((x C110110011) (y C110110011)) nil)
(defclass C11011001 (C110110010 C110110011) ())
(defmethod f ((x C110110011) (y C110110010))
                 (format (standard-output) "call with ~A ~A~%" 'C110110011 'C110110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110010) (y C110110011))
                 (format (standard-output) "call with ~A ~A~%" 'C110110010 'C110110011)
                 (f (create (class C110110011)) (create (class C11011001))))
(defclass C1101100 (C11011000 C11011001) ())
(defmethod f ((x C11011001) (y C11011000))
                 (format (standard-output) "call with ~A ~A~%" 'C11011001 'C11011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011000) (y C11011001))
                 (format (standard-output) "call with ~A ~A~%" 'C11011000 'C11011001)
                 (f (create (class C11011001)) (create (class C1101100))))
(defclass C110110100 () ())
(defmethod f ((x C110110100) (y C110110100)) nil)
(defclass C110110101 () ())
(defmethod f ((x C110110101) (y C110110101)) nil)
(defclass C11011010 (C110110100 C110110101) ())
(defmethod f ((x C110110101) (y C110110100))
                 (format (standard-output) "call with ~A ~A~%" 'C110110101 'C110110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110100) (y C110110101))
                 (format (standard-output) "call with ~A ~A~%" 'C110110100 'C110110101)
                 (f (create (class C110110101)) (create (class C11011010))))
(defclass C110110110 () ())
(defmethod f ((x C110110110) (y C110110110)) nil)
(defclass C110110111 () ())
(defmethod f ((x C110110111) (y C110110111)) nil)
(defclass C11011011 (C110110110 C110110111) ())
(defmethod f ((x C110110111) (y C110110110))
                 (format (standard-output) "call with ~A ~A~%" 'C110110111 'C110110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110110) (y C110110111))
                 (format (standard-output) "call with ~A ~A~%" 'C110110110 'C110110111)
                 (f (create (class C110110111)) (create (class C11011011))))
(defclass C1101101 (C11011010 C11011011) ())
(defmethod f ((x C11011011) (y C11011010))
                 (format (standard-output) "call with ~A ~A~%" 'C11011011 'C11011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011010) (y C11011011))
                 (format (standard-output) "call with ~A ~A~%" 'C11011010 'C11011011)
                 (f (create (class C11011011)) (create (class C1101101))))
(defclass C110110 (C1101100 C1101101) ())
(defmethod f ((x C1101101) (y C1101100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101101 'C1101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101100) (y C1101101))
                 (format (standard-output) "call with ~A ~A~%" 'C1101100 'C1101101)
                 (f (create (class C1101101)) (create (class C110110))))
(defclass C110111000 () ())
(defmethod f ((x C110111000) (y C110111000)) nil)
(defclass C110111001 () ())
(defmethod f ((x C110111001) (y C110111001)) nil)
(defclass C11011100 (C110111000 C110111001) ())
(defmethod f ((x C110111001) (y C110111000))
                 (format (standard-output) "call with ~A ~A~%" 'C110111001 'C110111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110111000) (y C110111001))
                 (format (standard-output) "call with ~A ~A~%" 'C110111000 'C110111001)
                 (f (create (class C110111001)) (create (class C11011100))))
(defclass C110111010 () ())
(defmethod f ((x C110111010) (y C110111010)) nil)
(defclass C110111011 () ())
(defmethod f ((x C110111011) (y C110111011)) nil)
(defclass C11011101 (C110111010 C110111011) ())
(defmethod f ((x C110111011) (y C110111010))
                 (format (standard-output) "call with ~A ~A~%" 'C110111011 'C110111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110111010) (y C110111011))
                 (format (standard-output) "call with ~A ~A~%" 'C110111010 'C110111011)
                 (f (create (class C110111011)) (create (class C11011101))))
(defclass C1101110 (C11011100 C11011101) ())
(defmethod f ((x C11011101) (y C11011100))
                 (format (standard-output) "call with ~A ~A~%" 'C11011101 'C11011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011100) (y C11011101))
                 (format (standard-output) "call with ~A ~A~%" 'C11011100 'C11011101)
                 (f (create (class C11011101)) (create (class C1101110))))
(defclass C110111100 () ())
(defmethod f ((x C110111100) (y C110111100)) nil)
(defclass C110111101 () ())
(defmethod f ((x C110111101) (y C110111101)) nil)
(defclass C11011110 (C110111100 C110111101) ())
(defmethod f ((x C110111101) (y C110111100))
                 (format (standard-output) "call with ~A ~A~%" 'C110111101 'C110111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110111100) (y C110111101))
                 (format (standard-output) "call with ~A ~A~%" 'C110111100 'C110111101)
                 (f (create (class C110111101)) (create (class C11011110))))
(defclass C110111110 () ())
(defmethod f ((x C110111110) (y C110111110)) nil)
(defclass C110111111 () ())
(defmethod f ((x C110111111) (y C110111111)) nil)
(defclass C11011111 (C110111110 C110111111) ())
(defmethod f ((x C110111111) (y C110111110))
                 (format (standard-output) "call with ~A ~A~%" 'C110111111 'C110111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110111110) (y C110111111))
                 (format (standard-output) "call with ~A ~A~%" 'C110111110 'C110111111)
                 (f (create (class C110111111)) (create (class C11011111))))
(defclass C1101111 (C11011110 C11011111) ())
(defmethod f ((x C11011111) (y C11011110))
                 (format (standard-output) "call with ~A ~A~%" 'C11011111 'C11011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11011110) (y C11011111))
                 (format (standard-output) "call with ~A ~A~%" 'C11011110 'C11011111)
                 (f (create (class C11011111)) (create (class C1101111))))
(defclass C110111 (C1101110 C1101111) ())
(defmethod f ((x C1101111) (y C1101110))
                 (format (standard-output) "call with ~A ~A~%" 'C1101111 'C1101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1101110) (y C1101111))
                 (format (standard-output) "call with ~A ~A~%" 'C1101110 'C1101111)
                 (f (create (class C1101111)) (create (class C110111))))
(defclass C11011 (C110110 C110111) ())
(defmethod f ((x C110111) (y C110110))
                 (format (standard-output) "call with ~A ~A~%" 'C110111 'C110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110) (y C110111))
                 (format (standard-output) "call with ~A ~A~%" 'C110110 'C110111)
                 (f (create (class C110111)) (create (class C11011))))
(defclass C1101 (C11010 C11011) ())
(defmethod f ((x C11011) (y C11010))
                 (format (standard-output) "call with ~A ~A~%" 'C11011 'C11010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010) (y C11011))
                 (format (standard-output) "call with ~A ~A~%" 'C11010 'C11011)
                 (f (create (class C11011)) (create (class C1101))))
(defclass C110 (C1100 C1101) ())
(defmethod f ((x C1101) (y C1100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101 'C1100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100) (y C1101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100 'C1101)
                 (f (create (class C1101)) (create (class C110))))
(defclass C111000000 () ())
(defmethod f ((x C111000000) (y C111000000)) nil)
(defclass C111000001 () ())
(defmethod f ((x C111000001) (y C111000001)) nil)
(defclass C11100000 (C111000000 C111000001) ())
(defmethod f ((x C111000001) (y C111000000))
                 (format (standard-output) "call with ~A ~A~%" 'C111000001 'C111000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000000) (y C111000001))
                 (format (standard-output) "call with ~A ~A~%" 'C111000000 'C111000001)
                 (f (create (class C111000001)) (create (class C11100000))))
(defclass C111000010 () ())
(defmethod f ((x C111000010) (y C111000010)) nil)
(defclass C111000011 () ())
(defmethod f ((x C111000011) (y C111000011)) nil)
(defclass C11100001 (C111000010 C111000011) ())
(defmethod f ((x C111000011) (y C111000010))
                 (format (standard-output) "call with ~A ~A~%" 'C111000011 'C111000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000010) (y C111000011))
                 (format (standard-output) "call with ~A ~A~%" 'C111000010 'C111000011)
                 (f (create (class C111000011)) (create (class C11100001))))
(defclass C1110000 (C11100000 C11100001) ())
(defmethod f ((x C11100001) (y C11100000))
                 (format (standard-output) "call with ~A ~A~%" 'C11100001 'C11100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100000) (y C11100001))
                 (format (standard-output) "call with ~A ~A~%" 'C11100000 'C11100001)
                 (f (create (class C11100001)) (create (class C1110000))))
(defclass C111000100 () ())
(defmethod f ((x C111000100) (y C111000100)) nil)
(defclass C111000101 () ())
(defmethod f ((x C111000101) (y C111000101)) nil)
(defclass C11100010 (C111000100 C111000101) ())
(defmethod f ((x C111000101) (y C111000100))
                 (format (standard-output) "call with ~A ~A~%" 'C111000101 'C111000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000100) (y C111000101))
                 (format (standard-output) "call with ~A ~A~%" 'C111000100 'C111000101)
                 (f (create (class C111000101)) (create (class C11100010))))
(defclass C111000110 () ())
(defmethod f ((x C111000110) (y C111000110)) nil)
(defclass C111000111 () ())
(defmethod f ((x C111000111) (y C111000111)) nil)
(defclass C11100011 (C111000110 C111000111) ())
(defmethod f ((x C111000111) (y C111000110))
                 (format (standard-output) "call with ~A ~A~%" 'C111000111 'C111000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000110) (y C111000111))
                 (format (standard-output) "call with ~A ~A~%" 'C111000110 'C111000111)
                 (f (create (class C111000111)) (create (class C11100011))))
(defclass C1110001 (C11100010 C11100011) ())
(defmethod f ((x C11100011) (y C11100010))
                 (format (standard-output) "call with ~A ~A~%" 'C11100011 'C11100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100010) (y C11100011))
                 (format (standard-output) "call with ~A ~A~%" 'C11100010 'C11100011)
                 (f (create (class C11100011)) (create (class C1110001))))
(defclass C111000 (C1110000 C1110001) ())
(defmethod f ((x C1110001) (y C1110000))
                 (format (standard-output) "call with ~A ~A~%" 'C1110001 'C1110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110000) (y C1110001))
                 (format (standard-output) "call with ~A ~A~%" 'C1110000 'C1110001)
                 (f (create (class C1110001)) (create (class C111000))))
(defclass C111001000 () ())
(defmethod f ((x C111001000) (y C111001000)) nil)
(defclass C111001001 () ())
(defmethod f ((x C111001001) (y C111001001)) nil)
(defclass C11100100 (C111001000 C111001001) ())
(defmethod f ((x C111001001) (y C111001000))
                 (format (standard-output) "call with ~A ~A~%" 'C111001001 'C111001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111001000) (y C111001001))
                 (format (standard-output) "call with ~A ~A~%" 'C111001000 'C111001001)
                 (f (create (class C111001001)) (create (class C11100100))))
(defclass C111001010 () ())
(defmethod f ((x C111001010) (y C111001010)) nil)
(defclass C111001011 () ())
(defmethod f ((x C111001011) (y C111001011)) nil)
(defclass C11100101 (C111001010 C111001011) ())
(defmethod f ((x C111001011) (y C111001010))
                 (format (standard-output) "call with ~A ~A~%" 'C111001011 'C111001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111001010) (y C111001011))
                 (format (standard-output) "call with ~A ~A~%" 'C111001010 'C111001011)
                 (f (create (class C111001011)) (create (class C11100101))))
(defclass C1110010 (C11100100 C11100101) ())
(defmethod f ((x C11100101) (y C11100100))
                 (format (standard-output) "call with ~A ~A~%" 'C11100101 'C11100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100100) (y C11100101))
                 (format (standard-output) "call with ~A ~A~%" 'C11100100 'C11100101)
                 (f (create (class C11100101)) (create (class C1110010))))
(defclass C111001100 () ())
(defmethod f ((x C111001100) (y C111001100)) nil)
(defclass C111001101 () ())
(defmethod f ((x C111001101) (y C111001101)) nil)
(defclass C11100110 (C111001100 C111001101) ())
(defmethod f ((x C111001101) (y C111001100))
                 (format (standard-output) "call with ~A ~A~%" 'C111001101 'C111001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111001100) (y C111001101))
                 (format (standard-output) "call with ~A ~A~%" 'C111001100 'C111001101)
                 (f (create (class C111001101)) (create (class C11100110))))
(defclass C111001110 () ())
(defmethod f ((x C111001110) (y C111001110)) nil)
(defclass C111001111 () ())
(defmethod f ((x C111001111) (y C111001111)) nil)
(defclass C11100111 (C111001110 C111001111) ())
(defmethod f ((x C111001111) (y C111001110))
                 (format (standard-output) "call with ~A ~A~%" 'C111001111 'C111001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111001110) (y C111001111))
                 (format (standard-output) "call with ~A ~A~%" 'C111001110 'C111001111)
                 (f (create (class C111001111)) (create (class C11100111))))
(defclass C1110011 (C11100110 C11100111) ())
(defmethod f ((x C11100111) (y C11100110))
                 (format (standard-output) "call with ~A ~A~%" 'C11100111 'C11100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100110) (y C11100111))
                 (format (standard-output) "call with ~A ~A~%" 'C11100110 'C11100111)
                 (f (create (class C11100111)) (create (class C1110011))))
(defclass C111001 (C1110010 C1110011) ())
(defmethod f ((x C1110011) (y C1110010))
                 (format (standard-output) "call with ~A ~A~%" 'C1110011 'C1110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110010) (y C1110011))
                 (format (standard-output) "call with ~A ~A~%" 'C1110010 'C1110011)
                 (f (create (class C1110011)) (create (class C111001))))
(defclass C11100 (C111000 C111001) ())
(defmethod f ((x C111001) (y C111000))
                 (format (standard-output) "call with ~A ~A~%" 'C111001 'C111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000) (y C111001))
                 (format (standard-output) "call with ~A ~A~%" 'C111000 'C111001)
                 (f (create (class C111001)) (create (class C11100))))
(defclass C111010000 () ())
(defmethod f ((x C111010000) (y C111010000)) nil)
(defclass C111010001 () ())
(defmethod f ((x C111010001) (y C111010001)) nil)
(defclass C11101000 (C111010000 C111010001) ())
(defmethod f ((x C111010001) (y C111010000))
                 (format (standard-output) "call with ~A ~A~%" 'C111010001 'C111010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010000) (y C111010001))
                 (format (standard-output) "call with ~A ~A~%" 'C111010000 'C111010001)
                 (f (create (class C111010001)) (create (class C11101000))))
(defclass C111010010 () ())
(defmethod f ((x C111010010) (y C111010010)) nil)
(defclass C111010011 () ())
(defmethod f ((x C111010011) (y C111010011)) nil)
(defclass C11101001 (C111010010 C111010011) ())
(defmethod f ((x C111010011) (y C111010010))
                 (format (standard-output) "call with ~A ~A~%" 'C111010011 'C111010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010010) (y C111010011))
                 (format (standard-output) "call with ~A ~A~%" 'C111010010 'C111010011)
                 (f (create (class C111010011)) (create (class C11101001))))
(defclass C1110100 (C11101000 C11101001) ())
(defmethod f ((x C11101001) (y C11101000))
                 (format (standard-output) "call with ~A ~A~%" 'C11101001 'C11101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101000) (y C11101001))
                 (format (standard-output) "call with ~A ~A~%" 'C11101000 'C11101001)
                 (f (create (class C11101001)) (create (class C1110100))))
(defclass C111010100 () ())
(defmethod f ((x C111010100) (y C111010100)) nil)
(defclass C111010101 () ())
(defmethod f ((x C111010101) (y C111010101)) nil)
(defclass C11101010 (C111010100 C111010101) ())
(defmethod f ((x C111010101) (y C111010100))
                 (format (standard-output) "call with ~A ~A~%" 'C111010101 'C111010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010100) (y C111010101))
                 (format (standard-output) "call with ~A ~A~%" 'C111010100 'C111010101)
                 (f (create (class C111010101)) (create (class C11101010))))
(defclass C111010110 () ())
(defmethod f ((x C111010110) (y C111010110)) nil)
(defclass C111010111 () ())
(defmethod f ((x C111010111) (y C111010111)) nil)
(defclass C11101011 (C111010110 C111010111) ())
(defmethod f ((x C111010111) (y C111010110))
                 (format (standard-output) "call with ~A ~A~%" 'C111010111 'C111010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010110) (y C111010111))
                 (format (standard-output) "call with ~A ~A~%" 'C111010110 'C111010111)
                 (f (create (class C111010111)) (create (class C11101011))))
(defclass C1110101 (C11101010 C11101011) ())
(defmethod f ((x C11101011) (y C11101010))
                 (format (standard-output) "call with ~A ~A~%" 'C11101011 'C11101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101010) (y C11101011))
                 (format (standard-output) "call with ~A ~A~%" 'C11101010 'C11101011)
                 (f (create (class C11101011)) (create (class C1110101))))
(defclass C111010 (C1110100 C1110101) ())
(defmethod f ((x C1110101) (y C1110100))
                 (format (standard-output) "call with ~A ~A~%" 'C1110101 'C1110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110100) (y C1110101))
                 (format (standard-output) "call with ~A ~A~%" 'C1110100 'C1110101)
                 (f (create (class C1110101)) (create (class C111010))))
(defclass C111011000 () ())
(defmethod f ((x C111011000) (y C111011000)) nil)
(defclass C111011001 () ())
(defmethod f ((x C111011001) (y C111011001)) nil)
(defclass C11101100 (C111011000 C111011001) ())
(defmethod f ((x C111011001) (y C111011000))
                 (format (standard-output) "call with ~A ~A~%" 'C111011001 'C111011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111011000) (y C111011001))
                 (format (standard-output) "call with ~A ~A~%" 'C111011000 'C111011001)
                 (f (create (class C111011001)) (create (class C11101100))))
(defclass C111011010 () ())
(defmethod f ((x C111011010) (y C111011010)) nil)
(defclass C111011011 () ())
(defmethod f ((x C111011011) (y C111011011)) nil)
(defclass C11101101 (C111011010 C111011011) ())
(defmethod f ((x C111011011) (y C111011010))
                 (format (standard-output) "call with ~A ~A~%" 'C111011011 'C111011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111011010) (y C111011011))
                 (format (standard-output) "call with ~A ~A~%" 'C111011010 'C111011011)
                 (f (create (class C111011011)) (create (class C11101101))))
(defclass C1110110 (C11101100 C11101101) ())
(defmethod f ((x C11101101) (y C11101100))
                 (format (standard-output) "call with ~A ~A~%" 'C11101101 'C11101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101100) (y C11101101))
                 (format (standard-output) "call with ~A ~A~%" 'C11101100 'C11101101)
                 (f (create (class C11101101)) (create (class C1110110))))
(defclass C111011100 () ())
(defmethod f ((x C111011100) (y C111011100)) nil)
(defclass C111011101 () ())
(defmethod f ((x C111011101) (y C111011101)) nil)
(defclass C11101110 (C111011100 C111011101) ())
(defmethod f ((x C111011101) (y C111011100))
                 (format (standard-output) "call with ~A ~A~%" 'C111011101 'C111011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111011100) (y C111011101))
                 (format (standard-output) "call with ~A ~A~%" 'C111011100 'C111011101)
                 (f (create (class C111011101)) (create (class C11101110))))
(defclass C111011110 () ())
(defmethod f ((x C111011110) (y C111011110)) nil)
(defclass C111011111 () ())
(defmethod f ((x C111011111) (y C111011111)) nil)
(defclass C11101111 (C111011110 C111011111) ())
(defmethod f ((x C111011111) (y C111011110))
                 (format (standard-output) "call with ~A ~A~%" 'C111011111 'C111011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111011110) (y C111011111))
                 (format (standard-output) "call with ~A ~A~%" 'C111011110 'C111011111)
                 (f (create (class C111011111)) (create (class C11101111))))
(defclass C1110111 (C11101110 C11101111) ())
(defmethod f ((x C11101111) (y C11101110))
                 (format (standard-output) "call with ~A ~A~%" 'C11101111 'C11101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11101110) (y C11101111))
                 (format (standard-output) "call with ~A ~A~%" 'C11101110 'C11101111)
                 (f (create (class C11101111)) (create (class C1110111))))
(defclass C111011 (C1110110 C1110111) ())
(defmethod f ((x C1110111) (y C1110110))
                 (format (standard-output) "call with ~A ~A~%" 'C1110111 'C1110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110110) (y C1110111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110110 'C1110111)
                 (f (create (class C1110111)) (create (class C111011))))
(defclass C11101 (C111010 C111011) ())
(defmethod f ((x C111011) (y C111010))
                 (format (standard-output) "call with ~A ~A~%" 'C111011 'C111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010) (y C111011))
                 (format (standard-output) "call with ~A ~A~%" 'C111010 'C111011)
                 (f (create (class C111011)) (create (class C11101))))
(defclass C1110 (C11100 C11101) ())
(defmethod f ((x C11101) (y C11100))
                 (format (standard-output) "call with ~A ~A~%" 'C11101 'C11100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100) (y C11101))
                 (format (standard-output) "call with ~A ~A~%" 'C11100 'C11101)
                 (f (create (class C11101)) (create (class C1110))))
(defclass C111100000 () ())
(defmethod f ((x C111100000) (y C111100000)) nil)
(defclass C111100001 () ())
(defmethod f ((x C111100001) (y C111100001)) nil)
(defclass C11110000 (C111100000 C111100001) ())
(defmethod f ((x C111100001) (y C111100000))
                 (format (standard-output) "call with ~A ~A~%" 'C111100001 'C111100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100000) (y C111100001))
                 (format (standard-output) "call with ~A ~A~%" 'C111100000 'C111100001)
                 (f (create (class C111100001)) (create (class C11110000))))
(defclass C111100010 () ())
(defmethod f ((x C111100010) (y C111100010)) nil)
(defclass C111100011 () ())
(defmethod f ((x C111100011) (y C111100011)) nil)
(defclass C11110001 (C111100010 C111100011) ())
(defmethod f ((x C111100011) (y C111100010))
                 (format (standard-output) "call with ~A ~A~%" 'C111100011 'C111100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100010) (y C111100011))
                 (format (standard-output) "call with ~A ~A~%" 'C111100010 'C111100011)
                 (f (create (class C111100011)) (create (class C11110001))))
(defclass C1111000 (C11110000 C11110001) ())
(defmethod f ((x C11110001) (y C11110000))
                 (format (standard-output) "call with ~A ~A~%" 'C11110001 'C11110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110000) (y C11110001))
                 (format (standard-output) "call with ~A ~A~%" 'C11110000 'C11110001)
                 (f (create (class C11110001)) (create (class C1111000))))
(defclass C111100100 () ())
(defmethod f ((x C111100100) (y C111100100)) nil)
(defclass C111100101 () ())
(defmethod f ((x C111100101) (y C111100101)) nil)
(defclass C11110010 (C111100100 C111100101) ())
(defmethod f ((x C111100101) (y C111100100))
                 (format (standard-output) "call with ~A ~A~%" 'C111100101 'C111100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100100) (y C111100101))
                 (format (standard-output) "call with ~A ~A~%" 'C111100100 'C111100101)
                 (f (create (class C111100101)) (create (class C11110010))))
(defclass C111100110 () ())
(defmethod f ((x C111100110) (y C111100110)) nil)
(defclass C111100111 () ())
(defmethod f ((x C111100111) (y C111100111)) nil)
(defclass C11110011 (C111100110 C111100111) ())
(defmethod f ((x C111100111) (y C111100110))
                 (format (standard-output) "call with ~A ~A~%" 'C111100111 'C111100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100110) (y C111100111))
                 (format (standard-output) "call with ~A ~A~%" 'C111100110 'C111100111)
                 (f (create (class C111100111)) (create (class C11110011))))
(defclass C1111001 (C11110010 C11110011) ())
(defmethod f ((x C11110011) (y C11110010))
                 (format (standard-output) "call with ~A ~A~%" 'C11110011 'C11110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110010) (y C11110011))
                 (format (standard-output) "call with ~A ~A~%" 'C11110010 'C11110011)
                 (f (create (class C11110011)) (create (class C1111001))))
(defclass C111100 (C1111000 C1111001) ())
(defmethod f ((x C1111001) (y C1111000))
                 (format (standard-output) "call with ~A ~A~%" 'C1111001 'C1111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111000) (y C1111001))
                 (format (standard-output) "call with ~A ~A~%" 'C1111000 'C1111001)
                 (f (create (class C1111001)) (create (class C111100))))
(defclass C111101000 () ())
(defmethod f ((x C111101000) (y C111101000)) nil)
(defclass C111101001 () ())
(defmethod f ((x C111101001) (y C111101001)) nil)
(defclass C11110100 (C111101000 C111101001) ())
(defmethod f ((x C111101001) (y C111101000))
                 (format (standard-output) "call with ~A ~A~%" 'C111101001 'C111101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111101000) (y C111101001))
                 (format (standard-output) "call with ~A ~A~%" 'C111101000 'C111101001)
                 (f (create (class C111101001)) (create (class C11110100))))
(defclass C111101010 () ())
(defmethod f ((x C111101010) (y C111101010)) nil)
(defclass C111101011 () ())
(defmethod f ((x C111101011) (y C111101011)) nil)
(defclass C11110101 (C111101010 C111101011) ())
(defmethod f ((x C111101011) (y C111101010))
                 (format (standard-output) "call with ~A ~A~%" 'C111101011 'C111101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111101010) (y C111101011))
                 (format (standard-output) "call with ~A ~A~%" 'C111101010 'C111101011)
                 (f (create (class C111101011)) (create (class C11110101))))
(defclass C1111010 (C11110100 C11110101) ())
(defmethod f ((x C11110101) (y C11110100))
                 (format (standard-output) "call with ~A ~A~%" 'C11110101 'C11110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110100) (y C11110101))
                 (format (standard-output) "call with ~A ~A~%" 'C11110100 'C11110101)
                 (f (create (class C11110101)) (create (class C1111010))))
(defclass C111101100 () ())
(defmethod f ((x C111101100) (y C111101100)) nil)
(defclass C111101101 () ())
(defmethod f ((x C111101101) (y C111101101)) nil)
(defclass C11110110 (C111101100 C111101101) ())
(defmethod f ((x C111101101) (y C111101100))
                 (format (standard-output) "call with ~A ~A~%" 'C111101101 'C111101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111101100) (y C111101101))
                 (format (standard-output) "call with ~A ~A~%" 'C111101100 'C111101101)
                 (f (create (class C111101101)) (create (class C11110110))))
(defclass C111101110 () ())
(defmethod f ((x C111101110) (y C111101110)) nil)
(defclass C111101111 () ())
(defmethod f ((x C111101111) (y C111101111)) nil)
(defclass C11110111 (C111101110 C111101111) ())
(defmethod f ((x C111101111) (y C111101110))
                 (format (standard-output) "call with ~A ~A~%" 'C111101111 'C111101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111101110) (y C111101111))
                 (format (standard-output) "call with ~A ~A~%" 'C111101110 'C111101111)
                 (f (create (class C111101111)) (create (class C11110111))))
(defclass C1111011 (C11110110 C11110111) ())
(defmethod f ((x C11110111) (y C11110110))
                 (format (standard-output) "call with ~A ~A~%" 'C11110111 'C11110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110110) (y C11110111))
                 (format (standard-output) "call with ~A ~A~%" 'C11110110 'C11110111)
                 (f (create (class C11110111)) (create (class C1111011))))
(defclass C111101 (C1111010 C1111011) ())
(defmethod f ((x C1111011) (y C1111010))
                 (format (standard-output) "call with ~A ~A~%" 'C1111011 'C1111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111010) (y C1111011))
                 (format (standard-output) "call with ~A ~A~%" 'C1111010 'C1111011)
                 (f (create (class C1111011)) (create (class C111101))))
(defclass C11110 (C111100 C111101) ())
(defmethod f ((x C111101) (y C111100))
                 (format (standard-output) "call with ~A ~A~%" 'C111101 'C111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100) (y C111101))
                 (format (standard-output) "call with ~A ~A~%" 'C111100 'C111101)
                 (f (create (class C111101)) (create (class C11110))))
(defclass C111110000 () ())
(defmethod f ((x C111110000) (y C111110000)) nil)
(defclass C111110001 () ())
(defmethod f ((x C111110001) (y C111110001)) nil)
(defclass C11111000 (C111110000 C111110001) ())
(defmethod f ((x C111110001) (y C111110000))
                 (format (standard-output) "call with ~A ~A~%" 'C111110001 'C111110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110000) (y C111110001))
                 (format (standard-output) "call with ~A ~A~%" 'C111110000 'C111110001)
                 (f (create (class C111110001)) (create (class C11111000))))
(defclass C111110010 () ())
(defmethod f ((x C111110010) (y C111110010)) nil)
(defclass C111110011 () ())
(defmethod f ((x C111110011) (y C111110011)) nil)
(defclass C11111001 (C111110010 C111110011) ())
(defmethod f ((x C111110011) (y C111110010))
                 (format (standard-output) "call with ~A ~A~%" 'C111110011 'C111110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110010) (y C111110011))
                 (format (standard-output) "call with ~A ~A~%" 'C111110010 'C111110011)
                 (f (create (class C111110011)) (create (class C11111001))))
(defclass C1111100 (C11111000 C11111001) ())
(defmethod f ((x C11111001) (y C11111000))
                 (format (standard-output) "call with ~A ~A~%" 'C11111001 'C11111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111000) (y C11111001))
                 (format (standard-output) "call with ~A ~A~%" 'C11111000 'C11111001)
                 (f (create (class C11111001)) (create (class C1111100))))
(defclass C111110100 () ())
(defmethod f ((x C111110100) (y C111110100)) nil)
(defclass C111110101 () ())
(defmethod f ((x C111110101) (y C111110101)) nil)
(defclass C11111010 (C111110100 C111110101) ())
(defmethod f ((x C111110101) (y C111110100))
                 (format (standard-output) "call with ~A ~A~%" 'C111110101 'C111110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110100) (y C111110101))
                 (format (standard-output) "call with ~A ~A~%" 'C111110100 'C111110101)
                 (f (create (class C111110101)) (create (class C11111010))))
(defclass C111110110 () ())
(defmethod f ((x C111110110) (y C111110110)) nil)
(defclass C111110111 () ())
(defmethod f ((x C111110111) (y C111110111)) nil)
(defclass C11111011 (C111110110 C111110111) ())
(defmethod f ((x C111110111) (y C111110110))
                 (format (standard-output) "call with ~A ~A~%" 'C111110111 'C111110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110110) (y C111110111))
                 (format (standard-output) "call with ~A ~A~%" 'C111110110 'C111110111)
                 (f (create (class C111110111)) (create (class C11111011))))
(defclass C1111101 (C11111010 C11111011) ())
(defmethod f ((x C11111011) (y C11111010))
                 (format (standard-output) "call with ~A ~A~%" 'C11111011 'C11111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111010) (y C11111011))
                 (format (standard-output) "call with ~A ~A~%" 'C11111010 'C11111011)
                 (f (create (class C11111011)) (create (class C1111101))))
(defclass C111110 (C1111100 C1111101) ())
(defmethod f ((x C1111101) (y C1111100))
                 (format (standard-output) "call with ~A ~A~%" 'C1111101 'C1111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111100) (y C1111101))
                 (format (standard-output) "call with ~A ~A~%" 'C1111100 'C1111101)
                 (f (create (class C1111101)) (create (class C111110))))
(defclass C111111000 () ())
(defmethod f ((x C111111000) (y C111111000)) nil)
(defclass C111111001 () ())
(defmethod f ((x C111111001) (y C111111001)) nil)
(defclass C11111100 (C111111000 C111111001) ())
(defmethod f ((x C111111001) (y C111111000))
                 (format (standard-output) "call with ~A ~A~%" 'C111111001 'C111111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111111000) (y C111111001))
                 (format (standard-output) "call with ~A ~A~%" 'C111111000 'C111111001)
                 (f (create (class C111111001)) (create (class C11111100))))
(defclass C111111010 () ())
(defmethod f ((x C111111010) (y C111111010)) nil)
(defclass C111111011 () ())
(defmethod f ((x C111111011) (y C111111011)) nil)
(defclass C11111101 (C111111010 C111111011) ())
(defmethod f ((x C111111011) (y C111111010))
                 (format (standard-output) "call with ~A ~A~%" 'C111111011 'C111111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111111010) (y C111111011))
                 (format (standard-output) "call with ~A ~A~%" 'C111111010 'C111111011)
                 (f (create (class C111111011)) (create (class C11111101))))
(defclass C1111110 (C11111100 C11111101) ())
(defmethod f ((x C11111101) (y C11111100))
                 (format (standard-output) "call with ~A ~A~%" 'C11111101 'C11111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111100) (y C11111101))
                 (format (standard-output) "call with ~A ~A~%" 'C11111100 'C11111101)
                 (f (create (class C11111101)) (create (class C1111110))))
(defclass C111111100 () ())
(defmethod f ((x C111111100) (y C111111100)) nil)
(defclass C111111101 () ())
(defmethod f ((x C111111101) (y C111111101)) nil)
(defclass C11111110 (C111111100 C111111101) ())
(defmethod f ((x C111111101) (y C111111100))
                 (format (standard-output) "call with ~A ~A~%" 'C111111101 'C111111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111111100) (y C111111101))
                 (format (standard-output) "call with ~A ~A~%" 'C111111100 'C111111101)
                 (f (create (class C111111101)) (create (class C11111110))))
(defclass C111111110 () ())
(defmethod f ((x C111111110) (y C111111110)) nil)
(defclass C111111111 () ())
(defmethod f ((x C111111111) (y C111111111)) nil)
(defclass C11111111 (C111111110 C111111111) ())
(defmethod f ((x C111111111) (y C111111110))
                 (format (standard-output) "call with ~A ~A~%" 'C111111111 'C111111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111111110) (y C111111111))
                 (format (standard-output) "call with ~A ~A~%" 'C111111110 'C111111111)
                 (f (create (class C111111111)) (create (class C11111111))))
(defclass C1111111 (C11111110 C11111111) ())
(defmethod f ((x C11111111) (y C11111110))
                 (format (standard-output) "call with ~A ~A~%" 'C11111111 'C11111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11111110) (y C11111111))
                 (format (standard-output) "call with ~A ~A~%" 'C11111110 'C11111111)
                 (f (create (class C11111111)) (create (class C1111111))))
(defclass C111111 (C1111110 C1111111) ())
(defmethod f ((x C1111111) (y C1111110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111111 'C1111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1111110) (y C1111111))
                 (format (standard-output) "call with ~A ~A~%" 'C1111110 'C1111111)
                 (f (create (class C1111111)) (create (class C111111))))
(defclass C11111 (C111110 C111111) ())
(defmethod f ((x C111111) (y C111110))
                 (format (standard-output) "call with ~A ~A~%" 'C111111 'C111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110) (y C111111))
                 (format (standard-output) "call with ~A ~A~%" 'C111110 'C111111)
                 (f (create (class C111111)) (create (class C11111))))
(defclass C1111 (C11110 C11111) ())
(defmethod f ((x C11111) (y C11110))
                 (format (standard-output) "call with ~A ~A~%" 'C11111 'C11110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110) (y C11111))
                 (format (standard-output) "call with ~A ~A~%" 'C11110 'C11111)
                 (f (create (class C11111)) (create (class C1111))))
(defclass C111 (C1110 C1111) ())
(defmethod f ((x C1111) (y C1110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111 'C1110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110) (y C1111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110 'C1111)
                 (f (create (class C1111)) (create (class C111))))
(defclass C11 (C110 C111) ())
(defmethod f ((x C111) (y C110))
                 (format (standard-output) "call with ~A ~A~%" 'C111 'C110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110) (y C111))
                 (format (standard-output) "call with ~A ~A~%" 'C110 'C111)
                 (f (create (class C111)) (create (class C11))))
(defclass C1 (C10 C11) ())
(defmethod f ((x C11) (y C10))
                 (format (standard-output) "call with ~A ~A~%" 'C11 'C10)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10) (y C11))
                 (format (standard-output) "call with ~A ~A~%" 'C10 'C11)
                 (f (create (class C11)) (create (class C1))))
(defclass C (C0 C1) ())
(defmethod f ((x C1) (y C0))
                 (format (standard-output) "call with ~A ~A~%" 'C1 'C0)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0) (y C1))
                 (format (standard-output) "call with ~A ~A~%" 'C0 'C1)
                 (f (create (class C1)) (create (class C))))
(f (create (class c)) (create (class c)))
