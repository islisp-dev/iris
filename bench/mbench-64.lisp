(defgeneric f (x y) (:method-combination nil))
(defclass C000000 () ())
(defmethod f ((x C000000) (y C000000)) nil)
(defclass C000001 () ())
(defmethod f ((x C000001) (y C000001)) nil)
(defclass C00000 (C000000 C000001) ())
(defmethod f ((x C000001) (y C000000))
                 (format (standard-output) "call with ~A ~A~%" 'C000001 'C000000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000000) (y C000001))
                 (format (standard-output) "call with ~A ~A~%" 'C000000 'C000001)
                 (f (create (class C000001)) (create (class C00000))))
(defclass C000010 () ())
(defmethod f ((x C000010) (y C000010)) nil)
(defclass C000011 () ())
(defmethod f ((x C000011) (y C000011)) nil)
(defclass C00001 (C000010 C000011) ())
(defmethod f ((x C000011) (y C000010))
                 (format (standard-output) "call with ~A ~A~%" 'C000011 'C000010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000010) (y C000011))
                 (format (standard-output) "call with ~A ~A~%" 'C000010 'C000011)
                 (f (create (class C000011)) (create (class C00001))))
(defclass C0000 (C00000 C00001) ())
(defmethod f ((x C00001) (y C00000))
                 (format (standard-output) "call with ~A ~A~%" 'C00001 'C00000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00000) (y C00001))
                 (format (standard-output) "call with ~A ~A~%" 'C00000 'C00001)
                 (f (create (class C00001)) (create (class C0000))))
(defclass C000100 () ())
(defmethod f ((x C000100) (y C000100)) nil)
(defclass C000101 () ())
(defmethod f ((x C000101) (y C000101)) nil)
(defclass C00010 (C000100 C000101) ())
(defmethod f ((x C000101) (y C000100))
                 (format (standard-output) "call with ~A ~A~%" 'C000101 'C000100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000100) (y C000101))
                 (format (standard-output) "call with ~A ~A~%" 'C000100 'C000101)
                 (f (create (class C000101)) (create (class C00010))))
(defclass C000110 () ())
(defmethod f ((x C000110) (y C000110)) nil)
(defclass C000111 () ())
(defmethod f ((x C000111) (y C000111)) nil)
(defclass C00011 (C000110 C000111) ())
(defmethod f ((x C000111) (y C000110))
                 (format (standard-output) "call with ~A ~A~%" 'C000111 'C000110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000110) (y C000111))
                 (format (standard-output) "call with ~A ~A~%" 'C000110 'C000111)
                 (f (create (class C000111)) (create (class C00011))))
(defclass C0001 (C00010 C00011) ())
(defmethod f ((x C00011) (y C00010))
                 (format (standard-output) "call with ~A ~A~%" 'C00011 'C00010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00010) (y C00011))
                 (format (standard-output) "call with ~A ~A~%" 'C00010 'C00011)
                 (f (create (class C00011)) (create (class C0001))))
(defclass C000 (C0000 C0001) ())
(defmethod f ((x C0001) (y C0000))
                 (format (standard-output) "call with ~A ~A~%" 'C0001 'C0000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0000) (y C0001))
                 (format (standard-output) "call with ~A ~A~%" 'C0000 'C0001)
                 (f (create (class C0001)) (create (class C000))))
(defclass C001000 () ())
(defmethod f ((x C001000) (y C001000)) nil)
(defclass C001001 () ())
(defmethod f ((x C001001) (y C001001)) nil)
(defclass C00100 (C001000 C001001) ())
(defmethod f ((x C001001) (y C001000))
                 (format (standard-output) "call with ~A ~A~%" 'C001001 'C001000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001000) (y C001001))
                 (format (standard-output) "call with ~A ~A~%" 'C001000 'C001001)
                 (f (create (class C001001)) (create (class C00100))))
(defclass C001010 () ())
(defmethod f ((x C001010) (y C001010)) nil)
(defclass C001011 () ())
(defmethod f ((x C001011) (y C001011)) nil)
(defclass C00101 (C001010 C001011) ())
(defmethod f ((x C001011) (y C001010))
                 (format (standard-output) "call with ~A ~A~%" 'C001011 'C001010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001010) (y C001011))
                 (format (standard-output) "call with ~A ~A~%" 'C001010 'C001011)
                 (f (create (class C001011)) (create (class C00101))))
(defclass C0010 (C00100 C00101) ())
(defmethod f ((x C00101) (y C00100))
                 (format (standard-output) "call with ~A ~A~%" 'C00101 'C00100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00100) (y C00101))
                 (format (standard-output) "call with ~A ~A~%" 'C00100 'C00101)
                 (f (create (class C00101)) (create (class C0010))))
(defclass C001100 () ())
(defmethod f ((x C001100) (y C001100)) nil)
(defclass C001101 () ())
(defmethod f ((x C001101) (y C001101)) nil)
(defclass C00110 (C001100 C001101) ())
(defmethod f ((x C001101) (y C001100))
                 (format (standard-output) "call with ~A ~A~%" 'C001101 'C001100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001100) (y C001101))
                 (format (standard-output) "call with ~A ~A~%" 'C001100 'C001101)
                 (f (create (class C001101)) (create (class C00110))))
(defclass C001110 () ())
(defmethod f ((x C001110) (y C001110)) nil)
(defclass C001111 () ())
(defmethod f ((x C001111) (y C001111)) nil)
(defclass C00111 (C001110 C001111) ())
(defmethod f ((x C001111) (y C001110))
                 (format (standard-output) "call with ~A ~A~%" 'C001111 'C001110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C001110) (y C001111))
                 (format (standard-output) "call with ~A ~A~%" 'C001110 'C001111)
                 (f (create (class C001111)) (create (class C00111))))
(defclass C0011 (C00110 C00111) ())
(defmethod f ((x C00111) (y C00110))
                 (format (standard-output) "call with ~A ~A~%" 'C00111 'C00110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00110) (y C00111))
                 (format (standard-output) "call with ~A ~A~%" 'C00110 'C00111)
                 (f (create (class C00111)) (create (class C0011))))
(defclass C001 (C0010 C0011) ())
(defmethod f ((x C0011) (y C0010))
                 (format (standard-output) "call with ~A ~A~%" 'C0011 'C0010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0010) (y C0011))
                 (format (standard-output) "call with ~A ~A~%" 'C0010 'C0011)
                 (f (create (class C0011)) (create (class C001))))
(defclass C00 (C000 C001) ())
(defmethod f ((x C001) (y C000))
                 (format (standard-output) "call with ~A ~A~%" 'C001 'C000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C000) (y C001))
                 (format (standard-output) "call with ~A ~A~%" 'C000 'C001)
                 (f (create (class C001)) (create (class C00))))
(defclass C010000 () ())
(defmethod f ((x C010000) (y C010000)) nil)
(defclass C010001 () ())
(defmethod f ((x C010001) (y C010001)) nil)
(defclass C01000 (C010000 C010001) ())
(defmethod f ((x C010001) (y C010000))
                 (format (standard-output) "call with ~A ~A~%" 'C010001 'C010000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010000) (y C010001))
                 (format (standard-output) "call with ~A ~A~%" 'C010000 'C010001)
                 (f (create (class C010001)) (create (class C01000))))
(defclass C010010 () ())
(defmethod f ((x C010010) (y C010010)) nil)
(defclass C010011 () ())
(defmethod f ((x C010011) (y C010011)) nil)
(defclass C01001 (C010010 C010011) ())
(defmethod f ((x C010011) (y C010010))
                 (format (standard-output) "call with ~A ~A~%" 'C010011 'C010010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010010) (y C010011))
                 (format (standard-output) "call with ~A ~A~%" 'C010010 'C010011)
                 (f (create (class C010011)) (create (class C01001))))
(defclass C0100 (C01000 C01001) ())
(defmethod f ((x C01001) (y C01000))
                 (format (standard-output) "call with ~A ~A~%" 'C01001 'C01000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01000) (y C01001))
                 (format (standard-output) "call with ~A ~A~%" 'C01000 'C01001)
                 (f (create (class C01001)) (create (class C0100))))
(defclass C010100 () ())
(defmethod f ((x C010100) (y C010100)) nil)
(defclass C010101 () ())
(defmethod f ((x C010101) (y C010101)) nil)
(defclass C01010 (C010100 C010101) ())
(defmethod f ((x C010101) (y C010100))
                 (format (standard-output) "call with ~A ~A~%" 'C010101 'C010100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010100) (y C010101))
                 (format (standard-output) "call with ~A ~A~%" 'C010100 'C010101)
                 (f (create (class C010101)) (create (class C01010))))
(defclass C010110 () ())
(defmethod f ((x C010110) (y C010110)) nil)
(defclass C010111 () ())
(defmethod f ((x C010111) (y C010111)) nil)
(defclass C01011 (C010110 C010111) ())
(defmethod f ((x C010111) (y C010110))
                 (format (standard-output) "call with ~A ~A~%" 'C010111 'C010110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010110) (y C010111))
                 (format (standard-output) "call with ~A ~A~%" 'C010110 'C010111)
                 (f (create (class C010111)) (create (class C01011))))
(defclass C0101 (C01010 C01011) ())
(defmethod f ((x C01011) (y C01010))
                 (format (standard-output) "call with ~A ~A~%" 'C01011 'C01010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01010) (y C01011))
                 (format (standard-output) "call with ~A ~A~%" 'C01010 'C01011)
                 (f (create (class C01011)) (create (class C0101))))
(defclass C010 (C0100 C0101) ())
(defmethod f ((x C0101) (y C0100))
                 (format (standard-output) "call with ~A ~A~%" 'C0101 'C0100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0100) (y C0101))
                 (format (standard-output) "call with ~A ~A~%" 'C0100 'C0101)
                 (f (create (class C0101)) (create (class C010))))
(defclass C011000 () ())
(defmethod f ((x C011000) (y C011000)) nil)
(defclass C011001 () ())
(defmethod f ((x C011001) (y C011001)) nil)
(defclass C01100 (C011000 C011001) ())
(defmethod f ((x C011001) (y C011000))
                 (format (standard-output) "call with ~A ~A~%" 'C011001 'C011000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011000) (y C011001))
                 (format (standard-output) "call with ~A ~A~%" 'C011000 'C011001)
                 (f (create (class C011001)) (create (class C01100))))
(defclass C011010 () ())
(defmethod f ((x C011010) (y C011010)) nil)
(defclass C011011 () ())
(defmethod f ((x C011011) (y C011011)) nil)
(defclass C01101 (C011010 C011011) ())
(defmethod f ((x C011011) (y C011010))
                 (format (standard-output) "call with ~A ~A~%" 'C011011 'C011010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011010) (y C011011))
                 (format (standard-output) "call with ~A ~A~%" 'C011010 'C011011)
                 (f (create (class C011011)) (create (class C01101))))
(defclass C0110 (C01100 C01101) ())
(defmethod f ((x C01101) (y C01100))
                 (format (standard-output) "call with ~A ~A~%" 'C01101 'C01100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01100) (y C01101))
                 (format (standard-output) "call with ~A ~A~%" 'C01100 'C01101)
                 (f (create (class C01101)) (create (class C0110))))
(defclass C011100 () ())
(defmethod f ((x C011100) (y C011100)) nil)
(defclass C011101 () ())
(defmethod f ((x C011101) (y C011101)) nil)
(defclass C01110 (C011100 C011101) ())
(defmethod f ((x C011101) (y C011100))
                 (format (standard-output) "call with ~A ~A~%" 'C011101 'C011100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011100) (y C011101))
                 (format (standard-output) "call with ~A ~A~%" 'C011100 'C011101)
                 (f (create (class C011101)) (create (class C01110))))
(defclass C011110 () ())
(defmethod f ((x C011110) (y C011110)) nil)
(defclass C011111 () ())
(defmethod f ((x C011111) (y C011111)) nil)
(defclass C01111 (C011110 C011111) ())
(defmethod f ((x C011111) (y C011110))
                 (format (standard-output) "call with ~A ~A~%" 'C011111 'C011110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C011110) (y C011111))
                 (format (standard-output) "call with ~A ~A~%" 'C011110 'C011111)
                 (f (create (class C011111)) (create (class C01111))))
(defclass C0111 (C01110 C01111) ())
(defmethod f ((x C01111) (y C01110))
                 (format (standard-output) "call with ~A ~A~%" 'C01111 'C01110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C01110) (y C01111))
                 (format (standard-output) "call with ~A ~A~%" 'C01110 'C01111)
                 (f (create (class C01111)) (create (class C0111))))
(defclass C011 (C0110 C0111) ())
(defmethod f ((x C0111) (y C0110))
                 (format (standard-output) "call with ~A ~A~%" 'C0111 'C0110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0110) (y C0111))
                 (format (standard-output) "call with ~A ~A~%" 'C0110 'C0111)
                 (f (create (class C0111)) (create (class C011))))
(defclass C01 (C010 C011) ())
(defmethod f ((x C011) (y C010))
                 (format (standard-output) "call with ~A ~A~%" 'C011 'C010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C010) (y C011))
                 (format (standard-output) "call with ~A ~A~%" 'C010 'C011)
                 (f (create (class C011)) (create (class C01))))
(defclass C0 (C00 C01) ())
(defmethod f ((x C01) (y C00))
                 (format (standard-output) "call with ~A ~A~%" 'C01 'C00)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C00) (y C01))
                 (format (standard-output) "call with ~A ~A~%" 'C00 'C01)
                 (f (create (class C01)) (create (class C0))))
(defclass C100000 () ())
(defmethod f ((x C100000) (y C100000)) nil)
(defclass C100001 () ())
(defmethod f ((x C100001) (y C100001)) nil)
(defclass C10000 (C100000 C100001) ())
(defmethod f ((x C100001) (y C100000))
                 (format (standard-output) "call with ~A ~A~%" 'C100001 'C100000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100000) (y C100001))
                 (format (standard-output) "call with ~A ~A~%" 'C100000 'C100001)
                 (f (create (class C100001)) (create (class C10000))))
(defclass C100010 () ())
(defmethod f ((x C100010) (y C100010)) nil)
(defclass C100011 () ())
(defmethod f ((x C100011) (y C100011)) nil)
(defclass C10001 (C100010 C100011) ())
(defmethod f ((x C100011) (y C100010))
                 (format (standard-output) "call with ~A ~A~%" 'C100011 'C100010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100010) (y C100011))
                 (format (standard-output) "call with ~A ~A~%" 'C100010 'C100011)
                 (f (create (class C100011)) (create (class C10001))))
(defclass C1000 (C10000 C10001) ())
(defmethod f ((x C10001) (y C10000))
                 (format (standard-output) "call with ~A ~A~%" 'C10001 'C10000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10000) (y C10001))
                 (format (standard-output) "call with ~A ~A~%" 'C10000 'C10001)
                 (f (create (class C10001)) (create (class C1000))))
(defclass C100100 () ())
(defmethod f ((x C100100) (y C100100)) nil)
(defclass C100101 () ())
(defmethod f ((x C100101) (y C100101)) nil)
(defclass C10010 (C100100 C100101) ())
(defmethod f ((x C100101) (y C100100))
                 (format (standard-output) "call with ~A ~A~%" 'C100101 'C100100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100100) (y C100101))
                 (format (standard-output) "call with ~A ~A~%" 'C100100 'C100101)
                 (f (create (class C100101)) (create (class C10010))))
(defclass C100110 () ())
(defmethod f ((x C100110) (y C100110)) nil)
(defclass C100111 () ())
(defmethod f ((x C100111) (y C100111)) nil)
(defclass C10011 (C100110 C100111) ())
(defmethod f ((x C100111) (y C100110))
                 (format (standard-output) "call with ~A ~A~%" 'C100111 'C100110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100110) (y C100111))
                 (format (standard-output) "call with ~A ~A~%" 'C100110 'C100111)
                 (f (create (class C100111)) (create (class C10011))))
(defclass C1001 (C10010 C10011) ())
(defmethod f ((x C10011) (y C10010))
                 (format (standard-output) "call with ~A ~A~%" 'C10011 'C10010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10010) (y C10011))
                 (format (standard-output) "call with ~A ~A~%" 'C10010 'C10011)
                 (f (create (class C10011)) (create (class C1001))))
(defclass C100 (C1000 C1001) ())
(defmethod f ((x C1001) (y C1000))
                 (format (standard-output) "call with ~A ~A~%" 'C1001 'C1000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1000) (y C1001))
                 (format (standard-output) "call with ~A ~A~%" 'C1000 'C1001)
                 (f (create (class C1001)) (create (class C100))))
(defclass C101000 () ())
(defmethod f ((x C101000) (y C101000)) nil)
(defclass C101001 () ())
(defmethod f ((x C101001) (y C101001)) nil)
(defclass C10100 (C101000 C101001) ())
(defmethod f ((x C101001) (y C101000))
                 (format (standard-output) "call with ~A ~A~%" 'C101001 'C101000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101000) (y C101001))
                 (format (standard-output) "call with ~A ~A~%" 'C101000 'C101001)
                 (f (create (class C101001)) (create (class C10100))))
(defclass C101010 () ())
(defmethod f ((x C101010) (y C101010)) nil)
(defclass C101011 () ())
(defmethod f ((x C101011) (y C101011)) nil)
(defclass C10101 (C101010 C101011) ())
(defmethod f ((x C101011) (y C101010))
                 (format (standard-output) "call with ~A ~A~%" 'C101011 'C101010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101010) (y C101011))
                 (format (standard-output) "call with ~A ~A~%" 'C101010 'C101011)
                 (f (create (class C101011)) (create (class C10101))))
(defclass C1010 (C10100 C10101) ())
(defmethod f ((x C10101) (y C10100))
                 (format (standard-output) "call with ~A ~A~%" 'C10101 'C10100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10100) (y C10101))
                 (format (standard-output) "call with ~A ~A~%" 'C10100 'C10101)
                 (f (create (class C10101)) (create (class C1010))))
(defclass C101100 () ())
(defmethod f ((x C101100) (y C101100)) nil)
(defclass C101101 () ())
(defmethod f ((x C101101) (y C101101)) nil)
(defclass C10110 (C101100 C101101) ())
(defmethod f ((x C101101) (y C101100))
                 (format (standard-output) "call with ~A ~A~%" 'C101101 'C101100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101100) (y C101101))
                 (format (standard-output) "call with ~A ~A~%" 'C101100 'C101101)
                 (f (create (class C101101)) (create (class C10110))))
(defclass C101110 () ())
(defmethod f ((x C101110) (y C101110)) nil)
(defclass C101111 () ())
(defmethod f ((x C101111) (y C101111)) nil)
(defclass C10111 (C101110 C101111) ())
(defmethod f ((x C101111) (y C101110))
                 (format (standard-output) "call with ~A ~A~%" 'C101111 'C101110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C101110) (y C101111))
                 (format (standard-output) "call with ~A ~A~%" 'C101110 'C101111)
                 (f (create (class C101111)) (create (class C10111))))
(defclass C1011 (C10110 C10111) ())
(defmethod f ((x C10111) (y C10110))
                 (format (standard-output) "call with ~A ~A~%" 'C10111 'C10110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10110) (y C10111))
                 (format (standard-output) "call with ~A ~A~%" 'C10110 'C10111)
                 (f (create (class C10111)) (create (class C1011))))
(defclass C101 (C1010 C1011) ())
(defmethod f ((x C1011) (y C1010))
                 (format (standard-output) "call with ~A ~A~%" 'C1011 'C1010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1010) (y C1011))
                 (format (standard-output) "call with ~A ~A~%" 'C1010 'C1011)
                 (f (create (class C1011)) (create (class C101))))
(defclass C10 (C100 C101) ())
(defmethod f ((x C101) (y C100))
                 (format (standard-output) "call with ~A ~A~%" 'C101 'C100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C100) (y C101))
                 (format (standard-output) "call with ~A ~A~%" 'C100 'C101)
                 (f (create (class C101)) (create (class C10))))
(defclass C110000 () ())
(defmethod f ((x C110000) (y C110000)) nil)
(defclass C110001 () ())
(defmethod f ((x C110001) (y C110001)) nil)
(defclass C11000 (C110000 C110001) ())
(defmethod f ((x C110001) (y C110000))
                 (format (standard-output) "call with ~A ~A~%" 'C110001 'C110000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110000) (y C110001))
                 (format (standard-output) "call with ~A ~A~%" 'C110000 'C110001)
                 (f (create (class C110001)) (create (class C11000))))
(defclass C110010 () ())
(defmethod f ((x C110010) (y C110010)) nil)
(defclass C110011 () ())
(defmethod f ((x C110011) (y C110011)) nil)
(defclass C11001 (C110010 C110011) ())
(defmethod f ((x C110011) (y C110010))
                 (format (standard-output) "call with ~A ~A~%" 'C110011 'C110010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110010) (y C110011))
                 (format (standard-output) "call with ~A ~A~%" 'C110010 'C110011)
                 (f (create (class C110011)) (create (class C11001))))
(defclass C1100 (C11000 C11001) ())
(defmethod f ((x C11001) (y C11000))
                 (format (standard-output) "call with ~A ~A~%" 'C11001 'C11000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11000) (y C11001))
                 (format (standard-output) "call with ~A ~A~%" 'C11000 'C11001)
                 (f (create (class C11001)) (create (class C1100))))
(defclass C110100 () ())
(defmethod f ((x C110100) (y C110100)) nil)
(defclass C110101 () ())
(defmethod f ((x C110101) (y C110101)) nil)
(defclass C11010 (C110100 C110101) ())
(defmethod f ((x C110101) (y C110100))
                 (format (standard-output) "call with ~A ~A~%" 'C110101 'C110100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110100) (y C110101))
                 (format (standard-output) "call with ~A ~A~%" 'C110100 'C110101)
                 (f (create (class C110101)) (create (class C11010))))
(defclass C110110 () ())
(defmethod f ((x C110110) (y C110110)) nil)
(defclass C110111 () ())
(defmethod f ((x C110111) (y C110111)) nil)
(defclass C11011 (C110110 C110111) ())
(defmethod f ((x C110111) (y C110110))
                 (format (standard-output) "call with ~A ~A~%" 'C110111 'C110110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110110) (y C110111))
                 (format (standard-output) "call with ~A ~A~%" 'C110110 'C110111)
                 (f (create (class C110111)) (create (class C11011))))
(defclass C1101 (C11010 C11011) ())
(defmethod f ((x C11011) (y C11010))
                 (format (standard-output) "call with ~A ~A~%" 'C11011 'C11010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11010) (y C11011))
                 (format (standard-output) "call with ~A ~A~%" 'C11010 'C11011)
                 (f (create (class C11011)) (create (class C1101))))
(defclass C110 (C1100 C1101) ())
(defmethod f ((x C1101) (y C1100))
                 (format (standard-output) "call with ~A ~A~%" 'C1101 'C1100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1100) (y C1101))
                 (format (standard-output) "call with ~A ~A~%" 'C1100 'C1101)
                 (f (create (class C1101)) (create (class C110))))
(defclass C111000 () ())
(defmethod f ((x C111000) (y C111000)) nil)
(defclass C111001 () ())
(defmethod f ((x C111001) (y C111001)) nil)
(defclass C11100 (C111000 C111001) ())
(defmethod f ((x C111001) (y C111000))
                 (format (standard-output) "call with ~A ~A~%" 'C111001 'C111000)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111000) (y C111001))
                 (format (standard-output) "call with ~A ~A~%" 'C111000 'C111001)
                 (f (create (class C111001)) (create (class C11100))))
(defclass C111010 () ())
(defmethod f ((x C111010) (y C111010)) nil)
(defclass C111011 () ())
(defmethod f ((x C111011) (y C111011)) nil)
(defclass C11101 (C111010 C111011) ())
(defmethod f ((x C111011) (y C111010))
                 (format (standard-output) "call with ~A ~A~%" 'C111011 'C111010)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111010) (y C111011))
                 (format (standard-output) "call with ~A ~A~%" 'C111010 'C111011)
                 (f (create (class C111011)) (create (class C11101))))
(defclass C1110 (C11100 C11101) ())
(defmethod f ((x C11101) (y C11100))
                 (format (standard-output) "call with ~A ~A~%" 'C11101 'C11100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11100) (y C11101))
                 (format (standard-output) "call with ~A ~A~%" 'C11100 'C11101)
                 (f (create (class C11101)) (create (class C1110))))
(defclass C111100 () ())
(defmethod f ((x C111100) (y C111100)) nil)
(defclass C111101 () ())
(defmethod f ((x C111101) (y C111101)) nil)
(defclass C11110 (C111100 C111101) ())
(defmethod f ((x C111101) (y C111100))
                 (format (standard-output) "call with ~A ~A~%" 'C111101 'C111100)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111100) (y C111101))
                 (format (standard-output) "call with ~A ~A~%" 'C111100 'C111101)
                 (f (create (class C111101)) (create (class C11110))))
(defclass C111110 () ())
(defmethod f ((x C111110) (y C111110)) nil)
(defclass C111111 () ())
(defmethod f ((x C111111) (y C111111)) nil)
(defclass C11111 (C111110 C111111) ())
(defmethod f ((x C111111) (y C111110))
                 (format (standard-output) "call with ~A ~A~%" 'C111111 'C111110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C111110) (y C111111))
                 (format (standard-output) "call with ~A ~A~%" 'C111110 'C111111)
                 (f (create (class C111111)) (create (class C11111))))
(defclass C1111 (C11110 C11111) ())
(defmethod f ((x C11111) (y C11110))
                 (format (standard-output) "call with ~A ~A~%" 'C11111 'C11110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C11110) (y C11111))
                 (format (standard-output) "call with ~A ~A~%" 'C11110 'C11111)
                 (f (create (class C11111)) (create (class C1111))))
(defclass C111 (C1110 C1111) ())
(defmethod f ((x C1111) (y C1110))
                 (format (standard-output) "call with ~A ~A~%" 'C1111 'C1110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C1110) (y C1111))
                 (format (standard-output) "call with ~A ~A~%" 'C1110 'C1111)
                 (f (create (class C1111)) (create (class C111))))
(defclass C11 (C110 C111) ())
(defmethod f ((x C111) (y C110))
                 (format (standard-output) "call with ~A ~A~%" 'C111 'C110)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C110) (y C111))
                 (format (standard-output) "call with ~A ~A~%" 'C110 'C111)
                 (f (create (class C111)) (create (class C11))))
(defclass C1 (C10 C11) ())
(defmethod f ((x C11) (y C10))
                 (format (standard-output) "call with ~A ~A~%" 'C11 'C10)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C10) (y C11))
                 (format (standard-output) "call with ~A ~A~%" 'C10 'C11)
                 (f (create (class C11)) (create (class C1))))
(defclass C (C0 C1) ())
(defmethod f ((x C1) (y C0))
                 (format (standard-output) "call with ~A ~A~%" 'C1 'C0)
                 (if (next-method-p) (call-next-method)))
(defmethod f ((x C0) (y C1))
                 (format (standard-output) "call with ~A ~A~%" 'C0 'C1)
                 (f (create (class C1)) (create (class C))))
(f (create (class c)) (create (class c)))
