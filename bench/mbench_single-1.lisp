(progn (defgeneric f (x y z) (:method-combination nil))
(defclass C1 () ())
(defmethod f ((x C1) (y C1) (z C1))  
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C1))
(defclass C (C1) ())
(defmethod f ((x C) (y C) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C 'C)
                 (f (create (class C))
                    (create (class C))
                    (create (class C1))))
(defmethod f ((x C) (y C) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C 'C1)
                 (f (create (class C))
                    (create (class C1))
                    (create (class C))))
(defmethod f ((x C) (y C1) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C1 'C)
                 (f (create (class C1))
                    (create (class C))
                    (create (class C))))
(defmethod f ((x C1) (y C) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C 'C)
                 (f (create (class C))
                    (create (class C1))
                    (create (class C1))))
(defmethod f ((x C) (y C1) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C1 'C1)
                 (f (create (class C1))
                    (create (class C))
                    (create (class C1))))
(defmethod f ((x C1) (y C) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C 'C1)
                 (f (create (class C1))
                    (create (class C1))
                    (create (class C))))
(defmethod f ((x C1) (y C1) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C)
                 (f (create (class C1))
                    (create (class C1))
                    (create (class C1))))
(defmethod f ((x C1) (y C1) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C1)
                 (if (next-method-p) (call-next-method)))
(f (create (class c)) (create (class c)) (create (class c))))
