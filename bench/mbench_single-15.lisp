(progn (defgeneric f (x y z) (:method-combination nil))
(defclass C1 () ())
(defmethod f ((x C1) (y C1) (z C1))  
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C1))
(defclass C2 (C1) ())
(defmethod f ((x C2) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C2)
                 (f (create (class C2))
                    (create (class C2))
                    (create (class C1))))
(defmethod f ((x C2) (y C2) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C1)
                 (f (create (class C2))
                    (create (class C1))
                    (create (class C2))))
(defmethod f ((x C2) (y C1) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C1 'C2)
                 (f (create (class C1))
                    (create (class C2))
                    (create (class C2))))
(defmethod f ((x C1) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C2 'C2)
                 (f (create (class C2))
                    (create (class C1))
                    (create (class C1))))
(defmethod f ((x C2) (y C1) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C1 'C1)
                 (f (create (class C1))
                    (create (class C2))
                    (create (class C1))))
(defmethod f ((x C1) (y C2) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C2 'C1)
                 (f (create (class C1))
                    (create (class C1))
                    (create (class C2))))
(defmethod f ((x C1) (y C1) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C2)
                 (f (create (class C1))
                    (create (class C1))
                    (create (class C1))))
(defmethod f ((x C1) (y C1) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C1)
                 (if (next-method-p) (call-next-method)))
(defclass C3 (C2) ())
(defmethod f ((x C3) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C3)
                 (f (create (class C3))
                    (create (class C3))
                    (create (class C2))))
(defmethod f ((x C3) (y C3) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C2)
                 (f (create (class C3))
                    (create (class C2))
                    (create (class C3))))
(defmethod f ((x C3) (y C2) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C2 'C3)
                 (f (create (class C2))
                    (create (class C3))
                    (create (class C3))))
(defmethod f ((x C2) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C3 'C3)
                 (f (create (class C3))
                    (create (class C2))
                    (create (class C2))))
(defmethod f ((x C3) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C2 'C2)
                 (f (create (class C2))
                    (create (class C3))
                    (create (class C2))))
(defmethod f ((x C2) (y C3) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C3 'C2)
                 (f (create (class C2))
                    (create (class C2))
                    (create (class C3))))
(defmethod f ((x C2) (y C2) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C3)
                 (f (create (class C2))
                    (create (class C2))
                    (create (class C2))))
(defmethod f ((x C2) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C2)
                 (if (next-method-p) (call-next-method)))
(defclass C4 (C3) ())
(defmethod f ((x C4) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C4)
                 (f (create (class C4))
                    (create (class C4))
                    (create (class C3))))
(defmethod f ((x C4) (y C4) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C3)
                 (f (create (class C4))
                    (create (class C3))
                    (create (class C4))))
(defmethod f ((x C4) (y C3) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C3 'C4)
                 (f (create (class C3))
                    (create (class C4))
                    (create (class C4))))
(defmethod f ((x C3) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C4 'C4)
                 (f (create (class C4))
                    (create (class C3))
                    (create (class C3))))
(defmethod f ((x C4) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C3 'C3)
                 (f (create (class C3))
                    (create (class C4))
                    (create (class C3))))
(defmethod f ((x C3) (y C4) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C4 'C3)
                 (f (create (class C3))
                    (create (class C3))
                    (create (class C4))))
(defmethod f ((x C3) (y C3) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C4)
                 (f (create (class C3))
                    (create (class C3))
                    (create (class C3))))
(defmethod f ((x C3) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C3)
                 (if (next-method-p) (call-next-method)))
(defclass C5 (C4) ())
(defmethod f ((x C5) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C5)
                 (f (create (class C5))
                    (create (class C5))
                    (create (class C4))))
(defmethod f ((x C5) (y C5) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C4)
                 (f (create (class C5))
                    (create (class C4))
                    (create (class C5))))
(defmethod f ((x C5) (y C4) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C4 'C5)
                 (f (create (class C4))
                    (create (class C5))
                    (create (class C5))))
(defmethod f ((x C4) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C5 'C5)
                 (f (create (class C5))
                    (create (class C4))
                    (create (class C4))))
(defmethod f ((x C5) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C4 'C4)
                 (f (create (class C4))
                    (create (class C5))
                    (create (class C4))))
(defmethod f ((x C4) (y C5) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C5 'C4)
                 (f (create (class C4))
                    (create (class C4))
                    (create (class C5))))
(defmethod f ((x C4) (y C4) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C5)
                 (f (create (class C4))
                    (create (class C4))
                    (create (class C4))))
(defmethod f ((x C4) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C4)
                 (if (next-method-p) (call-next-method)))
(defclass C6 (C5) ())
(defmethod f ((x C6) (y C6) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C6 'C6)
                 (f (create (class C6))
                    (create (class C6))
                    (create (class C5))))
(defmethod f ((x C6) (y C6) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C6 'C5)
                 (f (create (class C6))
                    (create (class C5))
                    (create (class C6))))
(defmethod f ((x C6) (y C5) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C5 'C6)
                 (f (create (class C5))
                    (create (class C6))
                    (create (class C6))))
(defmethod f ((x C5) (y C6) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C6 'C6)
                 (f (create (class C6))
                    (create (class C5))
                    (create (class C5))))
(defmethod f ((x C6) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C5 'C5)
                 (f (create (class C5))
                    (create (class C6))
                    (create (class C5))))
(defmethod f ((x C5) (y C6) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C6 'C5)
                 (f (create (class C5))
                    (create (class C5))
                    (create (class C6))))
(defmethod f ((x C5) (y C5) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C6)
                 (f (create (class C5))
                    (create (class C5))
                    (create (class C5))))
(defmethod f ((x C5) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C5)
                 (if (next-method-p) (call-next-method)))
(defclass C7 (C6) ())
(defmethod f ((x C7) (y C7) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C7 'C7)
                 (f (create (class C7))
                    (create (class C7))
                    (create (class C6))))
(defmethod f ((x C7) (y C7) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C7 'C6)
                 (f (create (class C7))
                    (create (class C6))
                    (create (class C7))))
(defmethod f ((x C7) (y C6) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C6 'C7)
                 (f (create (class C6))
                    (create (class C7))
                    (create (class C7))))
(defmethod f ((x C6) (y C7) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C7 'C7)
                 (f (create (class C7))
                    (create (class C6))
                    (create (class C6))))
(defmethod f ((x C7) (y C6) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C6 'C6)
                 (f (create (class C6))
                    (create (class C7))
                    (create (class C6))))
(defmethod f ((x C6) (y C7) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C7 'C6)
                 (f (create (class C6))
                    (create (class C6))
                    (create (class C7))))
(defmethod f ((x C6) (y C6) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C6 'C7)
                 (f (create (class C6))
                    (create (class C6))
                    (create (class C6))))
(defmethod f ((x C6) (y C6) (z C6))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C6 'C6 'C6)
                 (if (next-method-p) (call-next-method)))
(defclass C8 (C7) ())
(defmethod f ((x C8) (y C8) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C8 'C8)
                 (f (create (class C8))
                    (create (class C8))
                    (create (class C7))))
(defmethod f ((x C8) (y C8) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C8 'C7)
                 (f (create (class C8))
                    (create (class C7))
                    (create (class C8))))
(defmethod f ((x C8) (y C7) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C7 'C8)
                 (f (create (class C7))
                    (create (class C8))
                    (create (class C8))))
(defmethod f ((x C7) (y C8) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C8 'C8)
                 (f (create (class C8))
                    (create (class C7))
                    (create (class C7))))
(defmethod f ((x C8) (y C7) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C7 'C7)
                 (f (create (class C7))
                    (create (class C8))
                    (create (class C7))))
(defmethod f ((x C7) (y C8) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C8 'C7)
                 (f (create (class C7))
                    (create (class C7))
                    (create (class C8))))
(defmethod f ((x C7) (y C7) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C7 'C8)
                 (f (create (class C7))
                    (create (class C7))
                    (create (class C7))))
(defmethod f ((x C7) (y C7) (z C7))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C7 'C7 'C7)
                 (if (next-method-p) (call-next-method)))
(defclass C9 (C8) ())
(defmethod f ((x C9) (y C9) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C9 'C9)
                 (f (create (class C9))
                    (create (class C9))
                    (create (class C8))))
(defmethod f ((x C9) (y C9) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C9 'C8)
                 (f (create (class C9))
                    (create (class C8))
                    (create (class C9))))
(defmethod f ((x C9) (y C8) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C8 'C9)
                 (f (create (class C8))
                    (create (class C9))
                    (create (class C9))))
(defmethod f ((x C8) (y C9) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C9 'C9)
                 (f (create (class C9))
                    (create (class C8))
                    (create (class C8))))
(defmethod f ((x C9) (y C8) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C8 'C8)
                 (f (create (class C8))
                    (create (class C9))
                    (create (class C8))))
(defmethod f ((x C8) (y C9) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C9 'C8)
                 (f (create (class C8))
                    (create (class C8))
                    (create (class C9))))
(defmethod f ((x C8) (y C8) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C8 'C9)
                 (f (create (class C8))
                    (create (class C8))
                    (create (class C8))))
(defmethod f ((x C8) (y C8) (z C8))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C8 'C8 'C8)
                 (if (next-method-p) (call-next-method)))
(defclass C10 (C9) ())
(defmethod f ((x C10) (y C10) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C10 'C10)
                 (f (create (class C10))
                    (create (class C10))
                    (create (class C9))))
(defmethod f ((x C10) (y C10) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C10 'C9)
                 (f (create (class C10))
                    (create (class C9))
                    (create (class C10))))
(defmethod f ((x C10) (y C9) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C9 'C10)
                 (f (create (class C9))
                    (create (class C10))
                    (create (class C10))))
(defmethod f ((x C9) (y C10) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C10 'C10)
                 (f (create (class C10))
                    (create (class C9))
                    (create (class C9))))
(defmethod f ((x C10) (y C9) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C9 'C9)
                 (f (create (class C9))
                    (create (class C10))
                    (create (class C9))))
(defmethod f ((x C9) (y C10) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C10 'C9)
                 (f (create (class C9))
                    (create (class C9))
                    (create (class C10))))
(defmethod f ((x C9) (y C9) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C9 'C10)
                 (f (create (class C9))
                    (create (class C9))
                    (create (class C9))))
(defmethod f ((x C9) (y C9) (z C9))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C9 'C9 'C9)
                 (if (next-method-p) (call-next-method)))
(defclass C11 (C10) ())
(defmethod f ((x C11) (y C11) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C11 'C11)
                 (f (create (class C11))
                    (create (class C11))
                    (create (class C10))))
(defmethod f ((x C11) (y C11) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C11 'C10)
                 (f (create (class C11))
                    (create (class C10))
                    (create (class C11))))
(defmethod f ((x C11) (y C10) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C10 'C11)
                 (f (create (class C10))
                    (create (class C11))
                    (create (class C11))))
(defmethod f ((x C10) (y C11) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C11 'C11)
                 (f (create (class C11))
                    (create (class C10))
                    (create (class C10))))
(defmethod f ((x C11) (y C10) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C10 'C10)
                 (f (create (class C10))
                    (create (class C11))
                    (create (class C10))))
(defmethod f ((x C10) (y C11) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C11 'C10)
                 (f (create (class C10))
                    (create (class C10))
                    (create (class C11))))
(defmethod f ((x C10) (y C10) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C10 'C11)
                 (f (create (class C10))
                    (create (class C10))
                    (create (class C10))))
(defmethod f ((x C10) (y C10) (z C10))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C10 'C10 'C10)
                 (if (next-method-p) (call-next-method)))
(defclass C12 (C11) ())
(defmethod f ((x C12) (y C12) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C12 'C12)
                 (f (create (class C12))
                    (create (class C12))
                    (create (class C11))))
(defmethod f ((x C12) (y C12) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C12 'C11)
                 (f (create (class C12))
                    (create (class C11))
                    (create (class C12))))
(defmethod f ((x C12) (y C11) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C11 'C12)
                 (f (create (class C11))
                    (create (class C12))
                    (create (class C12))))
(defmethod f ((x C11) (y C12) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C12 'C12)
                 (f (create (class C12))
                    (create (class C11))
                    (create (class C11))))
(defmethod f ((x C12) (y C11) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C11 'C11)
                 (f (create (class C11))
                    (create (class C12))
                    (create (class C11))))
(defmethod f ((x C11) (y C12) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C12 'C11)
                 (f (create (class C11))
                    (create (class C11))
                    (create (class C12))))
(defmethod f ((x C11) (y C11) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C11 'C12)
                 (f (create (class C11))
                    (create (class C11))
                    (create (class C11))))
(defmethod f ((x C11) (y C11) (z C11))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C11 'C11 'C11)
                 (if (next-method-p) (call-next-method)))
(defclass C13 (C12) ())
(defmethod f ((x C13) (y C13) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C13 'C13)
                 (f (create (class C13))
                    (create (class C13))
                    (create (class C12))))
(defmethod f ((x C13) (y C13) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C13 'C12)
                 (f (create (class C13))
                    (create (class C12))
                    (create (class C13))))
(defmethod f ((x C13) (y C12) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C12 'C13)
                 (f (create (class C12))
                    (create (class C13))
                    (create (class C13))))
(defmethod f ((x C12) (y C13) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C13 'C13)
                 (f (create (class C13))
                    (create (class C12))
                    (create (class C12))))
(defmethod f ((x C13) (y C12) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C12 'C12)
                 (f (create (class C12))
                    (create (class C13))
                    (create (class C12))))
(defmethod f ((x C12) (y C13) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C13 'C12)
                 (f (create (class C12))
                    (create (class C12))
                    (create (class C13))))
(defmethod f ((x C12) (y C12) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C12 'C13)
                 (f (create (class C12))
                    (create (class C12))
                    (create (class C12))))
(defmethod f ((x C12) (y C12) (z C12))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C12 'C12 'C12)
                 (if (next-method-p) (call-next-method)))
(defclass C14 (C13) ())
(defmethod f ((x C14) (y C14) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C14 'C14)
                 (f (create (class C14))
                    (create (class C14))
                    (create (class C13))))
(defmethod f ((x C14) (y C14) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C14 'C13)
                 (f (create (class C14))
                    (create (class C13))
                    (create (class C14))))
(defmethod f ((x C14) (y C13) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C13 'C14)
                 (f (create (class C13))
                    (create (class C14))
                    (create (class C14))))
(defmethod f ((x C13) (y C14) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C14 'C14)
                 (f (create (class C14))
                    (create (class C13))
                    (create (class C13))))
(defmethod f ((x C14) (y C13) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C13 'C13)
                 (f (create (class C13))
                    (create (class C14))
                    (create (class C13))))
(defmethod f ((x C13) (y C14) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C14 'C13)
                 (f (create (class C13))
                    (create (class C13))
                    (create (class C14))))
(defmethod f ((x C13) (y C13) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C13 'C14)
                 (f (create (class C13))
                    (create (class C13))
                    (create (class C13))))
(defmethod f ((x C13) (y C13) (z C13))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C13 'C13 'C13)
                 (if (next-method-p) (call-next-method)))
(defclass C15 (C14) ())
(defmethod f ((x C15) (y C15) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C15 'C15)
                 (f (create (class C15))
                    (create (class C15))
                    (create (class C14))))
(defmethod f ((x C15) (y C15) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C15 'C14)
                 (f (create (class C15))
                    (create (class C14))
                    (create (class C15))))
(defmethod f ((x C15) (y C14) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C14 'C15)
                 (f (create (class C14))
                    (create (class C15))
                    (create (class C15))))
(defmethod f ((x C14) (y C15) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C15 'C15)
                 (f (create (class C15))
                    (create (class C14))
                    (create (class C14))))
(defmethod f ((x C15) (y C14) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C14 'C14)
                 (f (create (class C14))
                    (create (class C15))
                    (create (class C14))))
(defmethod f ((x C14) (y C15) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C15 'C14)
                 (f (create (class C14))
                    (create (class C14))
                    (create (class C15))))
(defmethod f ((x C14) (y C14) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C14 'C15)
                 (f (create (class C14))
                    (create (class C14))
                    (create (class C14))))
(defmethod f ((x C14) (y C14) (z C14))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C14 'C14 'C14)
                 (if (next-method-p) (call-next-method)))
(defclass C (C15) ())
(defmethod f ((x C) (y C) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C 'C)
                 (f (create (class C))
                    (create (class C))
                    (create (class C15))))
(defmethod f ((x C) (y C) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C 'C15)
                 (f (create (class C))
                    (create (class C15))
                    (create (class C))))
(defmethod f ((x C) (y C15) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C15 'C)
                 (f (create (class C15))
                    (create (class C))
                    (create (class C))))
(defmethod f ((x C15) (y C) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C 'C)
                 (f (create (class C))
                    (create (class C15))
                    (create (class C15))))
(defmethod f ((x C) (y C15) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C15 'C15)
                 (f (create (class C15))
                    (create (class C))
                    (create (class C15))))
(defmethod f ((x C15) (y C) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C 'C15)
                 (f (create (class C15))
                    (create (class C15))
                    (create (class C))))
(defmethod f ((x C15) (y C15) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C15 'C)
                 (f (create (class C15))
                    (create (class C15))
                    (create (class C15))))
(defmethod f ((x C15) (y C15) (z C15))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C15 'C15 'C15)
                 (if (next-method-p) (call-next-method)))
(f (create (class c)) (create (class c)) (create (class c))))
