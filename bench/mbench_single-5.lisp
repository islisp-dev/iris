(progn (defgeneric f (x y z) (:method-combination nil))
(defclass C1 () ())
(defmethod f ((x C1) (y C1) (z C1))  
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C1))
(defclass C2 (C1) ())
(defmethod f ((x C2) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C2)
                 (f (create (class C2))
                    (create (class C2))
                    (create (class C1))))
(defmethod f ((x C2) (y C2) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C1)
                 (f (create (class C2))
                    (create (class C1))
                    (create (class C2))))
(defmethod f ((x C2) (y C1) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C1 'C2)
                 (f (create (class C1))
                    (create (class C2))
                    (create (class C2))))
(defmethod f ((x C1) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C2 'C2)
                 (f (create (class C2))
                    (create (class C1))
                    (create (class C1))))
(defmethod f ((x C2) (y C1) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C1 'C1)
                 (f (create (class C1))
                    (create (class C2))
                    (create (class C1))))
(defmethod f ((x C1) (y C2) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C2 'C1)
                 (f (create (class C1))
                    (create (class C1))
                    (create (class C2))))
(defmethod f ((x C1) (y C1) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C2)
                 (f (create (class C1))
                    (create (class C1))
                    (create (class C1))))
(defmethod f ((x C1) (y C1) (z C1))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C1 'C1 'C1)
                 (if (next-method-p) (call-next-method)))
(defclass C3 (C2) ())
(defmethod f ((x C3) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C3)
                 (f (create (class C3))
                    (create (class C3))
                    (create (class C2))))
(defmethod f ((x C3) (y C3) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C2)
                 (f (create (class C3))
                    (create (class C2))
                    (create (class C3))))
(defmethod f ((x C3) (y C2) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C2 'C3)
                 (f (create (class C2))
                    (create (class C3))
                    (create (class C3))))
(defmethod f ((x C2) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C3 'C3)
                 (f (create (class C3))
                    (create (class C2))
                    (create (class C2))))
(defmethod f ((x C3) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C2 'C2)
                 (f (create (class C2))
                    (create (class C3))
                    (create (class C2))))
(defmethod f ((x C2) (y C3) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C3 'C2)
                 (f (create (class C2))
                    (create (class C2))
                    (create (class C3))))
(defmethod f ((x C2) (y C2) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C3)
                 (f (create (class C2))
                    (create (class C2))
                    (create (class C2))))
(defmethod f ((x C2) (y C2) (z C2))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C2 'C2 'C2)
                 (if (next-method-p) (call-next-method)))
(defclass C4 (C3) ())
(defmethod f ((x C4) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C4)
                 (f (create (class C4))
                    (create (class C4))
                    (create (class C3))))
(defmethod f ((x C4) (y C4) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C3)
                 (f (create (class C4))
                    (create (class C3))
                    (create (class C4))))
(defmethod f ((x C4) (y C3) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C3 'C4)
                 (f (create (class C3))
                    (create (class C4))
                    (create (class C4))))
(defmethod f ((x C3) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C4 'C4)
                 (f (create (class C4))
                    (create (class C3))
                    (create (class C3))))
(defmethod f ((x C4) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C3 'C3)
                 (f (create (class C3))
                    (create (class C4))
                    (create (class C3))))
(defmethod f ((x C3) (y C4) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C4 'C3)
                 (f (create (class C3))
                    (create (class C3))
                    (create (class C4))))
(defmethod f ((x C3) (y C3) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C4)
                 (f (create (class C3))
                    (create (class C3))
                    (create (class C3))))
(defmethod f ((x C3) (y C3) (z C3))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C3 'C3 'C3)
                 (if (next-method-p) (call-next-method)))
(defclass C5 (C4) ())
(defmethod f ((x C5) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C5)
                 (f (create (class C5))
                    (create (class C5))
                    (create (class C4))))
(defmethod f ((x C5) (y C5) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C4)
                 (f (create (class C5))
                    (create (class C4))
                    (create (class C5))))
(defmethod f ((x C5) (y C4) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C4 'C5)
                 (f (create (class C4))
                    (create (class C5))
                    (create (class C5))))
(defmethod f ((x C4) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C5 'C5)
                 (f (create (class C5))
                    (create (class C4))
                    (create (class C4))))
(defmethod f ((x C5) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C4 'C4)
                 (f (create (class C4))
                    (create (class C5))
                    (create (class C4))))
(defmethod f ((x C4) (y C5) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C5 'C4)
                 (f (create (class C4))
                    (create (class C4))
                    (create (class C5))))
(defmethod f ((x C4) (y C4) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C5)
                 (f (create (class C4))
                    (create (class C4))
                    (create (class C4))))
(defmethod f ((x C4) (y C4) (z C4))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C4 'C4 'C4)
                 (if (next-method-p) (call-next-method)))
(defclass C (C5) ())
(defmethod f ((x C) (y C) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C 'C)
                 (f (create (class C))
                    (create (class C))
                    (create (class C5))))
(defmethod f ((x C) (y C) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C 'C5)
                 (f (create (class C))
                    (create (class C5))
                    (create (class C))))
(defmethod f ((x C) (y C5) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C5 'C)
                 (f (create (class C5))
                    (create (class C))
                    (create (class C))))
(defmethod f ((x C5) (y C) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C 'C)
                 (f (create (class C))
                    (create (class C5))
                    (create (class C5))))
(defmethod f ((x C) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C 'C5 'C5)
                 (f (create (class C5))
                    (create (class C))
                    (create (class C5))))
(defmethod f ((x C5) (y C) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C 'C5)
                 (f (create (class C5))
                    (create (class C5))
                    (create (class C))))
(defmethod f ((x C5) (y C5) (z C))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C)
                 (f (create (class C5))
                    (create (class C5))
                    (create (class C5))))
(defmethod f ((x C5) (y C5) (z C5))
                 (format (standard-output) "call with ~A ~A ~A~%" 'C5 'C5 'C5)
                 (if (next-method-p) (call-next-method)))
(f (create (class c)) (create (class c)) (create (class c))))
