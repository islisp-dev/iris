(defun binclass (c depth)
  (when (= depth 0)
    (format t "(defclass ~a () ())~%" c)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))  
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a))~%" c c c  c c c)
    (return-from binclass))
  (let ((d (intern (format nil "C~a" depth))))
    (binclass d (1- depth))
    (format t "(defclass ~a (~a) ())~%" c d)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" c c c  c c c  c c d)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" c c d  c c d  c d c)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" c d c  c d c  d c c)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" d c c  d c c  c d d)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" c d d  c d d  d c d)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" d c d  d c d  d d c)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (f (create (class ~a))
                    (create (class ~a))
                    (create (class ~a))))~%" d d c  d d c  d d d)
    (format t "(defmethod f ((x ~a) (y ~a) (z ~a))
                 (format (standard-output) \"call with ~~A ~~A ~~A~~%\" '~a '~a '~a)
                 (if (next-method-p) (call-next-method)))~%" d d d d d d)))
(format t "(progn (defgeneric f (x y z) (:method-combination nil))~%")
(binclass 'c (read))
(format t "(f (create (class c)) (create (class c)) (create (class c))))~%")
